
C-GCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800be40  0800be40  0001be40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3cc  0800c3cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d4  0800c3d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d4  0800c3d4  0001c3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200001e0  0800c5bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800c5bc  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bac  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c26  00000000  00000000  00033dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278ae  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141a3  00000000  00000000  0005fe9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebffb  00000000  00000000  00074041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016003c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e8  00000000  00000000  0016008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be24 	.word	0x0800be24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800be24 	.word	0x0800be24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001042:	2101      	movs	r1, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f8d4 	bl	80011f2 <LoRa_read>
 800104a:	4603      	mov	r3, r0
 800104c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d107      	bne.n	8001068 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f023 0307 	bic.w	r3, r3, #7
 800105e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
 8001066:	e03e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10c      	bne.n	8001088 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800106e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	b25b      	sxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
 8001086:	e02e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d10c      	bne.n	80010a8 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800108e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001092:	f023 0307 	bic.w	r3, r3, #7
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f043 0303 	orr.w	r3, r3, #3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	e01e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d10c      	bne.n	80010c8 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80010ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010b2:	f023 0307 	bic.w	r3, r3, #7
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	f043 0305 	orr.w	r3, r3, #5
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2205      	movs	r2, #5
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	e00e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d10b      	bne.n	80010e6 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80010ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010d2:	f023 0307 	bic.w	r3, r3, #7
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	f043 0306 	orr.w	r3, r3, #6
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2206      	movs	r2, #6
 80010e4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	461a      	mov	r2, r3
 80010ea:	2101      	movs	r1, #1
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f89a 	bl	8001226 <LoRa_write>
	//HAL_Delay(10);
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	f002 f8ef 	bl	80032f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6998      	ldr	r0, [r3, #24]
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	f003 fb66 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800112a:	bf00      	nop
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4618      	mov	r0, r3
 8001132:	f004 f91b 	bl	800536c <HAL_SPI_GetState>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d1f7      	bne.n	800112c <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6998      	ldr	r0, [r3, #24]
 8001140:	8b3a      	ldrh	r2, [r7, #24]
 8001142:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	f003 fcc3 	bl	8004ad2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800114c:	bf00      	nop
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4618      	mov	r0, r3
 8001154:	f004 f90a 	bl	800536c <HAL_SPI_GetState>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d1f7      	bne.n	800114e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f002 f8c5 	bl	80032f8 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4613      	mov	r3, r2
 8001184:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	f002 f8b1 	bl	80032f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6998      	ldr	r0, [r3, #24]
 800119a:	88fa      	ldrh	r2, [r7, #6]
 800119c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	f003 fb28 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011a6:	bf00      	nop
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 f8dd 	bl	800536c <HAL_SPI_GetState>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1f7      	bne.n	80011a8 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6998      	ldr	r0, [r3, #24]
 80011bc:	8b3a      	ldrh	r2, [r7, #24]
 80011be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	f003 fb17 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011c8:	bf00      	nop
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f8cc 	bl	800536c <HAL_SPI_GetState>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d1f7      	bne.n	80011ca <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f002 f887 	bl	80032f8 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af02      	add	r7, sp, #8
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001208:	f107 030f 	add.w	r3, r7, #15
 800120c:	f107 010e 	add.w	r1, r7, #14
 8001210:	2201      	movs	r2, #1
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	2201      	movs	r2, #1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff6f 	bl	80010fa <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af02      	add	r7, sp, #8
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	70fb      	strb	r3, [r7, #3]
 8001232:	4613      	mov	r3, r2
 8001234:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001240:	78bb      	ldrb	r3, [r7, #2]
 8001242:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001244:	f107 030f 	add.w	r3, r7, #15
 8001248:	f107 010e 	add.w	r1, r7, #14
 800124c:	2201      	movs	r2, #1
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff8f 	bl	8001176 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	e007      	b.n	8001288 <LoRa_receive+0x28>
		data[i]=0;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	3301      	adds	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf3      	blt.n	8001278 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001290:	2101      	movs	r1, #1
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff fed0 	bl	8001038 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001298:	2112      	movs	r1, #18
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f7ff ffa9 	bl	80011f2 <LoRa_read>
 80012a0:	4603      	mov	r3, r0
 80012a2:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80012a4:	7cfb      	ldrb	r3, [r7, #19]
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d02f      	beq.n	800130e <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	2112      	movs	r1, #18
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ffb7 	bl	8001226 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80012b8:	2113      	movs	r1, #19
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff99 	bl	80011f2 <LoRa_read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80012c4:	2110      	movs	r1, #16
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff ff93 	bl	80011f2 <LoRa_read>
 80012cc:	4603      	mov	r3, r0
 80012ce:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	461a      	mov	r2, r3
 80012d4:	210d      	movs	r1, #13
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ffa5 	bl	8001226 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80012dc:	7cba      	ldrb	r2, [r7, #18]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	bf28      	it	cs
 80012e4:	4613      	movcs	r3, r2
 80012e6:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00b      	b.n	8001306 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	18d4      	adds	r4, r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff ff7b 	bl	80011f2 <LoRa_read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbef      	blt.n	80012ee <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800130e:	2105      	movs	r1, #5
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff fe91 	bl	8001038 <LoRa_gotoMode>
    return min;
 8001316:	7ffb      	ldrb	r3, [r7, #31]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3724      	adds	r7, #36	; 0x24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <MX_GPIO_Init>:
        * EXTI
     PD5   ------> USART2_TX
     PD6   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	4bae      	ldr	r3, [pc, #696]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4aad      	ldr	r2, [pc, #692]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4bab      	ldr	r3, [pc, #684]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4ba8      	ldr	r3, [pc, #672]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4aa7      	ldr	r2, [pc, #668]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4ba5      	ldr	r3, [pc, #660]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4ba2      	ldr	r3, [pc, #648]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4aa1      	ldr	r2, [pc, #644]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b9f      	ldr	r3, [pc, #636]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	4b9c      	ldr	r3, [pc, #624]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a9b      	ldr	r2, [pc, #620]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a95      	ldr	r2, [pc, #596]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b90      	ldr	r3, [pc, #576]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a8f      	ldr	r2, [pc, #572]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b8d      	ldr	r3, [pc, #564]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c6:	4b8a      	ldr	r3, [pc, #552]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a89      	ldr	r2, [pc, #548]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b87      	ldr	r3, [pc, #540]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	4b84      	ldr	r3, [pc, #528]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a83      	ldr	r2, [pc, #524]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <MX_GPIO_Init+0x2d0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_14_Pin|GPIO_12_Pin|GPIO_7_Pin|GPIO_6_Pin
 80013f6:	2200      	movs	r2, #0
 80013f8:	f64a 413f 	movw	r1, #44095	; 0xac3f
 80013fc:	487d      	ldr	r0, [pc, #500]	; (80015f4 <MX_GPIO_Init+0x2d4>)
 80013fe:	f001 ff7b 	bl	80032f8 <HAL_GPIO_WritePin>
                          |GPIO_5_Pin|GPIO_4_Pin|GPIO_44_Pin|GPIO_43_Pin
                          |GPIO_28_Pin|GPIO_27_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_11_Pin|GPIO_10_Pin|GPIO_9_Pin|GPIO_8_Pin
 8001402:	2200      	movs	r2, #0
 8001404:	f24c 017c 	movw	r1, #49276	; 0xc07c
 8001408:	487b      	ldr	r0, [pc, #492]	; (80015f8 <MX_GPIO_Init+0x2d8>)
 800140a:	f001 ff75 	bl	80032f8 <HAL_GPIO_WritePin>
                          |SPI5_NSS_Pin|GPIO_40_Pin|GPIO_39_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2102      	movs	r1, #2
 8001412:	487a      	ldr	r0, [pc, #488]	; (80015fc <MX_GPIO_Init+0x2dc>)
 8001414:	f001 ff70 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_3_Pin|GPIO_2_Pin|GPIO_1_Pin|XBee1_RST_Pin
 8001418:	2200      	movs	r2, #0
 800141a:	f248 110e 	movw	r1, #33038	; 0x810e
 800141e:	4878      	ldr	r0, [pc, #480]	; (8001600 <MX_GPIO_Init+0x2e0>)
 8001420:	f001 ff6a 	bl	80032f8 <HAL_GPIO_WritePin>
                          |GPIO_29_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2110      	movs	r1, #16
 8001428:	4875      	ldr	r0, [pc, #468]	; (8001600 <MX_GPIO_Init+0x2e0>)
 800142a:	f001 ff65 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_42_Pin|GPIO_45_Pin|PW1_RST_Pin|XBee2_RST_Pin
 800142e:	2200      	movs	r2, #0
 8001430:	f249 313f 	movw	r1, #37695	; 0x933f
 8001434:	4873      	ldr	r0, [pc, #460]	; (8001604 <MX_GPIO_Init+0x2e4>)
 8001436:	f001 ff5f 	bl	80032f8 <HAL_GPIO_WritePin>
                          |GPIO_35_Pin|GPIO_15_Pin|GPIO_16_Pin|GPIO_17_Pin
                          |GPIO_18_Pin|GPIO_19_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIPO_41_Pin|GPIO_38_Pin|USER_LED6_Pin|USER_LED5_Pin
 800143a:	2200      	movs	r2, #0
 800143c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001440:	4871      	ldr	r0, [pc, #452]	; (8001608 <MX_GPIO_Init+0x2e8>)
 8001442:	f001 ff59 	bl	80032f8 <HAL_GPIO_WritePin>
                          |USER_LED4_Pin|USER_LED3_Pin|USER_LED2_Pin|USER_LED1_Pin
                          |SPI6_NSS_Pin|PW2_DIO0_Pin|PW2_DIO1_Pin|PW2_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IGNITION_5_Pin|IGNITION_4_Pin|IGNITION_3_Pin|IGNITION_2_Pin
 8001446:	2200      	movs	r2, #0
 8001448:	f64f 6103 	movw	r1, #65027	; 0xfe03
 800144c:	486f      	ldr	r0, [pc, #444]	; (800160c <MX_GPIO_Init+0x2ec>)
 800144e:	f001 ff53 	bl	80032f8 <HAL_GPIO_WritePin>
                          |IGNITION_1_Pin|GPIO_37_Pin|GPIO_36_Pin|GPIO_20_Pin
                          |GPIO_21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_34_Pin|GPIO_33_Pin|GPIO_32_Pin|GPIO_31_Pin
 8001452:	2200      	movs	r2, #0
 8001454:	f64d 710b 	movw	r1, #57099	; 0xdf0b
 8001458:	486d      	ldr	r0, [pc, #436]	; (8001610 <MX_GPIO_Init+0x2f0>)
 800145a:	f001 ff4d 	bl	80032f8 <HAL_GPIO_WritePin>
                          |GPIO_25_Pin|GPIO_24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_12_Pin|GPIO_7_Pin|GPIO_6_Pin
 800145e:	f64a 433f 	movw	r3, #44095	; 0xac3f
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_5_Pin|GPIO_4_Pin|GPIO_44_Pin|GPIO_43_Pin
                          |GPIO_28_Pin|GPIO_27_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	485f      	ldr	r0, [pc, #380]	; (80015f4 <MX_GPIO_Init+0x2d4>)
 8001478:	f001 fd92 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_13_Pin;
 800147c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_13_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	4858      	ldr	r0, [pc, #352]	; (80015f4 <MX_GPIO_Init+0x2d4>)
 8001492:	f001 fd85 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GPIO_11_Pin|GPIO_10_Pin|GPIO_9_Pin|GPIO_8_Pin
 8001496:	f24c 037c 	movw	r3, #49276	; 0xc07c
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI5_NSS_Pin|GPIO_40_Pin|GPIO_39_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4852      	ldr	r0, [pc, #328]	; (80015f8 <MX_GPIO_Init+0x2d8>)
 80014b0:	f001 fd76 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI1_DIO0_Pin|PW1_DIO1_Pin|PW1_DIO0_Pin;
 80014b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	484b      	ldr	r0, [pc, #300]	; (80015f8 <MX_GPIO_Init+0x2d8>)
 80014cc:	f001 fd68 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 80014d0:	2302      	movs	r3, #2
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4845      	ldr	r0, [pc, #276]	; (80015fc <MX_GPIO_Init+0x2dc>)
 80014e8:	f001 fd5a 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_3_Pin|GPIO_2_Pin|GPIO_1_Pin|XBee1_RST_Pin
 80014ec:	f248 130e 	movw	r3, #33038	; 0x810e
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_29_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	483e      	ldr	r0, [pc, #248]	; (8001600 <MX_GPIO_Init+0x2e0>)
 8001506:	f001 fd4b 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800150a:	2310      	movs	r3, #16
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4837      	ldr	r0, [pc, #220]	; (8001600 <MX_GPIO_Init+0x2e0>)
 8001522:	f001 fd3d 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_42_Pin|GPIO_45_Pin|PW1_RST_Pin|XBee2_RST_Pin
 8001526:	f249 333f 	movw	r3, #37695	; 0x933f
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_35_Pin|GPIO_15_Pin|GPIO_16_Pin|GPIO_17_Pin
                          |GPIO_18_Pin|GPIO_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	4831      	ldr	r0, [pc, #196]	; (8001604 <MX_GPIO_Init+0x2e4>)
 8001540:	f001 fd2e 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = GPIPO_41_Pin|GPIO_38_Pin|USER_LED6_Pin|USER_LED5_Pin
 8001544:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
                          |USER_LED4_Pin|USER_LED3_Pin|USER_LED2_Pin|USER_LED1_Pin
                          |SPI6_NSS_Pin|PW2_DIO0_Pin|PW2_DIO1_Pin|PW2_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	482a      	ldr	r0, [pc, #168]	; (8001608 <MX_GPIO_Init+0x2e8>)
 800155e:	f001 fd1f 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = IGNITION_5_Pin|IGNITION_4_Pin|IGNITION_3_Pin|IGNITION_2_Pin
 8001562:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
                          |IGNITION_1_Pin|GPIO_37_Pin|GPIO_36_Pin|GPIO_20_Pin
                          |GPIO_21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4824      	ldr	r0, [pc, #144]	; (800160c <MX_GPIO_Init+0x2ec>)
 800157c:	f001 fd10 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_34_Pin|GPIO_33_Pin|GPIO_32_Pin|GPIO_31_Pin
 8001580:	f64d 730b 	movw	r3, #57099	; 0xdf0b
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_30_Pin|USER_LED8_Pin|USER_LED7_Pin|GPIO_26_Pin
                          |GPIO_25_Pin|GPIO_24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <MX_GPIO_Init+0x2f0>)
 800159a:	f001 fd01 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800159e:	2360      	movs	r3, #96	; 0x60
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ae:	2307      	movs	r3, #7
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4815      	ldr	r0, [pc, #84]	; (8001610 <MX_GPIO_Init+0x2f0>)
 80015ba:	f001 fcf1 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI6_DIO0_Pin;
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI6_DIO0_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	480f      	ldr	r0, [pc, #60]	; (8001610 <MX_GPIO_Init+0x2f0>)
 80015d4:	f001 fce4 	bl	8002fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2028      	movs	r0, #40	; 0x28
 80015de:	f001 fc16 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e2:	2028      	movs	r0, #40	; 0x28
 80015e4:	f001 fc2f 	bl	8002e46 <HAL_NVIC_EnableIRQ>

}
 80015e8:	bf00      	nop
 80015ea:	3738      	adds	r7, #56	; 0x38
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40021400 	.word	0x40021400
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40021800 	.word	0x40021800
 800160c:	40021000 	.word	0x40021000
 8001610:	40020c00 	.word	0x40020c00

08001614 <GPS_Init>:
GPS_t GPS;
Gps gps;


void GPS_Init()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001618:	2201      	movs	r2, #1
 800161a:	4903      	ldr	r1, [pc, #12]	; (8001628 <GPS_Init+0x14>)
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <GPS_Init+0x18>)
 800161e:	f004 f91b 	bl	8005858 <HAL_UART_Receive_IT>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001fc 	.word	0x200001fc
 800162c:	200005e4 	.word	0x200005e4

08001630 <GPS_CallBack>:


void GPS_CallBack(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <GPS_CallBack+0x80>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b0a      	cmp	r3, #10
 800163a:	d00b      	beq.n	8001654 <GPS_CallBack+0x24>
		rx_buffer[rx_index++] = rx_data;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <GPS_CallBack+0x84>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b2d1      	uxtb	r1, r2
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <GPS_CallBack+0x84>)
 8001646:	7011      	strb	r1, [r2, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <GPS_CallBack+0x80>)
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <GPS_CallBack+0x88>)
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	e011      	b.n	8001678 <GPS_CallBack+0x48>
	} else {

		if(GPS_validate((char*) rx_buffer))
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <GPS_CallBack+0x88>)
 8001656:	f000 f837 	bl	80016c8 <GPS_validate>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <GPS_CallBack+0x36>
			GPS_parse((char*) rx_buffer);
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <GPS_CallBack+0x88>)
 8001662:	f000 f893 	bl	800178c <GPS_parse>
		rx_index = 0;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <GPS_CallBack+0x84>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	2100      	movs	r1, #0
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <GPS_CallBack+0x88>)
 8001674:	f005 fb24 	bl	8006cc0 <memset>
	}
    gps.utc_time = GPS.utc_time;
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <GPS_CallBack+0x8c>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <GPS_CallBack+0x90>)
 800167e:	6113      	str	r3, [r2, #16]
	gps.latitude = GPS.dec_latitude;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <GPS_CallBack+0x8c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <GPS_CallBack+0x90>)
 8001686:	6013      	str	r3, [r2, #0]
	gps.longtitude = GPS.dec_longitude;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <GPS_CallBack+0x8c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <GPS_CallBack+0x90>)
 800168e:	6053      	str	r3, [r2, #4]
	gps.altitude = GPS.msl_altitude;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <GPS_CallBack+0x8c>)
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <GPS_CallBack+0x90>)
 8001696:	6093      	str	r3, [r2, #8]
	gps.sat = GPS.satelites;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <GPS_CallBack+0x8c>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <GPS_CallBack+0x90>)
 800169e:	60d3      	str	r3, [r2, #12]
    
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	4903      	ldr	r1, [pc, #12]	; (80016b0 <GPS_CallBack+0x80>)
 80016a4:	4807      	ldr	r0, [pc, #28]	; (80016c4 <GPS_CallBack+0x94>)
 80016a6:	f004 f8d7 	bl	8005858 <HAL_UART_Receive_IT>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001fc 	.word	0x200001fc
 80016b4:	20000300 	.word	0x20000300
 80016b8:	20000200 	.word	0x20000200
 80016bc:	20000304 	.word	0x20000304
 80016c0:	2000035c 	.word	0x2000035c
 80016c4:	200005e4 	.word	0x200005e4

080016c8 <GPS_validate>:


int GPS_validate(char *nmeastr){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b24      	cmp	r3, #36	; 0x24
 80016e2:	d103      	bne.n	80016ec <GPS_validate+0x24>
        i++;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3301      	adds	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80016ea:	e00c      	b.n	8001706 <GPS_validate+0x3e>
        return 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e047      	b.n	8001780 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4053      	eors	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        i++;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <GPS_validate+0x5c>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b2a      	cmp	r3, #42	; 0x2a
 800171c:	d002      	beq.n	8001724 <GPS_validate+0x5c>
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b4a      	cmp	r3, #74	; 0x4a
 8001722:	dde5      	ble.n	80016f0 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b4a      	cmp	r3, #74	; 0x4a
 8001728:	dd01      	ble.n	800172e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800172a:	2300      	movs	r3, #0
 800172c:	e028      	b.n	8001780 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b2a      	cmp	r3, #42	; 0x2a
 8001738:	d119      	bne.n	800176e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3302      	adds	r3, #2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	490a      	ldr	r1, [pc, #40]	; (8001788 <GPS_validate+0xc0>)
 800175e:	4618      	mov	r0, r3
 8001760:	f006 f936 	bl	80079d0 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001764:	7a3a      	ldrb	r2, [r7, #8]
 8001766:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001768:	429a      	cmp	r2, r3
 800176a:	d108      	bne.n	800177e <GPS_validate+0xb6>
 800176c:	e001      	b.n	8001772 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800176e:	2300      	movs	r3, #0
 8001770:	e006      	b.n	8001780 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001772:	7a7a      	ldrb	r2, [r7, #9]
 8001774:	7b7b      	ldrb	r3, [r7, #13]
 8001776:	429a      	cmp	r2, r3
 8001778:	d101      	bne.n	800177e <GPS_validate+0xb6>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <GPS_validate+0xb8>
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	0800be40 	.word	0x0800be40

0800178c <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af08      	add	r7, sp, #32
 8001792:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001794:	2206      	movs	r2, #6
 8001796:	494a      	ldr	r1, [pc, #296]	; (80018c0 <GPS_parse+0x134>)
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f006 f9aa 	bl	8007af2 <strncmp>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d137      	bne.n	8001814 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <GPS_parse+0x138>)
 80017a6:	9307      	str	r3, [sp, #28]
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <GPS_parse+0x13c>)
 80017aa:	9306      	str	r3, [sp, #24]
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <GPS_parse+0x140>)
 80017ae:	9305      	str	r3, [sp, #20]
 80017b0:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <GPS_parse+0x144>)
 80017b2:	9304      	str	r3, [sp, #16]
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <GPS_parse+0x148>)
 80017b6:	9303      	str	r3, [sp, #12]
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <GPS_parse+0x14c>)
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <GPS_parse+0x150>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <GPS_parse+0x154>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <GPS_parse+0x158>)
 80017c6:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <GPS_parse+0x15c>)
 80017c8:	4948      	ldr	r1, [pc, #288]	; (80018ec <GPS_parse+0x160>)
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f006 f920 	bl	8007a10 <siscanf>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dd70      	ble.n	80018b8 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <GPS_parse+0x164>)
 80017d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80017dc:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <GPS_parse+0x164>)
 80017de:	7e1b      	ldrb	r3, [r3, #24]
 80017e0:	4618      	mov	r0, r3
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	f000 f8a7 	bl	8001938 <GPS_nmea_to_dec>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <GPS_parse+0x164>)
 80017f0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80017f4:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <GPS_parse+0x164>)
 80017f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <GPS_parse+0x164>)
 80017fc:	7e5b      	ldrb	r3, [r3, #25]
 80017fe:	4618      	mov	r0, r3
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	f000 f898 	bl	8001938 <GPS_nmea_to_dec>
 8001808:	eef0 7a40 	vmov.f32	s15, s0
 800180c:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <GPS_parse+0x164>)
 800180e:	edc3 7a00 	vstr	s15, [r3]
    		return;
 8001812:	e051      	b.n	80018b8 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001814:	2206      	movs	r2, #6
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <GPS_parse+0x168>)
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f006 f96a 	bl	8007af2 <strncmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d114      	bne.n	800184e <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <GPS_parse+0x16c>)
 8001826:	9305      	str	r3, [sp, #20]
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <GPS_parse+0x170>)
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <GPS_parse+0x174>)
 800182e:	9303      	str	r3, [sp, #12]
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <GPS_parse+0x14c>)
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <GPS_parse+0x150>)
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <GPS_parse+0x154>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <GPS_parse+0x158>)
 800183e:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <GPS_parse+0x15c>)
 8001840:	4930      	ldr	r1, [pc, #192]	; (8001904 <GPS_parse+0x178>)
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f006 f8e4 	bl	8007a10 <siscanf>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	e034      	b.n	80018b8 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800184e:	2206      	movs	r2, #6
 8001850:	492d      	ldr	r1, [pc, #180]	; (8001908 <GPS_parse+0x17c>)
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f006 f94d 	bl	8007af2 <strncmp>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d110      	bne.n	8001880 <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <GPS_parse+0x180>)
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <GPS_parse+0x15c>)
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <GPS_parse+0x14c>)
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <GPS_parse+0x150>)
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <GPS_parse+0x154>)
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <GPS_parse+0x158>)
 8001872:	4927      	ldr	r1, [pc, #156]	; (8001910 <GPS_parse+0x184>)
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f006 f8cb 	bl	8007a10 <siscanf>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	e01b      	b.n	80018b8 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001880:	2206      	movs	r2, #6
 8001882:	4924      	ldr	r1, [pc, #144]	; (8001914 <GPS_parse+0x188>)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f006 f934 	bl	8007af2 <strncmp>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <GPS_parse+0x18c>)
 8001892:	9305      	str	r3, [sp, #20]
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <GPS_parse+0x190>)
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <GPS_parse+0x194>)
 800189a:	9303      	str	r3, [sp, #12]
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <GPS_parse+0x174>)
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <GPS_parse+0x198>)
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <GPS_parse+0x19c>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <GPS_parse+0x1a0>)
 80018aa:	4a21      	ldr	r2, [pc, #132]	; (8001930 <GPS_parse+0x1a4>)
 80018ac:	4921      	ldr	r1, [pc, #132]	; (8001934 <GPS_parse+0x1a8>)
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f006 f8ae 	bl	8007a10 <siscanf>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
            return;
    }
}
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	0800be48 	.word	0x0800be48
 80018c4:	20000330 	.word	0x20000330
 80018c8:	2000032c 	.word	0x2000032c
 80018cc:	20000328 	.word	0x20000328
 80018d0:	20000324 	.word	0x20000324
 80018d4:	20000320 	.word	0x20000320
 80018d8:	2000031d 	.word	0x2000031d
 80018dc:	20000310 	.word	0x20000310
 80018e0:	2000031c 	.word	0x2000031c
 80018e4:	20000314 	.word	0x20000314
 80018e8:	20000318 	.word	0x20000318
 80018ec:	0800be50 	.word	0x0800be50
 80018f0:	20000304 	.word	0x20000304
 80018f4:	0800be78 	.word	0x0800be78
 80018f8:	2000033c 	.word	0x2000033c
 80018fc:	20000338 	.word	0x20000338
 8001900:	20000334 	.word	0x20000334
 8001904:	0800be80 	.word	0x0800be80
 8001908:	0800bea0 	.word	0x0800bea0
 800190c:	20000340 	.word	0x20000340
 8001910:	0800bea8 	.word	0x0800bea8
 8001914:	0800bec4 	.word	0x0800bec4
 8001918:	20000358 	.word	0x20000358
 800191c:	20000354 	.word	0x20000354
 8001920:	20000351 	.word	0x20000351
 8001924:	20000350 	.word	0x20000350
 8001928:	2000034c 	.word	0x2000034c
 800192c:	20000348 	.word	0x20000348
 8001930:	20000344 	.word	0x20000344
 8001934:	0800becc 	.word	0x0800becc

08001938 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001942:	4603      	mov	r3, r0
 8001944:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001946:	ed97 7a01 	vldr	s14, [r7, #4]
 800194a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80019cc <GPS_nmea_to_dec+0x94>
 800194e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001956:	ee17 3a90 	vmov	r3, s15
 800195a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2264      	movs	r2, #100	; 0x64
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001974:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001978:	ed97 7a03 	vldr	s14, [r7, #12]
 800197c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80019d0 <GPS_nmea_to_dec+0x98>
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	ed97 7a02 	vldr	s14, [r7, #8]
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	2b53      	cmp	r3, #83	; 0x53
 80019a2:	d002      	beq.n	80019aa <GPS_nmea_to_dec+0x72>
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	2b57      	cmp	r3, #87	; 0x57
 80019a8:	d105      	bne.n	80019b6 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	eef1 7a67 	vneg.f32	s15, s15
 80019b2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	ee07 3a90 	vmov	s15, r3
}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	42c80000 	.word	0x42c80000
 80019d0:	42700000 	.word	0x42700000

080019d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <MX_I2C1_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <MX_I2C1_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a10:	f001 fca4 	bl	800335c <HAL_I2C_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a1a:	f000 faaf 	bl	8001f7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a22:	f001 fd2b 	bl	800347c <HAL_I2CEx_ConfigAnalogFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a2c:	f000 faa6 	bl	8001f7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a34:	f001 fd6d 	bl	8003512 <HAL_I2CEx_ConfigDigitalFilter>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 fa9d 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000374 	.word	0x20000374
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	00303d5b 	.word	0x00303d5b

08001a54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <MX_I2C2_Init+0x78>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <MX_I2C2_Init+0x7c>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a8e:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001a90:	f001 fc64 	bl	800335c <HAL_I2C_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a9a:	f000 fa6f 	bl	8001f7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001aa2:	f001 fceb 	bl	800347c <HAL_I2CEx_ConfigAnalogFilter>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001aac:	f000 fa66 	bl	8001f7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_I2C2_Init+0x74>)
 8001ab4:	f001 fd2d 	bl	8003512 <HAL_I2CEx_ConfigDigitalFilter>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001abe:	f000 fa5d 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003c8 	.word	0x200003c8
 8001acc:	40005800 	.word	0x40005800
 8001ad0:	00303d5b 	.word	0x00303d5b

08001ad4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ac      	sub	sp, #176	; 0xb0
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	2284      	movs	r2, #132	; 0x84
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 f8e3 	bl	8006cc0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <HAL_I2C_MspInit+0x138>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d13c      	bne.n	8001b7e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 f9d4 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b1e:	f000 fa2d 	bl	8001f7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b40:	2312      	movs	r3, #18
 8001b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b52:	2304      	movs	r3, #4
 8001b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482d      	ldr	r0, [pc, #180]	; (8001c14 <HAL_I2C_MspInit+0x140>)
 8001b60:	f001 fa1e 	bl	8002fa0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b7c:	e041      	b.n	8001c02 <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <HAL_I2C_MspInit+0x144>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d13c      	bne.n	8001c02 <HAL_I2C_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f991 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001ba4:	f000 f9ea 	bl	8001f7c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <HAL_I2C_MspInit+0x148>)
 8001be6:	f001 f9db 	bl	8002fa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_I2C_MspInit+0x13c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
}
 8001c02:	bf00      	nop
 8001c04:	37b0      	adds	r7, #176	; 0xb0
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400
 8001c18:	40005800 	.word	0x40005800
 8001c1c:	40021400 	.word	0x40021400

08001c20 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if (huart->Instance == huart5.Instance)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_UART_RxCpltCallback+0x20>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d101      	bne.n	8001c38 <HAL_UART_RxCpltCallback+0x18>
    GPS_CallBack();
 8001c34:	f7ff fcfc 	bl	8001630 <GPS_CallBack>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200005e4 	.word	0x200005e4

08001c44 <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_PIN == PW1_DIO0_Pin)
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_EXTI_Callback+0x16>
    loraRecevice();
 8001c56:	f000 f805 	bl	8001c64 <loraRecevice>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <loraRecevice>:
    // hata
  }
}

void loraRecevice()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  LoRa_receive(&myLoRa, loraReceiveBuffer, sizeof(loraReceiveBuffer));
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4903      	ldr	r1, [pc, #12]	; (8001c78 <loraRecevice+0x14>)
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <loraRecevice+0x18>)
 8001c6e:	f7ff faf7 	bl	8001260 <LoRa_receive>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000448 	.word	0x20000448
 8001c7c:	2000041c 	.word	0x2000041c

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c84:	f000 ff67 	bl	8002b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c88:	f000 f91c 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8c:	f7ff fb48 	bl	8001320 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c90:	f000 f97a 	bl	8001f88 <MX_SPI1_Init>
  MX_SPI6_Init();
 8001c94:	f000 fa30 	bl	80020f8 <MX_SPI6_Init>
  MX_UART7_Init();
 8001c98:	f000 fcca 	bl	8002630 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8001c9c:	f000 fcf8 	bl	8002690 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001ca0:	f000 fd26 	bl	80026f0 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8001ca4:	f000 f9ae 	bl	8002004 <MX_SPI4_Init>
  MX_I2C1_Init();
 8001ca8:	f7ff fe94 	bl	80019d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001cac:	f7ff fed2 	bl	8001a54 <MX_I2C2_Init>
  MX_SPI5_Init();
 8001cb0:	f000 f9e4 	bl	800207c <MX_SPI5_Init>
  MX_UART5_Init();
 8001cb4:	f000 fc8c 	bl	80025d0 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8001cb8:	f000 fd4a 	bl	8002750 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
 // initLoRa();
  GPS_Init();
 8001cbc:	f7ff fcaa 	bl	8001614 <GPS_Init>

  HAL_GPIO_WritePin(PW2_RST_GPIO_Port, PW2_RST_Pin, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc6:	487b      	ldr	r0, [pc, #492]	; (8001eb4 <main+0x234>)
 8001cc8:	f001 fb16 	bl	80032f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI6_NSS_GPIO_Port, SPI6_NSS_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd2:	4878      	ldr	r0, [pc, #480]	; (8001eb4 <main+0x234>)
 8001cd4:	f001 fb10 	bl	80032f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	4876      	ldr	r0, [pc, #472]	; (8001eb8 <main+0x238>)
 8001cde:	f001 fb0b 	bl	80032f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4875      	ldr	r0, [pc, #468]	; (8001ebc <main+0x23c>)
 8001ce8:	f001 fb06 	bl	80032f8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 1);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	4870      	ldr	r0, [pc, #448]	; (8001eb4 <main+0x234>)
 8001cf2:	f001 fb01 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001cf6:	200a      	movs	r0, #10
 8001cf8:	f000 ff8a 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	486c      	ldr	r0, [pc, #432]	; (8001eb4 <main+0x234>)
 8001d02:	f001 faf9 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d06:	200a      	movs	r0, #10
 8001d08:	f000 ff82 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2140      	movs	r1, #64	; 0x40
 8001d10:	4868      	ldr	r0, [pc, #416]	; (8001eb4 <main+0x234>)
 8001d12:	f001 faf1 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d16:	200a      	movs	r0, #10
 8001d18:	f000 ff7a 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	4864      	ldr	r0, [pc, #400]	; (8001eb4 <main+0x234>)
 8001d22:	f001 fae9 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d26:	200a      	movs	r0, #10
 8001d28:	f000 ff72 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, 1);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2120      	movs	r1, #32
 8001d30:	4860      	ldr	r0, [pc, #384]	; (8001eb4 <main+0x234>)
 8001d32:	f001 fae1 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f000 ff6a 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2120      	movs	r1, #32
 8001d40:	485c      	ldr	r0, [pc, #368]	; (8001eb4 <main+0x234>)
 8001d42:	f001 fad9 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d46:	200a      	movs	r0, #10
 8001d48:	f000 ff62 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 1);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2110      	movs	r1, #16
 8001d50:	4858      	ldr	r0, [pc, #352]	; (8001eb4 <main+0x234>)
 8001d52:	f001 fad1 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d56:	200a      	movs	r0, #10
 8001d58:	f000 ff5a 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4854      	ldr	r0, [pc, #336]	; (8001eb4 <main+0x234>)
 8001d62:	f001 fac9 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d66:	200a      	movs	r0, #10
 8001d68:	f000 ff52 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, 1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2108      	movs	r1, #8
 8001d70:	4850      	ldr	r0, [pc, #320]	; (8001eb4 <main+0x234>)
 8001d72:	f001 fac1 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f000 ff4a 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2108      	movs	r1, #8
 8001d80:	484c      	ldr	r0, [pc, #304]	; (8001eb4 <main+0x234>)
 8001d82:	f001 fab9 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d86:	200a      	movs	r0, #10
 8001d88:	f000 ff42 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED6_GPIO_Port, USER_LED6_Pin, 1);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4848      	ldr	r0, [pc, #288]	; (8001eb4 <main+0x234>)
 8001d92:	f001 fab1 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f000 ff3a 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED6_GPIO_Port, USER_LED6_Pin, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4844      	ldr	r0, [pc, #272]	; (8001eb4 <main+0x234>)
 8001da2:	f001 faa9 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001da6:	200a      	movs	r0, #10
 8001da8:	f000 ff32 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED7_GPIO_Port, USER_LED7_Pin, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db2:	4843      	ldr	r0, [pc, #268]	; (8001ec0 <main+0x240>)
 8001db4:	f001 faa0 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001db8:	200a      	movs	r0, #10
 8001dba:	f000 ff29 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED7_GPIO_Port, USER_LED7_Pin, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc4:	483e      	ldr	r0, [pc, #248]	; (8001ec0 <main+0x240>)
 8001dc6:	f001 fa97 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f000 ff20 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED8_GPIO_Port, USER_LED8_Pin, 1);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd6:	483a      	ldr	r0, [pc, #232]	; (8001ec0 <main+0x240>)
 8001dd8:	f001 fa8e 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001ddc:	200a      	movs	r0, #10
 8001dde:	f000 ff17 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED8_GPIO_Port, USER_LED8_Pin, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de8:	4835      	ldr	r0, [pc, #212]	; (8001ec0 <main+0x240>)
 8001dea:	f001 fa85 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f000 ff0e 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED7_GPIO_Port, USER_LED7_Pin, 1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfa:	4831      	ldr	r0, [pc, #196]	; (8001ec0 <main+0x240>)
 8001dfc:	f001 fa7c 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f000 ff05 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED7_GPIO_Port, USER_LED7_Pin, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0c:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <main+0x240>)
 8001e0e:	f001 fa73 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e12:	200a      	movs	r0, #10
 8001e14:	f000 fefc 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED6_GPIO_Port, USER_LED6_Pin, 1);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4825      	ldr	r0, [pc, #148]	; (8001eb4 <main+0x234>)
 8001e1e:	f001 fa6b 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e22:	200a      	movs	r0, #10
 8001e24:	f000 fef4 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED6_GPIO_Port, USER_LED6_Pin, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4821      	ldr	r0, [pc, #132]	; (8001eb4 <main+0x234>)
 8001e2e:	f001 fa63 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e32:	200a      	movs	r0, #10
 8001e34:	f000 feec 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, 1);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	481d      	ldr	r0, [pc, #116]	; (8001eb4 <main+0x234>)
 8001e3e:	f001 fa5b 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e42:	200a      	movs	r0, #10
 8001e44:	f000 fee4 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <main+0x234>)
 8001e4e:	f001 fa53 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f000 fedc 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 1);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4815      	ldr	r0, [pc, #84]	; (8001eb4 <main+0x234>)
 8001e5e:	f001 fa4b 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f000 fed4 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <main+0x234>)
 8001e6e:	f001 fa43 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e72:	200a      	movs	r0, #10
 8001e74:	f000 fecc 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <main+0x234>)
 8001e7e:	f001 fa3b 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e82:	200a      	movs	r0, #10
 8001e84:	f000 fec4 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <main+0x234>)
 8001e8e:	f001 fa33 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e92:	200a      	movs	r0, #10
 8001e94:	f000 febc 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, 1);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <main+0x234>)
 8001e9e:	f001 fa2b 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	f000 feb4 	bl	8002c10 <HAL_Delay>
    HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2140      	movs	r1, #64	; 0x40
 8001eac:	4801      	ldr	r0, [pc, #4]	; (8001eb4 <main+0x234>)
 8001eae:	f001 fa23 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 1);
 8001eb2:	e71b      	b.n	8001cec <main+0x6c>
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	40021400 	.word	0x40021400
 8001ebc:	40021c00 	.word	0x40021c00
 8001ec0:	40020c00 	.word	0x40020c00

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b094      	sub	sp, #80	; 0x50
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	2230      	movs	r2, #48	; 0x30
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fef4 	bl	8006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <SystemClock_Config+0xb0>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <SystemClock_Config+0xb0>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <SystemClock_Config+0xb0>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <SystemClock_Config+0xb4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <SystemClock_Config+0xb4>)
 8001f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <SystemClock_Config+0xb4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f20:	2301      	movs	r3, #1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f24:	2310      	movs	r3, #16
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2c:	f107 0320 	add.w	r3, r7, #32
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 fb3b 	bl	80035ac <HAL_RCC_OscConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001f3c:	f000 f81e 	bl	8001f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f40:	230f      	movs	r3, #15
 8001f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 fdca 	bl	8003af4 <HAL_RCC_ClockConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f66:	f000 f809 	bl	8001f7c <Error_Handler>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3750      	adds	r7, #80	; 0x50
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40007000 	.word	0x40007000

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <MX_SPI1_Init+0x78>)
 8001f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fa2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fe8:	f002 fb5a 	bl	80046a0 <HAL_SPI_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ff2:	f7ff ffc3 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000450 	.word	0x20000450
 8002000:	40013000 	.word	0x40013000

08002004 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_SPI4_Init+0x70>)
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <MX_SPI4_Init+0x74>)
 800200c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <MX_SPI4_Init+0x70>)
 8002010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002014:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <MX_SPI4_Init+0x70>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_SPI4_Init+0x70>)
 800201e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002022:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_SPI4_Init+0x70>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_SPI4_Init+0x70>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_SPI4_Init+0x70>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_SPI4_Init+0x70>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <MX_SPI4_Init+0x70>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_SPI4_Init+0x70>)
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <MX_SPI4_Init+0x70>)
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_SPI4_Init+0x70>)
 8002050:	2207      	movs	r2, #7
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MX_SPI4_Init+0x70>)
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_SPI4_Init+0x70>)
 800205c:	2208      	movs	r2, #8
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_SPI4_Init+0x70>)
 8002062:	f002 fb1d 	bl	80046a0 <HAL_SPI_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_SPI4_Init+0x6c>
  {
    Error_Handler();
 800206c:	f7ff ff86 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200004b4 	.word	0x200004b4
 8002078:	40013400 	.word	0x40013400

0800207c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <MX_SPI5_Init+0x74>)
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <MX_SPI5_Init+0x78>)
 8002084:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <MX_SPI5_Init+0x74>)
 8002088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800208c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <MX_SPI5_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_SPI5_Init+0x74>)
 8002096:	f44f 7240 	mov.w	r2, #768	; 0x300
 800209a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_SPI5_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020ca:	2207      	movs	r2, #7
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020d6:	2208      	movs	r2, #8
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_SPI5_Init+0x74>)
 80020dc:	f002 fae0 	bl	80046a0 <HAL_SPI_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80020e6:	f7ff ff49 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000518 	.word	0x20000518
 80020f4:	40015000 	.word	0x40015000

080020f8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <MX_SPI6_Init+0x74>)
 80020fe:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <MX_SPI6_Init+0x78>)
 8002100:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_SPI6_Init+0x74>)
 8002104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002108:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <MX_SPI6_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <MX_SPI6_Init+0x74>)
 8002112:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002116:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_SPI6_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <MX_SPI6_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_SPI6_Init+0x74>)
 8002126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212a:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_SPI6_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_SPI6_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_SPI6_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_SPI6_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_SPI6_Init+0x74>)
 8002146:	2207      	movs	r2, #7
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_SPI6_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_SPI6_Init+0x74>)
 8002152:	2208      	movs	r2, #8
 8002154:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_SPI6_Init+0x74>)
 8002158:	f002 faa2 	bl	80046a0 <HAL_SPI_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8002162:	f7ff ff0b 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000057c 	.word	0x2000057c
 8002170:	40015400 	.word	0x40015400

08002174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b090      	sub	sp, #64	; 0x40
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a61      	ldr	r2, [pc, #388]	; (8002318 <HAL_SPI_MspInit+0x1a4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d130      	bne.n	80021f8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002196:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 800219c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021c6:	23e0      	movs	r3, #224	; 0xe0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d6:	2305      	movs	r3, #5
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021de:	4619      	mov	r1, r3
 80021e0:	484f      	ldr	r0, [pc, #316]	; (8002320 <HAL_SPI_MspInit+0x1ac>)
 80021e2:	f000 fedd 	bl	8002fa0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2023      	movs	r0, #35	; 0x23
 80021ec:	f000 fe0f 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021f0:	2023      	movs	r0, #35	; 0x23
 80021f2:	f000 fe28 	bl	8002e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80021f6:	e08a      	b.n	800230e <HAL_SPI_MspInit+0x19a>
  else if(spiHandle->Instance==SPI4)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a49      	ldr	r2, [pc, #292]	; (8002324 <HAL_SPI_MspInit+0x1b0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d128      	bne.n	8002254 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002208:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002232:	2374      	movs	r3, #116	; 0x74
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002242:	2305      	movs	r3, #5
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	4619      	mov	r1, r3
 800224c:	4836      	ldr	r0, [pc, #216]	; (8002328 <HAL_SPI_MspInit+0x1b4>)
 800224e:	f000 fea7 	bl	8002fa0 <HAL_GPIO_Init>
}
 8002252:	e05c      	b.n	800230e <HAL_SPI_MspInit+0x19a>
  else if(spiHandle->Instance==SPI5)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_SPI_MspInit+0x1b8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d129      	bne.n	80022b2 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800228e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022a0:	2305      	movs	r3, #5
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	4821      	ldr	r0, [pc, #132]	; (8002330 <HAL_SPI_MspInit+0x1bc>)
 80022ac:	f000 fe78 	bl	8002fa0 <HAL_GPIO_Init>
}
 80022b0:	e02d      	b.n	800230e <HAL_SPI_MspInit+0x19a>
  else if(spiHandle->Instance==SPI6)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_SPI_MspInit+0x1c0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d128      	bne.n	800230e <HAL_SPI_MspInit+0x19a>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80022c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c6:	6453      	str	r3, [r2, #68]	; 0x44
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80022da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022de:	6313      	str	r3, [r2, #48]	; 0x30
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_SPI_MspInit+0x1a8>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80022ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80022fe:	2305      	movs	r3, #5
 8002300:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002306:	4619      	mov	r1, r3
 8002308:	480b      	ldr	r0, [pc, #44]	; (8002338 <HAL_SPI_MspInit+0x1c4>)
 800230a:	f000 fe49 	bl	8002fa0 <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3740      	adds	r7, #64	; 0x40
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40013000 	.word	0x40013000
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000
 8002324:	40013400 	.word	0x40013400
 8002328:	40021000 	.word	0x40021000
 800232c:	40015000 	.word	0x40015000
 8002330:	40021400 	.word	0x40021400
 8002334:	40015400 	.word	0x40015400
 8002338:	40021800 	.word	0x40021800

0800233c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_MspInit+0x44>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_MspInit+0x44>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_MspInit+0x44>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_MspInit+0x44>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_MspInit+0x44>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_MspInit+0x44>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <NMI_Handler+0x4>

0800238a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <HardFault_Handler+0x4>

08002390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <MemManage_Handler+0x4>

08002396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <BusFault_Handler+0x4>

0800239c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <UsageFault_Handler+0x4>

080023a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d0:	f000 fbfe 	bl	8002bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <SPI1_IRQHandler+0x10>)
 80023de:	f002 febb 	bl	8005158 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000450 	.word	0x20000450

080023ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_DIO0_Pin);
 80023f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023f4:	f000 ff9a 	bl	800332c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PW1_DIO1_Pin);
 80023f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023fc:	f000 ff96 	bl	800332c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PW1_DIO0_Pin);
 8002400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002404:	f000 ff92 	bl	800332c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <UART5_IRQHandler+0x10>)
 8002412:	f003 fa65 	bl	80058e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200005e4 	.word	0x200005e4

08002420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_kill>:

int _kill(int pid, int sig)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800243a:	f004 fc17 	bl	8006c6c <__errno>
 800243e:	4603      	mov	r3, r0
 8002440:	2216      	movs	r2, #22
 8002442:	601a      	str	r2, [r3, #0]
  return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_exit>:

void _exit (int status)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ffe7 	bl	8002430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002462:	e7fe      	b.n	8002462 <_exit+0x12>

08002464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e00a      	b.n	800248c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002476:	f3af 8000 	nop.w
 800247a:	4601      	mov	r1, r0
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	60ba      	str	r2, [r7, #8]
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbf0      	blt.n	8002476 <_read+0x12>
  }

  return len;
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e009      	b.n	80024c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	60ba      	str	r2, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf1      	blt.n	80024b0 <_write+0x12>
  }
  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_close>:

int _close(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_isatty>:

int _isatty(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f004 fb7c 	bl	8006c6c <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20050000 	.word	0x20050000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	200005e0 	.word	0x200005e0
 80025a8:	200008a0 	.word	0x200008a0

080025ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <MX_UART5_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_UART5_Init+0x58>)
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <MX_UART5_Init+0x5c>)
 80025d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <MX_UART5_Init+0x58>)
 80025dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_UART5_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_UART5_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_UART5_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_UART5_Init+0x58>)
 80025f6:	220c      	movs	r2, #12
 80025f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <MX_UART5_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_UART5_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <MX_UART5_Init+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_UART5_Init+0x58>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_UART5_Init+0x58>)
 8002614:	f003 f8d2 	bl	80057bc <HAL_UART_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800261e:	f7ff fcad 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200005e4 	.word	0x200005e4
 800262c:	40005000 	.word	0x40005000

08002630 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_UART7_Init+0x58>)
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <MX_UART7_Init+0x5c>)
 8002638:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_UART7_Init+0x58>)
 800263c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002640:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_UART7_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_UART7_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_UART7_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_UART7_Init+0x58>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_UART7_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_UART7_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_UART7_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_UART7_Init+0x58>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_UART7_Init+0x58>)
 8002674:	f003 f8a2 	bl	80057bc <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800267e:	f7ff fc7d 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000066c 	.word	0x2000066c
 800268c:	40007800 	.word	0x40007800

08002690 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <MX_USART1_UART_Init+0x5c>)
 8002698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 800269c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026c0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <MX_USART1_UART_Init+0x58>)
 80026d6:	f003 f871 	bl	80057bc <HAL_UART_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80026e0:	f7ff fc4c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200006f4 	.word	0x200006f4
 80026ec:	40011000 	.word	0x40011000

080026f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <MX_USART3_UART_Init+0x58>)
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <MX_USART3_UART_Init+0x5c>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <MX_USART3_UART_Init+0x58>)
 80026fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_USART3_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_USART3_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_USART3_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_USART3_UART_Init+0x58>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_USART3_UART_Init+0x58>)
 800271c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002720:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_USART3_UART_Init+0x58>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <MX_USART3_UART_Init+0x58>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_USART3_UART_Init+0x58>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <MX_USART3_UART_Init+0x58>)
 8002736:	f003 f841 	bl	80057bc <HAL_UART_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8002740:	f7ff fc1c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000077c 	.word	0x2000077c
 800274c:	40004800 	.word	0x40004800

08002750 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <MX_USART6_UART_Init+0x5c>)
 8002758:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_USART6_UART_Init+0x58>)
 8002794:	f003 f812 	bl	80057bc <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800279e:	f7ff fbed 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000804 	.word	0x20000804
 80027ac:	40011400 	.word	0x40011400

080027b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0b4      	sub	sp, #208	; 0xd0
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027cc:	2284      	movs	r2, #132	; 0x84
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 fa75 	bl	8006cc0 <memset>
  if(uartHandle->Instance==UART5)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a9a      	ldr	r2, [pc, #616]	; (8002a44 <HAL_UART_MspInit+0x294>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d167      	bne.n	80028b0 <HAL_UART_MspInit+0x100>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80027e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 fb65 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80027fc:	f7ff fbbe 	bl	8001f7c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002800:	4b91      	ldr	r3, [pc, #580]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a90      	ldr	r2, [pc, #576]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b8e      	ldr	r3, [pc, #568]	; (8002a48 <HAL_UART_MspInit+0x298>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002818:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <HAL_UART_MspInit+0x298>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a8a      	ldr	r2, [pc, #552]	; (8002a48 <HAL_UART_MspInit+0x298>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6313      	str	r3, [r2, #48]	; 0x30
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002830:	4b85      	ldr	r3, [pc, #532]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4a84      	ldr	r2, [pc, #528]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	6313      	str	r3, [r2, #48]	; 0x30
 800283c:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_UART_MspInit+0x298>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002862:	2308      	movs	r3, #8
 8002864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002868:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800286c:	4619      	mov	r1, r3
 800286e:	4877      	ldr	r0, [pc, #476]	; (8002a4c <HAL_UART_MspInit+0x29c>)
 8002870:	f000 fb96 	bl	8002fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002874:	2304      	movs	r3, #4
 8002876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800288c:	2308      	movs	r3, #8
 800288e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002892:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002896:	4619      	mov	r1, r3
 8002898:	486d      	ldr	r0, [pc, #436]	; (8002a50 <HAL_UART_MspInit+0x2a0>)
 800289a:	f000 fb81 	bl	8002fa0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	2035      	movs	r0, #53	; 0x35
 80028a4:	f000 fab3 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80028a8:	2035      	movs	r0, #53	; 0x35
 80028aa:	f000 facc 	bl	8002e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80028ae:	e11f      	b.n	8002af0 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==UART7)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d13e      	bne.n	8002938 <HAL_UART_MspInit+0x188>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80028ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 faf8 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80028d6:	f7ff fb51 	bl	8001f7c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a5a      	ldr	r2, [pc, #360]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80028e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028f2:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800290a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800290e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002924:	2308      	movs	r3, #8
 8002926:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800292e:	4619      	mov	r1, r3
 8002930:	4849      	ldr	r0, [pc, #292]	; (8002a58 <HAL_UART_MspInit+0x2a8>)
 8002932:	f000 fb35 	bl	8002fa0 <HAL_GPIO_Init>
}
 8002936:	e0db      	b.n	8002af0 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_UART_MspInit+0x2ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d13c      	bne.n	80029bc <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002942:	2340      	movs	r3, #64	; 0x40
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002946:	2300      	movs	r3, #0
 8002948:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fab6 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 800295a:	f7ff fb0f 	bl	8001f7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a39      	ldr	r2, [pc, #228]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_UART_MspInit+0x298>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <HAL_UART_MspInit+0x298>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800298e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029a8:	2307      	movs	r3, #7
 80029aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029b2:	4619      	mov	r1, r3
 80029b4:	482a      	ldr	r0, [pc, #168]	; (8002a60 <HAL_UART_MspInit+0x2b0>)
 80029b6:	f000 faf3 	bl	8002fa0 <HAL_GPIO_Init>
}
 80029ba:	e099      	b.n	8002af0 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART3)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d152      	bne.n	8002a6c <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fa72 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_UART_MspInit+0x236>
      Error_Handler();
 80029e2:	f7ff facb 	bl	8001f7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_UART_MspInit+0x298>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_UART_MspInit+0x298>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002a16:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8002a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a30:	2307      	movs	r3, #7
 8002a32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480a      	ldr	r0, [pc, #40]	; (8002a68 <HAL_UART_MspInit+0x2b8>)
 8002a3e:	f000 faaf 	bl	8002fa0 <HAL_GPIO_Init>
}
 8002a42:	e055      	b.n	8002af0 <HAL_UART_MspInit+0x340>
 8002a44:	40005000 	.word	0x40005000
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40007800 	.word	0x40007800
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004800 	.word	0x40004800
 8002a68:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_UART_MspInit+0x348>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d13c      	bne.n	8002af0 <HAL_UART_MspInit+0x340>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fa1a 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 8002a92:	f7ff fa73 	bl	8001f7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_UART_MspInit+0x34c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_UART_MspInit+0x34c>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_UART_MspInit+0x34c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_UART_MspInit+0x34c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_UART_MspInit+0x34c>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_UART_MspInit+0x34c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ac6:	23c0      	movs	r3, #192	; 0xc0
 8002ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_UART_MspInit+0x350>)
 8002aec:	f000 fa58 	bl	8002fa0 <HAL_GPIO_Init>
}
 8002af0:	bf00      	nop
 8002af2:	37d0      	adds	r7, #208	; 0xd0
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40011400 	.word	0x40011400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020800 	.word	0x40020800

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b0a:	490e      	ldr	r1, [pc, #56]	; (8002b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b20:	4c0b      	ldr	r4, [pc, #44]	; (8002b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b2e:	f7ff fd3d 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f004 f8a1 	bl	8006c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7ff f8a3 	bl	8001c80 <main>
  bx  lr    
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b48:	0800c3dc 	.word	0x0800c3dc
  ldr r2, =_sbss
 8002b4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b50:	200008a0 	.word	0x200008a0

08002b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC_IRQHandler>

08002b56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	f000 f94c 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b60:	200f      	movs	r0, #15
 8002b62:	f000 f805 	bl	8002b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b66:	f7ff fbe9 	bl	800233c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x54>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_InitTick+0x58>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f967 	bl	8002e62 <HAL_SYSTICK_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00e      	b.n	8002bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d80a      	bhi.n	8002bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f000 f92f 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <HAL_InitTick+0x5c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x20>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_IncTick+0x24>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_IncTick+0x24>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000008 	.word	0x20000008
 8002bf4:	2000088c 	.word	0x2000088c

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	2000088c 	.word	0x2000088c

08002c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff ffee 	bl	8002bf8 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d005      	beq.n	8002c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_Delay+0x44>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c36:	bf00      	nop
 8002c38:	f7ff ffde 	bl	8002bf8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d8f7      	bhi.n	8002c38 <HAL_Delay+0x28>
  {
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000008 	.word	0x20000008

08002c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <__NVIC_SetPriorityGrouping+0x40>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x40>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00
 8002c9c:	05fa0000 	.word	0x05fa0000

08002ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	; (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff29 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff3e 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff31 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff feb6 	bl	8002bf8 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d008      	beq.n	8002eac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e052      	b.n	8002f52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0216 	bic.w	r2, r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <HAL_DMA_Abort+0x62>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0208 	bic.w	r2, r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efc:	e013      	b.n	8002f26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efe:	f7ff fe7b 	bl	8002bf8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d90c      	bls.n	8002f26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e015      	b.n	8002f52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e4      	bne.n	8002efe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	223f      	movs	r2, #63	; 0x3f
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d004      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e00c      	b.n	8002f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e175      	b.n	80032ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8164 	bne.w	80032a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_GPIO_Init+0x56>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d130      	bne.n	8003058 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80be 	beq.w	80032a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_GPIO_Init+0x324>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <HAL_GPIO_Init+0x324>)
 8003130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <HAL_GPIO_Init+0x324>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003142:	4a61      	ldr	r2, [pc, #388]	; (80032c8 <HAL_GPIO_Init+0x328>)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a58      	ldr	r2, [pc, #352]	; (80032cc <HAL_GPIO_Init+0x32c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d037      	beq.n	80031de <HAL_GPIO_Init+0x23e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_GPIO_Init+0x330>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d031      	beq.n	80031da <HAL_GPIO_Init+0x23a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a56      	ldr	r2, [pc, #344]	; (80032d4 <HAL_GPIO_Init+0x334>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02b      	beq.n	80031d6 <HAL_GPIO_Init+0x236>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a55      	ldr	r2, [pc, #340]	; (80032d8 <HAL_GPIO_Init+0x338>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d025      	beq.n	80031d2 <HAL_GPIO_Init+0x232>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a54      	ldr	r2, [pc, #336]	; (80032dc <HAL_GPIO_Init+0x33c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01f      	beq.n	80031ce <HAL_GPIO_Init+0x22e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a53      	ldr	r2, [pc, #332]	; (80032e0 <HAL_GPIO_Init+0x340>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0x22a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_GPIO_Init+0x344>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x226>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_GPIO_Init+0x348>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x222>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a50      	ldr	r2, [pc, #320]	; (80032ec <HAL_GPIO_Init+0x34c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x21e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4f      	ldr	r2, [pc, #316]	; (80032f0 <HAL_GPIO_Init+0x350>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x21a>
 80031b6:	2309      	movs	r3, #9
 80031b8:	e012      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031ba:	230a      	movs	r3, #10
 80031bc:	e010      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031be:	2308      	movs	r3, #8
 80031c0:	e00e      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031c2:	2307      	movs	r3, #7
 80031c4:	e00c      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031c6:	2306      	movs	r3, #6
 80031c8:	e00a      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031ca:	2305      	movs	r3, #5
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x240>
 80031de:	2300      	movs	r3, #0
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031f0:	4935      	ldr	r1, [pc, #212]	; (80032c8 <HAL_GPIO_Init+0x328>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_GPIO_Init+0x354>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003222:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <HAL_GPIO_Init+0x354>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <HAL_GPIO_Init+0x354>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800324c:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <HAL_GPIO_Init+0x354>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003252:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_GPIO_Init+0x354>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003276:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_GPIO_Init+0x354>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_GPIO_Init+0x354>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_GPIO_Init+0x354>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	f67f ae86 	bls.w	8002fc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40021400 	.word	0x40021400
 80032e4:	40021800 	.word	0x40021800
 80032e8:	40021c00 	.word	0x40021c00
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40022400 	.word	0x40022400
 80032f4:	40013c00 	.word	0x40013c00

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fc7a 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe fba6 	bl	8001ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e006      	b.n	80033e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d104      	bne.n	80033f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_I2C_Init+0x11c>)
 8003402:	430b      	orrs	r3, r1
 8003404:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003414:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	02008000 	.word	0x02008000

0800347c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	d138      	bne.n	8003504 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800349c:	2302      	movs	r3, #2
 800349e:	e032      	b.n	8003506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b20      	cmp	r3, #32
 8003526:	d139      	bne.n	800359c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003532:	2302      	movs	r3, #2
 8003534:	e033      	b.n	800359e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2224      	movs	r2, #36	; 0x24
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003564:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e291      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8087 	beq.w	80036de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d0:	4b96      	ldr	r3, [pc, #600]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d00c      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035dc:	4b93      	ldr	r3, [pc, #588]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d112      	bne.n	800360e <HAL_RCC_OscConfig+0x62>
 80035e8:	4b90      	ldr	r3, [pc, #576]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d10b      	bne.n	800360e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f6:	4b8d      	ldr	r3, [pc, #564]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d06c      	beq.n	80036dc <HAL_RCC_OscConfig+0x130>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d168      	bne.n	80036dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e26b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x7a>
 8003618:	4b84      	ldr	r3, [pc, #528]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a83      	ldr	r2, [pc, #524]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800361e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	e02e      	b.n	8003684 <HAL_RCC_OscConfig+0xd8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x9c>
 800362e:	4b7f      	ldr	r3, [pc, #508]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7e      	ldr	r2, [pc, #504]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b7c      	ldr	r3, [pc, #496]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7b      	ldr	r2, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e01d      	b.n	8003684 <HAL_RCC_OscConfig+0xd8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0xc0>
 8003652:	4b76      	ldr	r3, [pc, #472]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a75      	ldr	r2, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a72      	ldr	r2, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0xd8>
 800366c:	4b6f      	ldr	r3, [pc, #444]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6e      	ldr	r2, [pc, #440]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b6c      	ldr	r3, [pc, #432]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6b      	ldr	r2, [pc, #428]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7ff fab4 	bl	8002bf8 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7ff fab0 	bl	8002bf8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e21f      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b61      	ldr	r3, [pc, #388]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0xe8>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7ff faa0 	bl	8002bf8 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7ff fa9c 	bl	8002bf8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e20b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	4b57      	ldr	r3, [pc, #348]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x110>
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d069      	beq.n	80037be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ea:	4b50      	ldr	r3, [pc, #320]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f6:	4b4d      	ldr	r3, [pc, #308]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d11c      	bne.n	800373c <HAL_RCC_OscConfig+0x190>
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x17a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1df      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	493d      	ldr	r1, [pc, #244]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e040      	b.n	80037be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a38      	ldr	r2, [pc, #224]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7ff fa52 	bl	8002bf8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7ff fa4e 	bl	8002bf8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1bd      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4929      	ldr	r1, [pc, #164]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
 800378a:	e018      	b.n	80037be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a26      	ldr	r2, [pc, #152]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7ff fa2e 	bl	8002bf8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a0:	f7ff fa2a 	bl	8002bf8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e199      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d038      	beq.n	800383c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d019      	beq.n	8003806 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	4a15      	ldr	r2, [pc, #84]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7ff fa0b 	bl	8002bf8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e6:	f7ff fa07 	bl	8002bf8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e176      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_RCC_OscConfig+0x280>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x23a>
 8003804:	e01a      	b.n	800383c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCC_OscConfig+0x280>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <HAL_RCC_OscConfig+0x280>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7ff f9f1 	bl	8002bf8 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381a:	f7ff f9ed 	bl	8002bf8 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d903      	bls.n	8003830 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e15c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
 800382c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	4b91      	ldr	r3, [pc, #580]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ee      	bne.n	800381a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a4 	beq.w	8003992 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384a:	4b8b      	ldr	r3, [pc, #556]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a87      	ldr	r2, [pc, #540]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b85      	ldr	r3, [pc, #532]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003872:	4b82      	ldr	r3, [pc, #520]	; (8003a7c <HAL_RCC_OscConfig+0x4d0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x4d0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7e      	ldr	r2, [pc, #504]	; (8003a7c <HAL_RCC_OscConfig+0x4d0>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7ff f9b5 	bl	8002bf8 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7ff f9b1 	bl	8002bf8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b64      	cmp	r3, #100	; 0x64
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e120      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <HAL_RCC_OscConfig+0x4d0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x31a>
 80038b8:	4b6f      	ldr	r3, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a6e      	ldr	r2, [pc, #440]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	e02d      	b.n	8003922 <HAL_RCC_OscConfig+0x376>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x33c>
 80038ce:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a69      	ldr	r2, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a66      	ldr	r2, [pc, #408]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	e01c      	b.n	8003922 <HAL_RCC_OscConfig+0x376>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_OscConfig+0x35e>
 80038f0:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a60      	ldr	r2, [pc, #384]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	4b5e      	ldr	r3, [pc, #376]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a5d      	ldr	r2, [pc, #372]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	e00b      	b.n	8003922 <HAL_RCC_OscConfig+0x376>
 800390a:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a5a      	ldr	r2, [pc, #360]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	4b58      	ldr	r3, [pc, #352]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a57      	ldr	r2, [pc, #348]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d015      	beq.n	8003956 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7ff f965 	bl	8002bf8 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7ff f961 	bl	8002bf8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0ce      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ee      	beq.n	8003932 <HAL_RCC_OscConfig+0x386>
 8003954:	e014      	b.n	8003980 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7ff f94f 	bl	8002bf8 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7ff f94b 	bl	8002bf8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0b8      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ee      	bne.n	800395e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4b3c      	ldr	r3, [pc, #240]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a3b      	ldr	r2, [pc, #236]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80a4 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d06b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d149      	bne.n	8003a44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7ff f91c 	bl	8002bf8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7ff f918 	bl	8002bf8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e087      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	4313      	orrs	r3, r2
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7ff f8ec 	bl	8002bf8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7ff f8e8 	bl	8002bf8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e057      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x478>
 8003a42:	e04f      	b.n	8003ae4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7ff f8d2 	bl	8002bf8 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7ff f8ce 	bl	8002bf8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e03d      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4ac>
 8003a76:	e035      	b.n	8003ae4 <HAL_RCC_OscConfig+0x538>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x544>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d028      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d121      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d11a      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ab6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0d0      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 020f 	bic.w	r2, r3, #15
 8003b22:	4965      	ldr	r1, [pc, #404]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	494d      	ldr	r1, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d040      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e073      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e06b      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4936      	ldr	r1, [pc, #216]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7ff f806 	bl	8002bf8 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7ff f802 	bl	8002bf8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e053      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d210      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 020f 	bic.w	r2, r3, #15
 8003c2e:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4916      	ldr	r1, [pc, #88]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490e      	ldr	r1, [pc, #56]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c86:	f000 f821 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003c98:	5ccb      	ldrb	r3, [r1, r3]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe ff62 	bl	8002b70 <HAL_InitTick>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023c00 	.word	0x40023c00
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	0800bef8 	.word	0x0800bef8
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd0:	b090      	sub	sp, #64	; 0x40
 8003cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd8:	2300      	movs	r3, #0
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	2300      	movs	r3, #0
 8003cde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d00d      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x40>
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	f200 80a1 	bhi.w	8003e38 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x34>
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cfe:	e09b      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b53      	ldr	r3, [pc, #332]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d04:	e09b      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d06:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d0a:	e098      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d028      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	2200      	movs	r2, #0
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d34:	2100      	movs	r1, #0
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d38:	fb03 f201 	mul.w	r2, r3, r1
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	4a43      	ldr	r2, [pc, #268]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d46:	fba0 1202 	umull	r1, r2, r0, r2
 8003d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d52:	4413      	add	r3, r2
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	2200      	movs	r2, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	61fa      	str	r2, [r7, #28]
 8003d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d66:	f7fc ffaf 	bl	8000cc8 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d72:	e053      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d74:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	617a      	str	r2, [r7, #20]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d86:	f04f 0b00 	mov.w	fp, #0
 8003d8a:	4652      	mov	r2, sl
 8003d8c:	465b      	mov	r3, fp
 8003d8e:	f04f 0000 	mov.w	r0, #0
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	0159      	lsls	r1, r3, #5
 8003d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d9c:	0150      	lsls	r0, r2, #5
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	ebb2 080a 	subs.w	r8, r2, sl
 8003da6:	eb63 090b 	sbc.w	r9, r3, fp
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003db6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dbe:	ebb2 0408 	subs.w	r4, r2, r8
 8003dc2:	eb63 0509 	sbc.w	r5, r3, r9
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	00eb      	lsls	r3, r5, #3
 8003dd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd4:	00e2      	lsls	r2, r4, #3
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	461d      	mov	r5, r3
 8003dda:	eb14 030a 	adds.w	r3, r4, sl
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	eb45 030b 	adc.w	r3, r5, fp
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df2:	4629      	mov	r1, r5
 8003df4:	028b      	lsls	r3, r1, #10
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	028a      	lsls	r2, r1, #10
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e06:	2200      	movs	r2, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	60fa      	str	r2, [r7, #12]
 8003e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e10:	f7fc ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	3301      	adds	r3, #1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e36:	e002      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3740      	adds	r7, #64	; 0x40
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	017d7840 	.word	0x017d7840

08003e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e74:	f7ff fff0 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	0800bf08 	.word	0x0800bf08

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	f7ff ffdc 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0b5b      	lsrs	r3, r3, #13
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800bf08 	.word	0x0800bf08

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ee8:	4b69      	ldr	r3, [pc, #420]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a68      	ldr	r2, [pc, #416]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ef2:	6093      	str	r3, [r2, #8]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	4964      	ldr	r1, [pc, #400]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	4959      	ldr	r1, [pc, #356]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f56:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	494a      	ldr	r1, [pc, #296]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f74:	d101      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 808b 	beq.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	4a39      	ldr	r2, [pc, #228]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb0:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a34      	ldr	r2, [pc, #208]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc8:	f7fe fe16 	bl	8002bf8 <HAL_GetTick>
 8003fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd0:	f7fe fe12 	bl	8002bf8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e357      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d035      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800402e:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004034:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d114      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe fdda 	bl	8002bf8 <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe fdd6 	bl	8002bf8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e319      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ee      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004076:	d111      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004086:	400b      	ands	r3, r1
 8004088:	4901      	ldr	r1, [pc, #4]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
 800408e:	e00b      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000
 8004098:	0ffffcff 	.word	0x0ffffcff
 800409c:	4baa      	ldr	r3, [pc, #680]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4aa9      	ldr	r2, [pc, #676]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040a6:	6093      	str	r3, [r2, #8]
 80040a8:	4ba7      	ldr	r3, [pc, #668]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	49a4      	ldr	r1, [pc, #656]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c6:	4ba0      	ldr	r3, [pc, #640]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040cc:	4a9e      	ldr	r2, [pc, #632]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040d6:	4b9c      	ldr	r3, [pc, #624]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	4999      	ldr	r1, [pc, #612]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f4:	4b94      	ldr	r3, [pc, #592]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004102:	4991      	ldr	r1, [pc, #580]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004116:	4b8c      	ldr	r3, [pc, #560]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004124:	4988      	ldr	r1, [pc, #544]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004138:	4b83      	ldr	r3, [pc, #524]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004146:	4980      	ldr	r1, [pc, #512]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800415a:	4b7b      	ldr	r3, [pc, #492]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4977      	ldr	r1, [pc, #476]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800417c:	4b72      	ldr	r3, [pc, #456]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	496f      	ldr	r1, [pc, #444]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800419e:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f023 020c 	bic.w	r2, r3, #12
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ac:	4966      	ldr	r1, [pc, #408]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c0:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	495e      	ldr	r1, [pc, #376]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041e2:	4b59      	ldr	r3, [pc, #356]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f0:	4955      	ldr	r1, [pc, #340]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004204:	4b50      	ldr	r3, [pc, #320]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	494d      	ldr	r1, [pc, #308]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004226:	4b48      	ldr	r3, [pc, #288]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	4944      	ldr	r1, [pc, #272]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004248:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004256:	493c      	ldr	r1, [pc, #240]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	4933      	ldr	r1, [pc, #204]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800428c:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429a:	492b      	ldr	r1, [pc, #172]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042bc:	4922      	ldr	r1, [pc, #136]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	4912      	ldr	r1, [pc, #72]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004320:	4909      	ldr	r1, [pc, #36]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d006      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80d9 	beq.w	80044ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a01      	ldr	r2, [pc, #4]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004348:	40023800 	.word	0x40023800
 800434c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434e:	f7fe fc53 	bl	8002bf8 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004356:	f7fe fc4f 	bl	8002bf8 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b64      	cmp	r3, #100	; 0x64
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e194      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004368:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d021      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11d      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004388:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004396:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439c:	0e1b      	lsrs	r3, r3, #24
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	019a      	lsls	r2, r3, #6
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	071b      	lsls	r3, r3, #28
 80043bc:	4957      	ldr	r1, [pc, #348]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02e      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ee:	d129      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	0f1b      	lsrs	r3, r3, #28
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	019a      	lsls	r2, r3, #6
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	493d      	ldr	r1, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004432:	f023 021f 	bic.w	r2, r3, #31
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	3b01      	subs	r3, #1
 800443c:	4937      	ldr	r1, [pc, #220]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004450:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004456:	0e1b      	lsrs	r3, r3, #24
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	0f1b      	lsrs	r3, r3, #28
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	019a      	lsls	r2, r3, #6
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	431a      	orrs	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	071b      	lsls	r3, r3, #28
 8004484:	4925      	ldr	r1, [pc, #148]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	019a      	lsls	r2, r3, #6
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	071b      	lsls	r3, r3, #28
 80044b4:	4919      	ldr	r1, [pc, #100]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fe fb96 	bl	8002bf8 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d0:	f7fe fb92 	bl	8002bf8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0d7      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f040 80cd 	bne.w	8004690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004502:	f7fe fb79 	bl	8002bf8 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004508:	e00a      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800450a:	f7fe fb75 	bl	8002bf8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d903      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0ba      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800451c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004520:	4b5e      	ldr	r3, [pc, #376]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452c:	d0ed      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02e      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d12a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004556:	4b51      	ldr	r3, [pc, #324]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004564:	4b4d      	ldr	r3, [pc, #308]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	4944      	ldr	r1, [pc, #272]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004592:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	493d      	ldr	r1, [pc, #244]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d022      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c0:	d11d      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	019a      	lsls	r2, r3, #6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	071b      	lsls	r3, r3, #28
 80045f6:	4929      	ldr	r1, [pc, #164]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d028      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	0e1b      	lsrs	r3, r3, #24
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	4917      	ldr	r1, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4911      	ldr	r1, [pc, #68]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0e      	ldr	r2, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fe fac6 	bl	8002bf8 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004670:	f7fe fac2 	bl	8002bf8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e007      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800468a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468e:	d1ef      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800

080046a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e09d      	b.n	80047ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c2:	d009      	beq.n	80046d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
 80046ca:	e005      	b.n	80046d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd fd3e 	bl	8002174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004718:	d902      	bls.n	8004720 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e002      	b.n	8004726 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004724:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800472e:	d007      	beq.n	8004740 <HAL_SPI_Init+0xa0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004738:	d002      	beq.n	8004740 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	ea42 0103 	orr.w	r1, r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	f003 0204 	and.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b088      	sub	sp, #32
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_SPI_Transmit+0x22>
 8004814:	2302      	movs	r3, #2
 8004816:	e158      	b.n	8004aca <HAL_SPI_Transmit+0x2d4>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004820:	f7fe f9ea 	bl	8002bf8 <HAL_GetTick>
 8004824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d002      	beq.n	800483c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004836:	2302      	movs	r3, #2
 8004838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800483a:	e13d      	b.n	8004ab8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Transmit+0x52>
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800484c:	e134      	b.n	8004ab8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2203      	movs	r2, #3
 8004852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	88fa      	ldrh	r2, [r7, #6]
 8004866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004898:	d10f      	bne.n	80048ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d007      	beq.n	80048d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e0:	d94b      	bls.n	800497a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Transmit+0xfa>
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d13e      	bne.n	800496e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004914:	e02b      	b.n	800496e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d112      	bne.n	800494a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004948:	e011      	b.n	800496e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494a:	f7fe f955 	bl	8002bf8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d803      	bhi.n	8004962 <HAL_SPI_Transmit+0x16c>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d102      	bne.n	8004968 <HAL_SPI_Transmit+0x172>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800496c:	e0a4      	b.n	8004ab8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ce      	bne.n	8004916 <HAL_SPI_Transmit+0x120>
 8004978:	e07c      	b.n	8004a74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_SPI_Transmit+0x192>
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d170      	bne.n	8004a6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	d912      	bls.n	80049b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	881a      	ldrh	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	1c9a      	adds	r2, r3, #2
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b02      	subs	r3, #2
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b6:	e058      	b.n	8004a6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049de:	e044      	b.n	8004a6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d12b      	bne.n	8004a46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d912      	bls.n	8004a1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b02      	subs	r3, #2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a1c:	e025      	b.n	8004a6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a44:	e011      	b.n	8004a6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a46:	f7fe f8d7 	bl	8002bf8 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d803      	bhi.n	8004a5e <HAL_SPI_Transmit+0x268>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d102      	bne.n	8004a64 <HAL_SPI_Transmit+0x26e>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a68:	e026      	b.n	8004ab8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1b5      	bne.n	80049e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fe35 	bl	80056e8 <SPI_EndRxTxTransaction>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e000      	b.n	8004ab8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ab6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b088      	sub	sp, #32
 8004ad6:	af02      	add	r7, sp, #8
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aee:	d112      	bne.n	8004b16 <HAL_SPI_Receive+0x44>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10e      	bne.n	8004b16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2204      	movs	r2, #4
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f910 	bl	8004d32 <HAL_SPI_TransmitReceive>
 8004b12:	4603      	mov	r3, r0
 8004b14:	e109      	b.n	8004d2a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_SPI_Receive+0x52>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e102      	b.n	8004d2a <HAL_SPI_Receive+0x258>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b2c:	f7fe f864 	bl	8002bf8 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b42:	e0e9      	b.n	8004d18 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Receive+0x7e>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b54:	e0e0      	b.n	8004d18 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba0:	d908      	bls.n	8004bb4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	e007      	b.n	8004bc4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bcc:	d10f      	bne.n	8004bee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d007      	beq.n	8004c0c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c14:	d867      	bhi.n	8004ce6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c16:	e030      	b.n	8004c7a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d117      	bne.n	8004c56 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f103 020c 	add.w	r2, r3, #12
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c54:	e011      	b.n	8004c7a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c56:	f7fd ffcf 	bl	8002bf8 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d803      	bhi.n	8004c6e <HAL_SPI_Receive+0x19c>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d102      	bne.n	8004c74 <HAL_SPI_Receive+0x1a2>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c78:	e04e      	b.n	8004d18 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1c8      	bne.n	8004c18 <HAL_SPI_Receive+0x146>
 8004c86:	e034      	b.n	8004cf2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d115      	bne.n	8004cc2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	b292      	uxth	r2, r2
 8004ca2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	1c9a      	adds	r2, r3, #2
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cc0:	e011      	b.n	8004ce6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc2:	f7fd ff99 	bl	8002bf8 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d803      	bhi.n	8004cda <HAL_SPI_Receive+0x208>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d102      	bne.n	8004ce0 <HAL_SPI_Receive+0x20e>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ce4:	e018      	b.n	8004d18 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ca      	bne.n	8004c88 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fc7a 	bl	80055f0 <SPI_EndRxTransaction>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75fb      	strb	r3, [r7, #23]
 8004d14:	e000      	b.n	8004d18 <HAL_SPI_Receive+0x246>
  }

error :
 8004d16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b08a      	sub	sp, #40	; 0x28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d40:	2301      	movs	r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_SPI_TransmitReceive+0x26>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e1fb      	b.n	8005150 <HAL_SPI_TransmitReceive+0x41e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d60:	f7fd ff4a 	bl	8002bf8 <HAL_GetTick>
 8004d64:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d6c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d78:	887b      	ldrh	r3, [r7, #2]
 8004d7a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d7c:	7efb      	ldrb	r3, [r7, #27]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d00e      	beq.n	8004da0 <HAL_SPI_TransmitReceive+0x6e>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d88:	d106      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x66>
 8004d92:	7efb      	ldrb	r3, [r7, #27]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d003      	beq.n	8004da0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d9e:	e1cd      	b.n	800513c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x80>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x80>
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004db8:	e1c0      	b.n	800513c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d003      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2205      	movs	r2, #5
 8004dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	887a      	ldrh	r2, [r7, #2]
 8004dde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	887a      	ldrh	r2, [r7, #2]
 8004dfa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e10:	d802      	bhi.n	8004e18 <HAL_SPI_TransmitReceive+0xe6>
 8004e12:	8a3b      	ldrh	r3, [r7, #16]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d908      	bls.n	8004e2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	e007      	b.n	8004e3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d007      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e60:	d97c      	bls.n	8004f5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x13e>
 8004e6a:	8a7b      	ldrh	r3, [r7, #18]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d169      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	881a      	ldrh	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e94:	e056      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d11b      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x1aa>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d016      	beq.n	8004edc <HAL_SPI_TransmitReceive+0x1aa>
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d113      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d11c      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x1f2>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d016      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	b292      	uxth	r2, r2
 8004f02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f20:	2301      	movs	r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f24:	f7fd fe68 	bl	8002bf8 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d807      	bhi.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d003      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f42:	e0fb      	b.n	800513c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1a3      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x164>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d19d      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x164>
 8004f5a:	e0df      	b.n	800511c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x23a>
 8004f64:	8a7b      	ldrh	r3, [r7, #18]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	f040 80cb 	bne.w	8005102 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d912      	bls.n	8004f9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b02      	subs	r3, #2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f9a:	e0b2      	b.n	8005102 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	7812      	ldrb	r2, [r2, #0]
 8004fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc2:	e09e      	b.n	8005102 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d134      	bne.n	800503c <HAL_SPI_TransmitReceive+0x30a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02f      	beq.n	800503c <HAL_SPI_TransmitReceive+0x30a>
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d12c      	bne.n	800503c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d912      	bls.n	8005012 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	1c9a      	adds	r2, r3, #2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b02      	subs	r3, #2
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005010:	e012      	b.n	8005038 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d148      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x3aa>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d042      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d923      	bls.n	80050aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	b292      	uxth	r2, r2
 800506e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b02      	subs	r3, #2
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d81f      	bhi.n	80050d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	e016      	b.n	80050d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f103 020c 	add.w	r2, r3, #12
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d8:	2301      	movs	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050dc:	f7fd fd8c 	bl	8002bf8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d803      	bhi.n	80050f4 <HAL_SPI_TransmitReceive+0x3c2>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d102      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x3c8>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005100:	e01c      	b.n	800513c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	f47f af5b 	bne.w	8004fc4 <HAL_SPI_TransmitReceive+0x292>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f47f af54 	bne.w	8004fc4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fae1 	bl	80056e8 <SPI_EndRxTxTransaction>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
 8005138:	e000      	b.n	800513c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800513a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800514c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005150:	4618      	mov	r0, r3
 8005152:	3728      	adds	r7, #40	; 0x28
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10f      	bne.n	800519c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	099b      	lsrs	r3, r3, #6
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
    return;
 800519a:	e0d7      	b.n	800534c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_SPI_IRQHandler+0x66>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	09db      	lsrs	r3, r3, #7
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
    return;
 80051bc:	e0c6      	b.n	800534c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <HAL_SPI_IRQHandler+0x8c>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	099b      	lsrs	r3, r3, #6
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80b4 	beq.w	800534c <HAL_SPI_IRQHandler+0x1f4>
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80ad 	beq.w	800534c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d023      	beq.n	8005246 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b03      	cmp	r3, #3
 8005208:	d011      	beq.n	800522e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520e:	f043 0204 	orr.w	r2, r3, #4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	e00b      	b.n	8005246 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	693b      	ldr	r3, [r7, #16]
        return;
 8005244:	e082      	b.n	800534c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d014      	beq.n	800527c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005256:	f043 0201 	orr.w	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528c:	f043 0208 	orr.w	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04f      	beq.n	800534a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <HAL_SPI_IRQHandler+0x17e>
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d034      	beq.n	8005340 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0203 	bic.w	r2, r2, #3
 80052e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_SPI_IRQHandler+0x1fc>)
 80052f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fd fe2d 	bl	8002f5a <HAL_DMA_Abort_IT>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	2b00      	cmp	r3, #0
 8005318:	d016      	beq.n	8005348 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	4a0d      	ldr	r2, [pc, #52]	; (8005354 <HAL_SPI_IRQHandler+0x1fc>)
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fe17 	bl	8002f5a <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800533e:	e003      	b.n	8005348 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f809 	bl	8005358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005346:	e000      	b.n	800534a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005348:	bf00      	nop
    return;
 800534a:	bf00      	nop
  }
}
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	08005389 	.word	0x08005389

08005358 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800537a:	b2db      	uxtb	r3, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff ffd7 	bl	8005358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c4:	f7fd fc18 	bl	8002bf8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	4413      	add	r3, r2
 80053d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d4:	f7fd fc10 	bl	8002bf8 <HAL_GetTick>
 80053d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053da:	4b39      	ldr	r3, [pc, #228]	; (80054c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	0d1b      	lsrs	r3, r3, #20
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ea:	e054      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d050      	beq.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f4:	f7fd fc00 	bl	8002bf8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	429a      	cmp	r2, r3
 8005402:	d902      	bls.n	800540a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d13d      	bne.n	8005486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005422:	d111      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542c:	d004      	beq.n	8005438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005436:	d107      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005450:	d10f      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e017      	b.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3b01      	subs	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d19b      	bne.n	80053ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000000 	.word	0x20000000

080054c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054d6:	f7fd fb8f 	bl	8002bf8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80054e6:	f7fd fb87 	bl	8002bf8 <HAL_GetTick>
 80054ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054f4:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00da      	lsls	r2, r3, #3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	0d1b      	lsrs	r3, r3, #20
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800550c:	e060      	b.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005514:	d107      	bne.n	8005526 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005524:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d050      	beq.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800552e:	f7fd fb63 	bl	8002bf8 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	429a      	cmp	r2, r3
 800553c:	d902      	bls.n	8005544 <SPI_WaitFifoStateUntilTimeout+0x80>
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d13d      	bne.n	80055c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005552:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555c:	d111      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005566:	d004      	beq.n	8005572 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005570:	d107      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005580:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558a:	d10f      	bne.n	80055ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e010      	b.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d196      	bne.n	800550e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3728      	adds	r7, #40	; 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000000 	.word	0x20000000

080055f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005604:	d111      	bne.n	800562a <SPI_EndRxTransaction+0x3a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d004      	beq.n	800561a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005618:	d107      	bne.n	800562a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005632:	d112      	bne.n	800565a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	2180      	movs	r1, #128	; 0x80
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff feb8 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d021      	beq.n	800568e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e03d      	b.n	80056d6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <SPI_EndRxTransaction+0xf0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <SPI_EndRxTransaction+0xf4>)
 8005660:	fba2 2303 	umull	r2, r3, r2, r3
 8005664:	0d5b      	lsrs	r3, r3, #21
 8005666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	3b01      	subs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d0f2      	beq.n	8005670 <SPI_EndRxTransaction+0x80>
 800568a:	e000      	b.n	800568e <SPI_EndRxTransaction+0x9e>
        break;
 800568c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005696:	d11d      	bne.n	80056d4 <SPI_EndRxTransaction+0xe4>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d004      	beq.n	80056ac <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d113      	bne.n	80056d4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff03 	bl	80054c4 <SPI_WaitFifoStateUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e000      	b.n	80056d6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000000 	.word	0x20000000
 80056e4:	165e9f81 	.word	0x165e9f81

080056e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fedf 	bl	80054c4 <SPI_WaitFifoStateUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e046      	b.n	80057aa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800571c:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <SPI_EndRxTxTransaction+0xcc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <SPI_EndRxTxTransaction+0xd0>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	0d5b      	lsrs	r3, r3, #21
 8005728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800572c:	fb02 f303 	mul.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800573a:	d112      	bne.n	8005762 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	2180      	movs	r1, #128	; 0x80
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fe34 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d016      	beq.n	8005780 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005756:	f043 0220 	orr.w	r2, r3, #32
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e023      	b.n	80057aa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	3b01      	subs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d0f2      	beq.n	8005762 <SPI_EndRxTxTransaction+0x7a>
 800577c:	e000      	b.n	8005780 <SPI_EndRxTxTransaction+0x98>
        break;
 800577e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fe99 	bl	80054c4 <SPI_WaitFifoStateUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e000      	b.n	80057aa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000000 	.word	0x20000000
 80057b8:	165e9f81 	.word	0x165e9f81

080057bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e040      	b.n	8005850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc ffe6 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb62 	bl	8005ec4 <UART_SetConfig>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e022      	b.n	8005850 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fdba 	bl	800638c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fe41 	bl	80064d0 <UART_CheckIdleState>
 800584e:	4603      	mov	r3, r0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586c:	2b20      	cmp	r3, #32
 800586e:	d132      	bne.n	80058d6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Receive_IT+0x24>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e02b      	b.n	80058d8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d018      	beq.n	80058c6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	69f9      	ldr	r1, [r7, #28]
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e6      	bne.n	8005894 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fefd 	bl	80066cc <UART_Start_Receive_IT>
 80058d2:	4603      	mov	r3, r0
 80058d4:	e000      	b.n	80058d8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b0ba      	sub	sp, #232	; 0xe8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005906:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800590a:	f640 030f 	movw	r3, #2063	; 0x80f
 800590e:	4013      	ands	r3, r2
 8005910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d115      	bne.n	8005948 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8297 	beq.w	8005e6c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
      }
      return;
 8005946:	e291      	b.n	8005e6c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8117 	beq.w	8005b80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800595e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005962:	4b85      	ldr	r3, [pc, #532]	; (8005b78 <HAL_UART_IRQHandler+0x298>)
 8005964:	4013      	ands	r3, r2
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 810a 	beq.w	8005b80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d011      	beq.n	800599c <HAL_UART_IRQHandler+0xbc>
 8005978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005992:	f043 0201 	orr.w	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d011      	beq.n	80059cc <HAL_UART_IRQHandler+0xec>
 80059a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2202      	movs	r2, #2
 80059ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c2:	f043 0204 	orr.w	r2, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d011      	beq.n	80059fc <HAL_UART_IRQHandler+0x11c>
 80059d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2204      	movs	r2, #4
 80059ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f2:	f043 0202 	orr.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d017      	beq.n	8005a38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2208      	movs	r2, #8
 8005a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2e:	f043 0208 	orr.w	r2, r3, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d012      	beq.n	8005a6a <HAL_UART_IRQHandler+0x18a>
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 81fd 	beq.w	8005e70 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d005      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d04f      	beq.n	8005b62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fec8 	bl	8006858 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d141      	bne.n	8005b5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1d9      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d013      	beq.n	8005b52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <HAL_UART_IRQHandler+0x29c>)
 8005b30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fd fa0f 	bl	8002f5a <HAL_DMA_Abort_IT>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d017      	beq.n	8005b72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e00f      	b.n	8005b72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9a0 	bl	8005e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	e00b      	b.n	8005b72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f99c 	bl	8005e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	e007      	b.n	8005b72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f998 	bl	8005e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b70:	e17e      	b.n	8005e70 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b72:	bf00      	nop
    return;
 8005b74:	e17c      	b.n	8005e70 <HAL_UART_IRQHandler+0x590>
 8005b76:	bf00      	nop
 8005b78:	04000120 	.word	0x04000120
 8005b7c:	08006921 	.word	0x08006921

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	f040 814c 	bne.w	8005e22 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8145 	beq.w	8005e22 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 813e 	beq.w	8005e22 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	f040 80b6 	bne.w	8005d2a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8150 	beq.w	8005e74 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bde:	429a      	cmp	r2, r3
 8005be0:	f080 8148 	bcs.w	8005e74 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf8:	f000 8086 	beq.w	8005d08 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1da      	bne.n	8005bfc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e1      	bne.n	8005c46 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e3      	bne.n	8005c82 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e4      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd f8b9 	bl	8002e7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8c2 	bl	8005eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d28:	e0a4      	b.n	8005e74 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8096 	beq.w	8005e78 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8091 	beq.w	8005e78 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
 8005d7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e4      	bne.n	8005d56 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005db0:	633a      	str	r2, [r7, #48]	; 0x30
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e3      	bne.n	8005d8c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f023 0310 	bic.w	r3, r3, #16
 8005dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	69b9      	ldr	r1, [r7, #24]
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	617b      	str	r3, [r7, #20]
   return(result);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e4      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f846 	bl	8005eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e20:	e02a      	b.n	8005e78 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00e      	beq.n	8005e4c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01c      	beq.n	8005e7c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
    }
    return;
 8005e4a:	e017      	b.n	8005e7c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d012      	beq.n	8005e7e <HAL_UART_IRQHandler+0x59e>
 8005e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd71 	bl	800694c <UART_EndTransmit_IT>
    return;
 8005e6a:	e008      	b.n	8005e7e <HAL_UART_IRQHandler+0x59e>
      return;
 8005e6c:	bf00      	nop
 8005e6e:	e006      	b.n	8005e7e <HAL_UART_IRQHandler+0x59e>
    return;
 8005e70:	bf00      	nop
 8005e72:	e004      	b.n	8005e7e <HAL_UART_IRQHandler+0x59e>
      return;
 8005e74:	bf00      	nop
 8005e76:	e002      	b.n	8005e7e <HAL_UART_IRQHandler+0x59e>
      return;
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_IRQHandler+0x59e>
    return;
 8005e7c:	bf00      	nop
  }

}
 8005e7e:	37e8      	adds	r7, #232	; 0xe8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4ba6      	ldr	r3, [pc, #664]	; (8006188 <UART_SetConfig+0x2c4>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	6979      	ldr	r1, [r7, #20]
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a94      	ldr	r2, [pc, #592]	; (800618c <UART_SetConfig+0x2c8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d120      	bne.n	8005f82 <UART_SetConfig+0xbe>
 8005f40:	4b93      	ldr	r3, [pc, #588]	; (8006190 <UART_SetConfig+0x2cc>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d816      	bhi.n	8005f7c <UART_SetConfig+0xb8>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0x90>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f65 	.word	0x08005f65
 8005f58:	08005f71 	.word	0x08005f71
 8005f5c:	08005f6b 	.word	0x08005f6b
 8005f60:	08005f77 	.word	0x08005f77
 8005f64:	2301      	movs	r3, #1
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e150      	b.n	800620c <UART_SetConfig+0x348>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e14d      	b.n	800620c <UART_SetConfig+0x348>
 8005f70:	2304      	movs	r3, #4
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e14a      	b.n	800620c <UART_SetConfig+0x348>
 8005f76:	2308      	movs	r3, #8
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e147      	b.n	800620c <UART_SetConfig+0x348>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e144      	b.n	800620c <UART_SetConfig+0x348>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a83      	ldr	r2, [pc, #524]	; (8006194 <UART_SetConfig+0x2d0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d132      	bne.n	8005ff2 <UART_SetConfig+0x12e>
 8005f8c:	4b80      	ldr	r3, [pc, #512]	; (8006190 <UART_SetConfig+0x2cc>)
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b0c      	cmp	r3, #12
 8005f98:	d828      	bhi.n	8005fec <UART_SetConfig+0x128>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0xdc>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	08005fed 	.word	0x08005fed
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fed 	.word	0x08005fed
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08005fed 	.word	0x08005fed
 8005fc0:	08005fdb 	.word	0x08005fdb
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08005fe7 	.word	0x08005fe7
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e118      	b.n	800620c <UART_SetConfig+0x348>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e115      	b.n	800620c <UART_SetConfig+0x348>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e112      	b.n	800620c <UART_SetConfig+0x348>
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e10f      	b.n	800620c <UART_SetConfig+0x348>
 8005fec:	2310      	movs	r3, #16
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e10c      	b.n	800620c <UART_SetConfig+0x348>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a68      	ldr	r2, [pc, #416]	; (8006198 <UART_SetConfig+0x2d4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d120      	bne.n	800603e <UART_SetConfig+0x17a>
 8005ffc:	4b64      	ldr	r3, [pc, #400]	; (8006190 <UART_SetConfig+0x2cc>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006006:	2b30      	cmp	r3, #48	; 0x30
 8006008:	d013      	beq.n	8006032 <UART_SetConfig+0x16e>
 800600a:	2b30      	cmp	r3, #48	; 0x30
 800600c:	d814      	bhi.n	8006038 <UART_SetConfig+0x174>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d009      	beq.n	8006026 <UART_SetConfig+0x162>
 8006012:	2b20      	cmp	r3, #32
 8006014:	d810      	bhi.n	8006038 <UART_SetConfig+0x174>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <UART_SetConfig+0x15c>
 800601a:	2b10      	cmp	r3, #16
 800601c:	d006      	beq.n	800602c <UART_SetConfig+0x168>
 800601e:	e00b      	b.n	8006038 <UART_SetConfig+0x174>
 8006020:	2300      	movs	r3, #0
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e0f2      	b.n	800620c <UART_SetConfig+0x348>
 8006026:	2302      	movs	r3, #2
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e0ef      	b.n	800620c <UART_SetConfig+0x348>
 800602c:	2304      	movs	r3, #4
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e0ec      	b.n	800620c <UART_SetConfig+0x348>
 8006032:	2308      	movs	r3, #8
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e0e9      	b.n	800620c <UART_SetConfig+0x348>
 8006038:	2310      	movs	r3, #16
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e0e6      	b.n	800620c <UART_SetConfig+0x348>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a56      	ldr	r2, [pc, #344]	; (800619c <UART_SetConfig+0x2d8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d120      	bne.n	800608a <UART_SetConfig+0x1c6>
 8006048:	4b51      	ldr	r3, [pc, #324]	; (8006190 <UART_SetConfig+0x2cc>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006052:	2bc0      	cmp	r3, #192	; 0xc0
 8006054:	d013      	beq.n	800607e <UART_SetConfig+0x1ba>
 8006056:	2bc0      	cmp	r3, #192	; 0xc0
 8006058:	d814      	bhi.n	8006084 <UART_SetConfig+0x1c0>
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d009      	beq.n	8006072 <UART_SetConfig+0x1ae>
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d810      	bhi.n	8006084 <UART_SetConfig+0x1c0>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <UART_SetConfig+0x1a8>
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d006      	beq.n	8006078 <UART_SetConfig+0x1b4>
 800606a:	e00b      	b.n	8006084 <UART_SetConfig+0x1c0>
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e0cc      	b.n	800620c <UART_SetConfig+0x348>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e0c9      	b.n	800620c <UART_SetConfig+0x348>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e0c6      	b.n	800620c <UART_SetConfig+0x348>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e0c3      	b.n	800620c <UART_SetConfig+0x348>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e0c0      	b.n	800620c <UART_SetConfig+0x348>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a44      	ldr	r2, [pc, #272]	; (80061a0 <UART_SetConfig+0x2dc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d125      	bne.n	80060e0 <UART_SetConfig+0x21c>
 8006094:	4b3e      	ldr	r3, [pc, #248]	; (8006190 <UART_SetConfig+0x2cc>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a2:	d017      	beq.n	80060d4 <UART_SetConfig+0x210>
 80060a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a8:	d817      	bhi.n	80060da <UART_SetConfig+0x216>
 80060aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ae:	d00b      	beq.n	80060c8 <UART_SetConfig+0x204>
 80060b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b4:	d811      	bhi.n	80060da <UART_SetConfig+0x216>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <UART_SetConfig+0x1fe>
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060be:	d006      	beq.n	80060ce <UART_SetConfig+0x20a>
 80060c0:	e00b      	b.n	80060da <UART_SetConfig+0x216>
 80060c2:	2300      	movs	r3, #0
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e0a1      	b.n	800620c <UART_SetConfig+0x348>
 80060c8:	2302      	movs	r3, #2
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e09e      	b.n	800620c <UART_SetConfig+0x348>
 80060ce:	2304      	movs	r3, #4
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e09b      	b.n	800620c <UART_SetConfig+0x348>
 80060d4:	2308      	movs	r3, #8
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e098      	b.n	800620c <UART_SetConfig+0x348>
 80060da:	2310      	movs	r3, #16
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e095      	b.n	800620c <UART_SetConfig+0x348>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2f      	ldr	r2, [pc, #188]	; (80061a4 <UART_SetConfig+0x2e0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d125      	bne.n	8006136 <UART_SetConfig+0x272>
 80060ea:	4b29      	ldr	r3, [pc, #164]	; (8006190 <UART_SetConfig+0x2cc>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060f8:	d017      	beq.n	800612a <UART_SetConfig+0x266>
 80060fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060fe:	d817      	bhi.n	8006130 <UART_SetConfig+0x26c>
 8006100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006104:	d00b      	beq.n	800611e <UART_SetConfig+0x25a>
 8006106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610a:	d811      	bhi.n	8006130 <UART_SetConfig+0x26c>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <UART_SetConfig+0x254>
 8006110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006114:	d006      	beq.n	8006124 <UART_SetConfig+0x260>
 8006116:	e00b      	b.n	8006130 <UART_SetConfig+0x26c>
 8006118:	2301      	movs	r3, #1
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e076      	b.n	800620c <UART_SetConfig+0x348>
 800611e:	2302      	movs	r3, #2
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e073      	b.n	800620c <UART_SetConfig+0x348>
 8006124:	2304      	movs	r3, #4
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e070      	b.n	800620c <UART_SetConfig+0x348>
 800612a:	2308      	movs	r3, #8
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e06d      	b.n	800620c <UART_SetConfig+0x348>
 8006130:	2310      	movs	r3, #16
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e06a      	b.n	800620c <UART_SetConfig+0x348>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <UART_SetConfig+0x2e4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d138      	bne.n	80061b2 <UART_SetConfig+0x2ee>
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <UART_SetConfig+0x2cc>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800614a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800614e:	d017      	beq.n	8006180 <UART_SetConfig+0x2bc>
 8006150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006154:	d82a      	bhi.n	80061ac <UART_SetConfig+0x2e8>
 8006156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615a:	d00b      	beq.n	8006174 <UART_SetConfig+0x2b0>
 800615c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006160:	d824      	bhi.n	80061ac <UART_SetConfig+0x2e8>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <UART_SetConfig+0x2aa>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	d006      	beq.n	800617a <UART_SetConfig+0x2b6>
 800616c:	e01e      	b.n	80061ac <UART_SetConfig+0x2e8>
 800616e:	2300      	movs	r3, #0
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e04b      	b.n	800620c <UART_SetConfig+0x348>
 8006174:	2302      	movs	r3, #2
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e048      	b.n	800620c <UART_SetConfig+0x348>
 800617a:	2304      	movs	r3, #4
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e045      	b.n	800620c <UART_SetConfig+0x348>
 8006180:	2308      	movs	r3, #8
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e042      	b.n	800620c <UART_SetConfig+0x348>
 8006186:	bf00      	nop
 8006188:	efff69f3 	.word	0xefff69f3
 800618c:	40011000 	.word	0x40011000
 8006190:	40023800 	.word	0x40023800
 8006194:	40004400 	.word	0x40004400
 8006198:	40004800 	.word	0x40004800
 800619c:	40004c00 	.word	0x40004c00
 80061a0:	40005000 	.word	0x40005000
 80061a4:	40011400 	.word	0x40011400
 80061a8:	40007800 	.word	0x40007800
 80061ac:	2310      	movs	r3, #16
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e02c      	b.n	800620c <UART_SetConfig+0x348>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a72      	ldr	r2, [pc, #456]	; (8006380 <UART_SetConfig+0x4bc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d125      	bne.n	8006208 <UART_SetConfig+0x344>
 80061bc:	4b71      	ldr	r3, [pc, #452]	; (8006384 <UART_SetConfig+0x4c0>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061ca:	d017      	beq.n	80061fc <UART_SetConfig+0x338>
 80061cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061d0:	d817      	bhi.n	8006202 <UART_SetConfig+0x33e>
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d6:	d00b      	beq.n	80061f0 <UART_SetConfig+0x32c>
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	d811      	bhi.n	8006202 <UART_SetConfig+0x33e>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <UART_SetConfig+0x326>
 80061e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e6:	d006      	beq.n	80061f6 <UART_SetConfig+0x332>
 80061e8:	e00b      	b.n	8006202 <UART_SetConfig+0x33e>
 80061ea:	2300      	movs	r3, #0
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e00d      	b.n	800620c <UART_SetConfig+0x348>
 80061f0:	2302      	movs	r3, #2
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e00a      	b.n	800620c <UART_SetConfig+0x348>
 80061f6:	2304      	movs	r3, #4
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e007      	b.n	800620c <UART_SetConfig+0x348>
 80061fc:	2308      	movs	r3, #8
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e004      	b.n	800620c <UART_SetConfig+0x348>
 8006202:	2310      	movs	r3, #16
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	e001      	b.n	800620c <UART_SetConfig+0x348>
 8006208:	2310      	movs	r3, #16
 800620a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006214:	d15b      	bne.n	80062ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006216:	7ffb      	ldrb	r3, [r7, #31]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d828      	bhi.n	800626e <UART_SetConfig+0x3aa>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x360>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	0800626f 	.word	0x0800626f
 8006234:	0800625f 	.word	0x0800625f
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
 8006244:	08006267 	.word	0x08006267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7fd fe12 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 800624c:	61b8      	str	r0, [r7, #24]
        break;
 800624e:	e013      	b.n	8006278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7fd fe22 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8006254:	61b8      	str	r0, [r7, #24]
        break;
 8006256:	e00f      	b.n	8006278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006258:	4b4b      	ldr	r3, [pc, #300]	; (8006388 <UART_SetConfig+0x4c4>)
 800625a:	61bb      	str	r3, [r7, #24]
        break;
 800625c:	e00c      	b.n	8006278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625e:	f7fd fd35 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8006262:	61b8      	str	r0, [r7, #24]
        break;
 8006264:	e008      	b.n	8006278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	61bb      	str	r3, [r7, #24]
        break;
 800626c:	e004      	b.n	8006278 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	77bb      	strb	r3, [r7, #30]
        break;
 8006276:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d074      	beq.n	8006368 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	005a      	lsls	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	441a      	add	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b0f      	cmp	r3, #15
 8006298:	d916      	bls.n	80062c8 <UART_SetConfig+0x404>
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a0:	d212      	bcs.n	80062c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f023 030f 	bic.w	r3, r3, #15
 80062aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	89fb      	ldrh	r3, [r7, #14]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	89fa      	ldrh	r2, [r7, #14]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	e04f      	b.n	8006368 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	77bb      	strb	r3, [r7, #30]
 80062cc:	e04c      	b.n	8006368 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d828      	bhi.n	8006326 <UART_SetConfig+0x462>
 80062d4:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0x418>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	08006301 	.word	0x08006301
 80062e0:	08006309 	.word	0x08006309
 80062e4:	08006311 	.word	0x08006311
 80062e8:	08006327 	.word	0x08006327
 80062ec:	08006317 	.word	0x08006317
 80062f0:	08006327 	.word	0x08006327
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006327 	.word	0x08006327
 80062fc:	0800631f 	.word	0x0800631f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006300:	f7fd fdb6 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8006304:	61b8      	str	r0, [r7, #24]
        break;
 8006306:	e013      	b.n	8006330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006308:	f7fd fdc6 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 800630c:	61b8      	str	r0, [r7, #24]
        break;
 800630e:	e00f      	b.n	8006330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006310:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <UART_SetConfig+0x4c4>)
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e00c      	b.n	8006330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006316:	f7fd fcd9 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 800631a:	61b8      	str	r0, [r7, #24]
        break;
 800631c:	e008      	b.n	8006330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006322:	61bb      	str	r3, [r7, #24]
        break;
 8006324:	e004      	b.n	8006330 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	77bb      	strb	r3, [r7, #30]
        break;
 800632e:	bf00      	nop
    }

    if (pclk != 0U)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d018      	beq.n	8006368 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	085a      	lsrs	r2, r3, #1
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	441a      	add	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b0f      	cmp	r3, #15
 800634e:	d909      	bls.n	8006364 <UART_SetConfig+0x4a0>
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006356:	d205      	bcs.n	8006364 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	b29a      	uxth	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60da      	str	r2, [r3, #12]
 8006362:	e001      	b.n	8006368 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006374:	7fbb      	ldrb	r3, [r7, #30]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40007c00 	.word	0x40007c00
 8006384:	40023800 	.word	0x40023800
 8006388:	00f42400 	.word	0x00f42400

0800638c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648a:	d10a      	bne.n	80064a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e0:	f7fc fb8a 	bl	8002bf8 <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d10e      	bne.n	8006512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f81b 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e011      	b.n	8006536 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b09c      	sub	sp, #112	; 0x70
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	e0a7      	b.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	f000 80a3 	beq.w	80066a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fc fb4d 	bl	8002bf8 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <UART_WaitOnFlagUntilTimeout+0x32>
 800656a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656c:	2b00      	cmp	r3, #0
 800656e:	d13f      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006584:	667b      	str	r3, [r7, #100]	; 0x64
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006590:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	663b      	str	r3, [r7, #96]	; 0x60
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e068      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d050      	beq.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660c:	d148      	bne.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006616:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	66bb      	str	r3, [r7, #104]	; 0x68
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800666a:	623a      	str	r2, [r7, #32]
 800666c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	69f9      	ldr	r1, [r7, #28]
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	61bb      	str	r3, [r7, #24]
   return(result);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e010      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4013      	ands	r3, r2
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	bf0c      	ite	eq
 80066b0:	2301      	moveq	r3, #1
 80066b2:	2300      	movne	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f43f af48 	beq.w	8006550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3770      	adds	r7, #112	; 0x70
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b097      	sub	sp, #92	; 0x5c
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	88fa      	ldrh	r2, [r7, #6]
 80066e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fe:	d10e      	bne.n	800671e <UART_Start_Receive_IT+0x52>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <UART_Start_Receive_IT+0x48>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800670e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006712:	e02d      	b.n	8006770 <UART_Start_Receive_IT+0xa4>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	22ff      	movs	r2, #255	; 0xff
 8006718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800671c:	e028      	b.n	8006770 <UART_Start_Receive_IT+0xa4>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <UART_Start_Receive_IT+0x76>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <UART_Start_Receive_IT+0x6c>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006736:	e01b      	b.n	8006770 <UART_Start_Receive_IT+0xa4>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	227f      	movs	r2, #127	; 0x7f
 800673c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006740:	e016      	b.n	8006770 <UART_Start_Receive_IT+0xa4>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800674a:	d10d      	bne.n	8006768 <UART_Start_Receive_IT+0x9c>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <UART_Start_Receive_IT+0x92>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	227f      	movs	r2, #127	; 0x7f
 8006758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800675c:	e008      	b.n	8006770 <UART_Start_Receive_IT+0xa4>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	223f      	movs	r2, #63	; 0x3f
 8006762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006766:	e003      	b.n	8006770 <UART_Start_Receive_IT+0xa4>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2222      	movs	r2, #34	; 0x22
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3308      	adds	r3, #8
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3308      	adds	r3, #8
 800679e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80067a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e5      	bne.n	8006780 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067bc:	d107      	bne.n	80067ce <UART_Start_Receive_IT+0x102>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a21      	ldr	r2, [pc, #132]	; (8006850 <UART_Start_Receive_IT+0x184>)
 80067ca:	669a      	str	r2, [r3, #104]	; 0x68
 80067cc:	e002      	b.n	80067d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <UART_Start_Receive_IT+0x188>)
 80067d2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d019      	beq.n	8006810 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
 80067fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e6      	bne.n	80067dc <UART_Start_Receive_IT+0x110>
 800680e:	e018      	b.n	8006842 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	613b      	str	r3, [r7, #16]
   return(result);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f043 0320 	orr.w	r3, r3, #32
 8006824:	653b      	str	r3, [r7, #80]	; 0x50
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682e:	623b      	str	r3, [r7, #32]
 8006830:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	69f9      	ldr	r1, [r7, #28]
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	61bb      	str	r3, [r7, #24]
   return(result);
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	375c      	adds	r7, #92	; 0x5c
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	08006b07 	.word	0x08006b07
 8006854:	080069a1 	.word	0x080069a1

08006858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b095      	sub	sp, #84	; 0x54
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687e:	643b      	str	r3, [r7, #64]	; 0x40
 8006880:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d118      	bne.n	8006900 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	60bb      	str	r3, [r7, #8]
   return(result);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f023 0310 	bic.w	r3, r3, #16
 80068e2:	647b      	str	r3, [r7, #68]	; 0x44
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6979      	ldr	r1, [r7, #20]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	613b      	str	r3, [r7, #16]
   return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e6      	bne.n	80068ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006914:	bf00      	nop
 8006916:	3754      	adds	r7, #84	; 0x54
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff faaa 	bl	8005e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	60bb      	str	r3, [r7, #8]
   return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	613b      	str	r3, [r7, #16]
   return(result);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fa76 	bl	8005e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006998:	bf00      	nop
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b096      	sub	sp, #88	; 0x58
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b8:	2b22      	cmp	r3, #34	; 0x22
 80069ba:	f040 8098 	bne.w	8006aee <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069cc:	b2d9      	uxtb	r1, r3
 80069ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	400a      	ands	r2, r1
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d17b      	bne.n	8006afe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
 8006a26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e6      	bne.n	8006a06 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	623b      	str	r3, [r7, #32]
   return(result);
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a58:	633a      	str	r2, [r7, #48]	; 0x30
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d12e      	bne.n	8006ae6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	69b9      	ldr	r1, [r7, #24]
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d103      	bne.n	8006ad6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff f9e4 	bl	8005eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ae4:	e00b      	b.n	8006afe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fb f89a 	bl	8001c20 <HAL_UART_RxCpltCallback>
}
 8006aec:	e007      	b.n	8006afe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0208 	orr.w	r2, r2, #8
 8006afc:	619a      	str	r2, [r3, #24]
}
 8006afe:	bf00      	nop
 8006b00:	3758      	adds	r7, #88	; 0x58
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b096      	sub	sp, #88	; 0x58
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b1e:	2b22      	cmp	r3, #34	; 0x22
 8006b20:	f040 8098 	bne.w	8006c54 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	1c9a      	adds	r2, r3, #2
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d17b      	bne.n	8006c64 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e6      	bne.n	8006b6c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d12e      	bne.n	8006c4c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0310 	bic.w	r3, r3, #16
 8006c08:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e6      	bne.n	8006bf4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d103      	bne.n	8006c3c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f931 	bl	8005eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c4a:	e00b      	b.n	8006c64 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7fa ffe7 	bl	8001c20 <HAL_UART_RxCpltCallback>
}
 8006c52:	e007      	b.n	8006c64 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0208 	orr.w	r2, r2, #8
 8006c62:	619a      	str	r2, [r3, #24]
}
 8006c64:	bf00      	nop
 8006c66:	3758      	adds	r7, #88	; 0x58
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <__errno>:
 8006c6c:	4b01      	ldr	r3, [pc, #4]	; (8006c74 <__errno+0x8>)
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000000c 	.word	0x2000000c

08006c78 <__libc_init_array>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4d0d      	ldr	r5, [pc, #52]	; (8006cb0 <__libc_init_array+0x38>)
 8006c7c:	4c0d      	ldr	r4, [pc, #52]	; (8006cb4 <__libc_init_array+0x3c>)
 8006c7e:	1b64      	subs	r4, r4, r5
 8006c80:	10a4      	asrs	r4, r4, #2
 8006c82:	2600      	movs	r6, #0
 8006c84:	42a6      	cmp	r6, r4
 8006c86:	d109      	bne.n	8006c9c <__libc_init_array+0x24>
 8006c88:	4d0b      	ldr	r5, [pc, #44]	; (8006cb8 <__libc_init_array+0x40>)
 8006c8a:	4c0c      	ldr	r4, [pc, #48]	; (8006cbc <__libc_init_array+0x44>)
 8006c8c:	f005 f8ca 	bl	800be24 <_init>
 8006c90:	1b64      	subs	r4, r4, r5
 8006c92:	10a4      	asrs	r4, r4, #2
 8006c94:	2600      	movs	r6, #0
 8006c96:	42a6      	cmp	r6, r4
 8006c98:	d105      	bne.n	8006ca6 <__libc_init_array+0x2e>
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca0:	4798      	blx	r3
 8006ca2:	3601      	adds	r6, #1
 8006ca4:	e7ee      	b.n	8006c84 <__libc_init_array+0xc>
 8006ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006caa:	4798      	blx	r3
 8006cac:	3601      	adds	r6, #1
 8006cae:	e7f2      	b.n	8006c96 <__libc_init_array+0x1e>
 8006cb0:	0800c3d4 	.word	0x0800c3d4
 8006cb4:	0800c3d4 	.word	0x0800c3d4
 8006cb8:	0800c3d4 	.word	0x0800c3d4
 8006cbc:	0800c3d8 	.word	0x0800c3d8

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <__cvt>:
 8006cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	ec55 4b10 	vmov	r4, r5, d0
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	460e      	mov	r6, r1
 8006cdc:	4619      	mov	r1, r3
 8006cde:	462b      	mov	r3, r5
 8006ce0:	bfbb      	ittet	lt
 8006ce2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ce6:	461d      	movlt	r5, r3
 8006ce8:	2300      	movge	r3, #0
 8006cea:	232d      	movlt	r3, #45	; 0x2d
 8006cec:	700b      	strb	r3, [r1, #0]
 8006cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cf4:	4691      	mov	r9, r2
 8006cf6:	f023 0820 	bic.w	r8, r3, #32
 8006cfa:	bfbc      	itt	lt
 8006cfc:	4622      	movlt	r2, r4
 8006cfe:	4614      	movlt	r4, r2
 8006d00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d04:	d005      	beq.n	8006d12 <__cvt+0x42>
 8006d06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d0a:	d100      	bne.n	8006d0e <__cvt+0x3e>
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	2102      	movs	r1, #2
 8006d10:	e000      	b.n	8006d14 <__cvt+0x44>
 8006d12:	2103      	movs	r1, #3
 8006d14:	ab03      	add	r3, sp, #12
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	ab02      	add	r3, sp, #8
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	ec45 4b10 	vmov	d0, r4, r5
 8006d20:	4653      	mov	r3, sl
 8006d22:	4632      	mov	r2, r6
 8006d24:	f001 fe58 	bl	80089d8 <_dtoa_r>
 8006d28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	d102      	bne.n	8006d36 <__cvt+0x66>
 8006d30:	f019 0f01 	tst.w	r9, #1
 8006d34:	d022      	beq.n	8006d7c <__cvt+0xac>
 8006d36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d3a:	eb07 0906 	add.w	r9, r7, r6
 8006d3e:	d110      	bne.n	8006d62 <__cvt+0x92>
 8006d40:	783b      	ldrb	r3, [r7, #0]
 8006d42:	2b30      	cmp	r3, #48	; 0x30
 8006d44:	d10a      	bne.n	8006d5c <__cvt+0x8c>
 8006d46:	2200      	movs	r2, #0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f7f9 fedb 	bl	8000b08 <__aeabi_dcmpeq>
 8006d52:	b918      	cbnz	r0, 8006d5c <__cvt+0x8c>
 8006d54:	f1c6 0601 	rsb	r6, r6, #1
 8006d58:	f8ca 6000 	str.w	r6, [sl]
 8006d5c:	f8da 3000 	ldr.w	r3, [sl]
 8006d60:	4499      	add	r9, r3
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7f9 fecd 	bl	8000b08 <__aeabi_dcmpeq>
 8006d6e:	b108      	cbz	r0, 8006d74 <__cvt+0xa4>
 8006d70:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d74:	2230      	movs	r2, #48	; 0x30
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	454b      	cmp	r3, r9
 8006d7a:	d307      	bcc.n	8006d8c <__cvt+0xbc>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d80:	1bdb      	subs	r3, r3, r7
 8006d82:	4638      	mov	r0, r7
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	b004      	add	sp, #16
 8006d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8c:	1c59      	adds	r1, r3, #1
 8006d8e:	9103      	str	r1, [sp, #12]
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e7f0      	b.n	8006d76 <__cvt+0xa6>

08006d94 <__exponent>:
 8006d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d96:	4603      	mov	r3, r0
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	4249      	neglt	r1, r1
 8006d9e:	f803 2b02 	strb.w	r2, [r3], #2
 8006da2:	bfb4      	ite	lt
 8006da4:	222d      	movlt	r2, #45	; 0x2d
 8006da6:	222b      	movge	r2, #43	; 0x2b
 8006da8:	2909      	cmp	r1, #9
 8006daa:	7042      	strb	r2, [r0, #1]
 8006dac:	dd2a      	ble.n	8006e04 <__exponent+0x70>
 8006dae:	f10d 0407 	add.w	r4, sp, #7
 8006db2:	46a4      	mov	ip, r4
 8006db4:	270a      	movs	r7, #10
 8006db6:	46a6      	mov	lr, r4
 8006db8:	460a      	mov	r2, r1
 8006dba:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dbe:	fb07 1516 	mls	r5, r7, r6, r1
 8006dc2:	3530      	adds	r5, #48	; 0x30
 8006dc4:	2a63      	cmp	r2, #99	; 0x63
 8006dc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dce:	4631      	mov	r1, r6
 8006dd0:	dcf1      	bgt.n	8006db6 <__exponent+0x22>
 8006dd2:	3130      	adds	r1, #48	; 0x30
 8006dd4:	f1ae 0502 	sub.w	r5, lr, #2
 8006dd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ddc:	1c44      	adds	r4, r0, #1
 8006dde:	4629      	mov	r1, r5
 8006de0:	4561      	cmp	r1, ip
 8006de2:	d30a      	bcc.n	8006dfa <__exponent+0x66>
 8006de4:	f10d 0209 	add.w	r2, sp, #9
 8006de8:	eba2 020e 	sub.w	r2, r2, lr
 8006dec:	4565      	cmp	r5, ip
 8006dee:	bf88      	it	hi
 8006df0:	2200      	movhi	r2, #0
 8006df2:	4413      	add	r3, r2
 8006df4:	1a18      	subs	r0, r3, r0
 8006df6:	b003      	add	sp, #12
 8006df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e02:	e7ed      	b.n	8006de0 <__exponent+0x4c>
 8006e04:	2330      	movs	r3, #48	; 0x30
 8006e06:	3130      	adds	r1, #48	; 0x30
 8006e08:	7083      	strb	r3, [r0, #2]
 8006e0a:	70c1      	strb	r1, [r0, #3]
 8006e0c:	1d03      	adds	r3, r0, #4
 8006e0e:	e7f1      	b.n	8006df4 <__exponent+0x60>

08006e10 <_printf_float>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	ed2d 8b02 	vpush	{d8}
 8006e18:	b08d      	sub	sp, #52	; 0x34
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e20:	4616      	mov	r6, r2
 8006e22:	461f      	mov	r7, r3
 8006e24:	4605      	mov	r5, r0
 8006e26:	f002 ff35 	bl	8009c94 <_localeconv_r>
 8006e2a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e2e:	4650      	mov	r0, sl
 8006e30:	f7f9 f9ee 	bl	8000210 <strlen>
 8006e34:	2300      	movs	r3, #0
 8006e36:	930a      	str	r3, [sp, #40]	; 0x28
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	9305      	str	r3, [sp, #20]
 8006e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e44:	3307      	adds	r3, #7
 8006e46:	f023 0307 	bic.w	r3, r3, #7
 8006e4a:	f103 0208 	add.w	r2, r3, #8
 8006e4e:	f8c8 2000 	str.w	r2, [r8]
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e68:	ee08 0a10 	vmov	s16, r0
 8006e6c:	4b9f      	ldr	r3, [pc, #636]	; (80070ec <_printf_float+0x2dc>)
 8006e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	f7f9 fe79 	bl	8000b6c <__aeabi_dcmpun>
 8006e7a:	bb88      	cbnz	r0, 8006ee0 <_printf_float+0xd0>
 8006e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e80:	4b9a      	ldr	r3, [pc, #616]	; (80070ec <_printf_float+0x2dc>)
 8006e82:	f04f 32ff 	mov.w	r2, #4294967295
 8006e86:	f7f9 fe53 	bl	8000b30 <__aeabi_dcmple>
 8006e8a:	bb48      	cbnz	r0, 8006ee0 <_printf_float+0xd0>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fe42 	bl	8000b1c <__aeabi_dcmplt>
 8006e98:	b110      	cbz	r0, 8006ea0 <_printf_float+0x90>
 8006e9a:	232d      	movs	r3, #45	; 0x2d
 8006e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea0:	4b93      	ldr	r3, [pc, #588]	; (80070f0 <_printf_float+0x2e0>)
 8006ea2:	4894      	ldr	r0, [pc, #592]	; (80070f4 <_printf_float+0x2e4>)
 8006ea4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ea8:	bf94      	ite	ls
 8006eaa:	4698      	movls	r8, r3
 8006eac:	4680      	movhi	r8, r0
 8006eae:	2303      	movs	r3, #3
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	f023 0204 	bic.w	r2, r3, #4
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	f04f 0900 	mov.w	r9, #0
 8006ebe:	9700      	str	r7, [sp, #0]
 8006ec0:	4633      	mov	r3, r6
 8006ec2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 f9d8 	bl	800727c <_printf_common>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f040 8090 	bne.w	8006ff2 <_printf_float+0x1e2>
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	b00d      	add	sp, #52	; 0x34
 8006ed8:	ecbd 8b02 	vpop	{d8}
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 fe40 	bl	8000b6c <__aeabi_dcmpun>
 8006eec:	b140      	cbz	r0, 8006f00 <_printf_float+0xf0>
 8006eee:	464b      	mov	r3, r9
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bfbc      	itt	lt
 8006ef4:	232d      	movlt	r3, #45	; 0x2d
 8006ef6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006efa:	487f      	ldr	r0, [pc, #508]	; (80070f8 <_printf_float+0x2e8>)
 8006efc:	4b7f      	ldr	r3, [pc, #508]	; (80070fc <_printf_float+0x2ec>)
 8006efe:	e7d1      	b.n	8006ea4 <_printf_float+0x94>
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f06:	9206      	str	r2, [sp, #24]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	d13f      	bne.n	8006f8c <_printf_float+0x17c>
 8006f0c:	2306      	movs	r3, #6
 8006f0e:	6063      	str	r3, [r4, #4]
 8006f10:	9b05      	ldr	r3, [sp, #20]
 8006f12:	6861      	ldr	r1, [r4, #4]
 8006f14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f22:	ab09      	add	r3, sp, #36	; 0x24
 8006f24:	ec49 8b10 	vmov	d0, r8, r9
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f30:	4628      	mov	r0, r5
 8006f32:	f7ff fecd 	bl	8006cd0 <__cvt>
 8006f36:	9b06      	ldr	r3, [sp, #24]
 8006f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f3a:	2b47      	cmp	r3, #71	; 0x47
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	d108      	bne.n	8006f52 <_printf_float+0x142>
 8006f40:	1cc8      	adds	r0, r1, #3
 8006f42:	db02      	blt.n	8006f4a <_printf_float+0x13a>
 8006f44:	6863      	ldr	r3, [r4, #4]
 8006f46:	4299      	cmp	r1, r3
 8006f48:	dd41      	ble.n	8006fce <_printf_float+0x1be>
 8006f4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f4e:	fa5f fb8b 	uxtb.w	fp, fp
 8006f52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f56:	d820      	bhi.n	8006f9a <_printf_float+0x18a>
 8006f58:	3901      	subs	r1, #1
 8006f5a:	465a      	mov	r2, fp
 8006f5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f60:	9109      	str	r1, [sp, #36]	; 0x24
 8006f62:	f7ff ff17 	bl	8006d94 <__exponent>
 8006f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f68:	1813      	adds	r3, r2, r0
 8006f6a:	2a01      	cmp	r2, #1
 8006f6c:	4681      	mov	r9, r0
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	dc02      	bgt.n	8006f78 <_printf_float+0x168>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	07d2      	lsls	r2, r2, #31
 8006f76:	d501      	bpl.n	8006f7c <_printf_float+0x16c>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d09c      	beq.n	8006ebe <_printf_float+0xae>
 8006f84:	232d      	movs	r3, #45	; 0x2d
 8006f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8a:	e798      	b.n	8006ebe <_printf_float+0xae>
 8006f8c:	9a06      	ldr	r2, [sp, #24]
 8006f8e:	2a47      	cmp	r2, #71	; 0x47
 8006f90:	d1be      	bne.n	8006f10 <_printf_float+0x100>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1bc      	bne.n	8006f10 <_printf_float+0x100>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e7b9      	b.n	8006f0e <_printf_float+0xfe>
 8006f9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f9e:	d118      	bne.n	8006fd2 <_printf_float+0x1c2>
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	dd0b      	ble.n	8006fbe <_printf_float+0x1ae>
 8006fa6:	6121      	str	r1, [r4, #16]
 8006fa8:	b913      	cbnz	r3, 8006fb0 <_printf_float+0x1a0>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	07d0      	lsls	r0, r2, #31
 8006fae:	d502      	bpl.n	8006fb6 <_printf_float+0x1a6>
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	440b      	add	r3, r1
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fb8:	f04f 0900 	mov.w	r9, #0
 8006fbc:	e7de      	b.n	8006f7c <_printf_float+0x16c>
 8006fbe:	b913      	cbnz	r3, 8006fc6 <_printf_float+0x1b6>
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	07d2      	lsls	r2, r2, #31
 8006fc4:	d501      	bpl.n	8006fca <_printf_float+0x1ba>
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	e7f4      	b.n	8006fb4 <_printf_float+0x1a4>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e7f2      	b.n	8006fb4 <_printf_float+0x1a4>
 8006fce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	db05      	blt.n	8006fe4 <_printf_float+0x1d4>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	6121      	str	r1, [r4, #16]
 8006fdc:	07d8      	lsls	r0, r3, #31
 8006fde:	d5ea      	bpl.n	8006fb6 <_printf_float+0x1a6>
 8006fe0:	1c4b      	adds	r3, r1, #1
 8006fe2:	e7e7      	b.n	8006fb4 <_printf_float+0x1a4>
 8006fe4:	2900      	cmp	r1, #0
 8006fe6:	bfd4      	ite	le
 8006fe8:	f1c1 0202 	rsble	r2, r1, #2
 8006fec:	2201      	movgt	r2, #1
 8006fee:	4413      	add	r3, r2
 8006ff0:	e7e0      	b.n	8006fb4 <_printf_float+0x1a4>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	055a      	lsls	r2, r3, #21
 8006ff6:	d407      	bmi.n	8007008 <_printf_float+0x1f8>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	4642      	mov	r2, r8
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	d12c      	bne.n	8007060 <_printf_float+0x250>
 8007006:	e764      	b.n	8006ed2 <_printf_float+0xc2>
 8007008:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800700c:	f240 80e0 	bls.w	80071d0 <_printf_float+0x3c0>
 8007010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	f7f9 fd76 	bl	8000b08 <__aeabi_dcmpeq>
 800701c:	2800      	cmp	r0, #0
 800701e:	d034      	beq.n	800708a <_printf_float+0x27a>
 8007020:	4a37      	ldr	r2, [pc, #220]	; (8007100 <_printf_float+0x2f0>)
 8007022:	2301      	movs	r3, #1
 8007024:	4631      	mov	r1, r6
 8007026:	4628      	mov	r0, r5
 8007028:	47b8      	blx	r7
 800702a:	3001      	adds	r0, #1
 800702c:	f43f af51 	beq.w	8006ed2 <_printf_float+0xc2>
 8007030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007034:	429a      	cmp	r2, r3
 8007036:	db02      	blt.n	800703e <_printf_float+0x22e>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	07d8      	lsls	r0, r3, #31
 800703c:	d510      	bpl.n	8007060 <_printf_float+0x250>
 800703e:	ee18 3a10 	vmov	r3, s16
 8007042:	4652      	mov	r2, sl
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f af41 	beq.w	8006ed2 <_printf_float+0xc2>
 8007050:	f04f 0800 	mov.w	r8, #0
 8007054:	f104 091a 	add.w	r9, r4, #26
 8007058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705a:	3b01      	subs	r3, #1
 800705c:	4543      	cmp	r3, r8
 800705e:	dc09      	bgt.n	8007074 <_printf_float+0x264>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	079b      	lsls	r3, r3, #30
 8007064:	f100 8105 	bmi.w	8007272 <_printf_float+0x462>
 8007068:	68e0      	ldr	r0, [r4, #12]
 800706a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706c:	4298      	cmp	r0, r3
 800706e:	bfb8      	it	lt
 8007070:	4618      	movlt	r0, r3
 8007072:	e730      	b.n	8006ed6 <_printf_float+0xc6>
 8007074:	2301      	movs	r3, #1
 8007076:	464a      	mov	r2, r9
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af27 	beq.w	8006ed2 <_printf_float+0xc2>
 8007084:	f108 0801 	add.w	r8, r8, #1
 8007088:	e7e6      	b.n	8007058 <_printf_float+0x248>
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	dc39      	bgt.n	8007104 <_printf_float+0x2f4>
 8007090:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <_printf_float+0x2f0>)
 8007092:	2301      	movs	r3, #1
 8007094:	4631      	mov	r1, r6
 8007096:	4628      	mov	r0, r5
 8007098:	47b8      	blx	r7
 800709a:	3001      	adds	r0, #1
 800709c:	f43f af19 	beq.w	8006ed2 <_printf_float+0xc2>
 80070a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070a4:	4313      	orrs	r3, r2
 80070a6:	d102      	bne.n	80070ae <_printf_float+0x29e>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d5d8      	bpl.n	8007060 <_printf_float+0x250>
 80070ae:	ee18 3a10 	vmov	r3, s16
 80070b2:	4652      	mov	r2, sl
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b8      	blx	r7
 80070ba:	3001      	adds	r0, #1
 80070bc:	f43f af09 	beq.w	8006ed2 <_printf_float+0xc2>
 80070c0:	f04f 0900 	mov.w	r9, #0
 80070c4:	f104 0a1a 	add.w	sl, r4, #26
 80070c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ca:	425b      	negs	r3, r3
 80070cc:	454b      	cmp	r3, r9
 80070ce:	dc01      	bgt.n	80070d4 <_printf_float+0x2c4>
 80070d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d2:	e792      	b.n	8006ffa <_printf_float+0x1ea>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4652      	mov	r2, sl
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f aef7 	beq.w	8006ed2 <_printf_float+0xc2>
 80070e4:	f109 0901 	add.w	r9, r9, #1
 80070e8:	e7ee      	b.n	80070c8 <_printf_float+0x2b8>
 80070ea:	bf00      	nop
 80070ec:	7fefffff 	.word	0x7fefffff
 80070f0:	0800bf14 	.word	0x0800bf14
 80070f4:	0800bf18 	.word	0x0800bf18
 80070f8:	0800bf20 	.word	0x0800bf20
 80070fc:	0800bf1c 	.word	0x0800bf1c
 8007100:	0800c319 	.word	0x0800c319
 8007104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007108:	429a      	cmp	r2, r3
 800710a:	bfa8      	it	ge
 800710c:	461a      	movge	r2, r3
 800710e:	2a00      	cmp	r2, #0
 8007110:	4691      	mov	r9, r2
 8007112:	dc37      	bgt.n	8007184 <_printf_float+0x374>
 8007114:	f04f 0b00 	mov.w	fp, #0
 8007118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800711c:	f104 021a 	add.w	r2, r4, #26
 8007120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	eba3 0309 	sub.w	r3, r3, r9
 8007128:	455b      	cmp	r3, fp
 800712a:	dc33      	bgt.n	8007194 <_printf_float+0x384>
 800712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007130:	429a      	cmp	r2, r3
 8007132:	db3b      	blt.n	80071ac <_printf_float+0x39c>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07da      	lsls	r2, r3, #31
 8007138:	d438      	bmi.n	80071ac <_printf_float+0x39c>
 800713a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713c:	9a05      	ldr	r2, [sp, #20]
 800713e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007140:	1a9a      	subs	r2, r3, r2
 8007142:	eba3 0901 	sub.w	r9, r3, r1
 8007146:	4591      	cmp	r9, r2
 8007148:	bfa8      	it	ge
 800714a:	4691      	movge	r9, r2
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	dc35      	bgt.n	80071be <_printf_float+0x3ae>
 8007152:	f04f 0800 	mov.w	r8, #0
 8007156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800715a:	f104 0a1a 	add.w	sl, r4, #26
 800715e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007162:	1a9b      	subs	r3, r3, r2
 8007164:	eba3 0309 	sub.w	r3, r3, r9
 8007168:	4543      	cmp	r3, r8
 800716a:	f77f af79 	ble.w	8007060 <_printf_float+0x250>
 800716e:	2301      	movs	r3, #1
 8007170:	4652      	mov	r2, sl
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	f43f aeaa 	beq.w	8006ed2 <_printf_float+0xc2>
 800717e:	f108 0801 	add.w	r8, r8, #1
 8007182:	e7ec      	b.n	800715e <_printf_float+0x34e>
 8007184:	4613      	mov	r3, r2
 8007186:	4631      	mov	r1, r6
 8007188:	4642      	mov	r2, r8
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	d1c0      	bne.n	8007114 <_printf_float+0x304>
 8007192:	e69e      	b.n	8006ed2 <_printf_float+0xc2>
 8007194:	2301      	movs	r3, #1
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	9205      	str	r2, [sp, #20]
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	f43f ae97 	beq.w	8006ed2 <_printf_float+0xc2>
 80071a4:	9a05      	ldr	r2, [sp, #20]
 80071a6:	f10b 0b01 	add.w	fp, fp, #1
 80071aa:	e7b9      	b.n	8007120 <_printf_float+0x310>
 80071ac:	ee18 3a10 	vmov	r3, s16
 80071b0:	4652      	mov	r2, sl
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	d1be      	bne.n	800713a <_printf_float+0x32a>
 80071bc:	e689      	b.n	8006ed2 <_printf_float+0xc2>
 80071be:	9a05      	ldr	r2, [sp, #20]
 80071c0:	464b      	mov	r3, r9
 80071c2:	4442      	add	r2, r8
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	d1c1      	bne.n	8007152 <_printf_float+0x342>
 80071ce:	e680      	b.n	8006ed2 <_printf_float+0xc2>
 80071d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d2:	2a01      	cmp	r2, #1
 80071d4:	dc01      	bgt.n	80071da <_printf_float+0x3ca>
 80071d6:	07db      	lsls	r3, r3, #31
 80071d8:	d538      	bpl.n	800724c <_printf_float+0x43c>
 80071da:	2301      	movs	r3, #1
 80071dc:	4642      	mov	r2, r8
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	f43f ae74 	beq.w	8006ed2 <_printf_float+0xc2>
 80071ea:	ee18 3a10 	vmov	r3, s16
 80071ee:	4652      	mov	r2, sl
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	f43f ae6b 	beq.w	8006ed2 <_printf_float+0xc2>
 80071fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007200:	2200      	movs	r2, #0
 8007202:	2300      	movs	r3, #0
 8007204:	f7f9 fc80 	bl	8000b08 <__aeabi_dcmpeq>
 8007208:	b9d8      	cbnz	r0, 8007242 <_printf_float+0x432>
 800720a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720c:	f108 0201 	add.w	r2, r8, #1
 8007210:	3b01      	subs	r3, #1
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	d10e      	bne.n	800723a <_printf_float+0x42a>
 800721c:	e659      	b.n	8006ed2 <_printf_float+0xc2>
 800721e:	2301      	movs	r3, #1
 8007220:	4652      	mov	r2, sl
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	f43f ae52 	beq.w	8006ed2 <_printf_float+0xc2>
 800722e:	f108 0801 	add.w	r8, r8, #1
 8007232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007234:	3b01      	subs	r3, #1
 8007236:	4543      	cmp	r3, r8
 8007238:	dcf1      	bgt.n	800721e <_printf_float+0x40e>
 800723a:	464b      	mov	r3, r9
 800723c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007240:	e6dc      	b.n	8006ffc <_printf_float+0x1ec>
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	f104 0a1a 	add.w	sl, r4, #26
 800724a:	e7f2      	b.n	8007232 <_printf_float+0x422>
 800724c:	2301      	movs	r3, #1
 800724e:	4642      	mov	r2, r8
 8007250:	e7df      	b.n	8007212 <_printf_float+0x402>
 8007252:	2301      	movs	r3, #1
 8007254:	464a      	mov	r2, r9
 8007256:	4631      	mov	r1, r6
 8007258:	4628      	mov	r0, r5
 800725a:	47b8      	blx	r7
 800725c:	3001      	adds	r0, #1
 800725e:	f43f ae38 	beq.w	8006ed2 <_printf_float+0xc2>
 8007262:	f108 0801 	add.w	r8, r8, #1
 8007266:	68e3      	ldr	r3, [r4, #12]
 8007268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800726a:	1a5b      	subs	r3, r3, r1
 800726c:	4543      	cmp	r3, r8
 800726e:	dcf0      	bgt.n	8007252 <_printf_float+0x442>
 8007270:	e6fa      	b.n	8007068 <_printf_float+0x258>
 8007272:	f04f 0800 	mov.w	r8, #0
 8007276:	f104 0919 	add.w	r9, r4, #25
 800727a:	e7f4      	b.n	8007266 <_printf_float+0x456>

0800727c <_printf_common>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	4616      	mov	r6, r2
 8007282:	4699      	mov	r9, r3
 8007284:	688a      	ldr	r2, [r1, #8]
 8007286:	690b      	ldr	r3, [r1, #16]
 8007288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800728c:	4293      	cmp	r3, r2
 800728e:	bfb8      	it	lt
 8007290:	4613      	movlt	r3, r2
 8007292:	6033      	str	r3, [r6, #0]
 8007294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007298:	4607      	mov	r7, r0
 800729a:	460c      	mov	r4, r1
 800729c:	b10a      	cbz	r2, 80072a2 <_printf_common+0x26>
 800729e:	3301      	adds	r3, #1
 80072a0:	6033      	str	r3, [r6, #0]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	0699      	lsls	r1, r3, #26
 80072a6:	bf42      	ittt	mi
 80072a8:	6833      	ldrmi	r3, [r6, #0]
 80072aa:	3302      	addmi	r3, #2
 80072ac:	6033      	strmi	r3, [r6, #0]
 80072ae:	6825      	ldr	r5, [r4, #0]
 80072b0:	f015 0506 	ands.w	r5, r5, #6
 80072b4:	d106      	bne.n	80072c4 <_printf_common+0x48>
 80072b6:	f104 0a19 	add.w	sl, r4, #25
 80072ba:	68e3      	ldr	r3, [r4, #12]
 80072bc:	6832      	ldr	r2, [r6, #0]
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	dc26      	bgt.n	8007312 <_printf_common+0x96>
 80072c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072c8:	1e13      	subs	r3, r2, #0
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	bf18      	it	ne
 80072ce:	2301      	movne	r3, #1
 80072d0:	0692      	lsls	r2, r2, #26
 80072d2:	d42b      	bmi.n	800732c <_printf_common+0xb0>
 80072d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072d8:	4649      	mov	r1, r9
 80072da:	4638      	mov	r0, r7
 80072dc:	47c0      	blx	r8
 80072de:	3001      	adds	r0, #1
 80072e0:	d01e      	beq.n	8007320 <_printf_common+0xa4>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	68e5      	ldr	r5, [r4, #12]
 80072e6:	6832      	ldr	r2, [r6, #0]
 80072e8:	f003 0306 	and.w	r3, r3, #6
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	bf08      	it	eq
 80072f0:	1aad      	subeq	r5, r5, r2
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	6922      	ldr	r2, [r4, #16]
 80072f6:	bf0c      	ite	eq
 80072f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072fc:	2500      	movne	r5, #0
 80072fe:	4293      	cmp	r3, r2
 8007300:	bfc4      	itt	gt
 8007302:	1a9b      	subgt	r3, r3, r2
 8007304:	18ed      	addgt	r5, r5, r3
 8007306:	2600      	movs	r6, #0
 8007308:	341a      	adds	r4, #26
 800730a:	42b5      	cmp	r5, r6
 800730c:	d11a      	bne.n	8007344 <_printf_common+0xc8>
 800730e:	2000      	movs	r0, #0
 8007310:	e008      	b.n	8007324 <_printf_common+0xa8>
 8007312:	2301      	movs	r3, #1
 8007314:	4652      	mov	r2, sl
 8007316:	4649      	mov	r1, r9
 8007318:	4638      	mov	r0, r7
 800731a:	47c0      	blx	r8
 800731c:	3001      	adds	r0, #1
 800731e:	d103      	bne.n	8007328 <_printf_common+0xac>
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	3501      	adds	r5, #1
 800732a:	e7c6      	b.n	80072ba <_printf_common+0x3e>
 800732c:	18e1      	adds	r1, r4, r3
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	2030      	movs	r0, #48	; 0x30
 8007332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007336:	4422      	add	r2, r4
 8007338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800733c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007340:	3302      	adds	r3, #2
 8007342:	e7c7      	b.n	80072d4 <_printf_common+0x58>
 8007344:	2301      	movs	r3, #1
 8007346:	4622      	mov	r2, r4
 8007348:	4649      	mov	r1, r9
 800734a:	4638      	mov	r0, r7
 800734c:	47c0      	blx	r8
 800734e:	3001      	adds	r0, #1
 8007350:	d0e6      	beq.n	8007320 <_printf_common+0xa4>
 8007352:	3601      	adds	r6, #1
 8007354:	e7d9      	b.n	800730a <_printf_common+0x8e>
	...

08007358 <_printf_i>:
 8007358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	7e0f      	ldrb	r7, [r1, #24]
 800735e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007360:	2f78      	cmp	r7, #120	; 0x78
 8007362:	4691      	mov	r9, r2
 8007364:	4680      	mov	r8, r0
 8007366:	460c      	mov	r4, r1
 8007368:	469a      	mov	sl, r3
 800736a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800736e:	d807      	bhi.n	8007380 <_printf_i+0x28>
 8007370:	2f62      	cmp	r7, #98	; 0x62
 8007372:	d80a      	bhi.n	800738a <_printf_i+0x32>
 8007374:	2f00      	cmp	r7, #0
 8007376:	f000 80d8 	beq.w	800752a <_printf_i+0x1d2>
 800737a:	2f58      	cmp	r7, #88	; 0x58
 800737c:	f000 80a3 	beq.w	80074c6 <_printf_i+0x16e>
 8007380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007388:	e03a      	b.n	8007400 <_printf_i+0xa8>
 800738a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800738e:	2b15      	cmp	r3, #21
 8007390:	d8f6      	bhi.n	8007380 <_printf_i+0x28>
 8007392:	a101      	add	r1, pc, #4	; (adr r1, 8007398 <_printf_i+0x40>)
 8007394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007398:	080073f1 	.word	0x080073f1
 800739c:	08007405 	.word	0x08007405
 80073a0:	08007381 	.word	0x08007381
 80073a4:	08007381 	.word	0x08007381
 80073a8:	08007381 	.word	0x08007381
 80073ac:	08007381 	.word	0x08007381
 80073b0:	08007405 	.word	0x08007405
 80073b4:	08007381 	.word	0x08007381
 80073b8:	08007381 	.word	0x08007381
 80073bc:	08007381 	.word	0x08007381
 80073c0:	08007381 	.word	0x08007381
 80073c4:	08007511 	.word	0x08007511
 80073c8:	08007435 	.word	0x08007435
 80073cc:	080074f3 	.word	0x080074f3
 80073d0:	08007381 	.word	0x08007381
 80073d4:	08007381 	.word	0x08007381
 80073d8:	08007533 	.word	0x08007533
 80073dc:	08007381 	.word	0x08007381
 80073e0:	08007435 	.word	0x08007435
 80073e4:	08007381 	.word	0x08007381
 80073e8:	08007381 	.word	0x08007381
 80073ec:	080074fb 	.word	0x080074fb
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	1d1a      	adds	r2, r3, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	602a      	str	r2, [r5, #0]
 80073f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007400:	2301      	movs	r3, #1
 8007402:	e0a3      	b.n	800754c <_printf_i+0x1f4>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	6829      	ldr	r1, [r5, #0]
 8007408:	0606      	lsls	r6, r0, #24
 800740a:	f101 0304 	add.w	r3, r1, #4
 800740e:	d50a      	bpl.n	8007426 <_printf_i+0xce>
 8007410:	680e      	ldr	r6, [r1, #0]
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	2e00      	cmp	r6, #0
 8007416:	da03      	bge.n	8007420 <_printf_i+0xc8>
 8007418:	232d      	movs	r3, #45	; 0x2d
 800741a:	4276      	negs	r6, r6
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	485e      	ldr	r0, [pc, #376]	; (800759c <_printf_i+0x244>)
 8007422:	230a      	movs	r3, #10
 8007424:	e019      	b.n	800745a <_printf_i+0x102>
 8007426:	680e      	ldr	r6, [r1, #0]
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800742e:	bf18      	it	ne
 8007430:	b236      	sxthne	r6, r6
 8007432:	e7ef      	b.n	8007414 <_printf_i+0xbc>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	6820      	ldr	r0, [r4, #0]
 8007438:	1d19      	adds	r1, r3, #4
 800743a:	6029      	str	r1, [r5, #0]
 800743c:	0601      	lsls	r1, r0, #24
 800743e:	d501      	bpl.n	8007444 <_printf_i+0xec>
 8007440:	681e      	ldr	r6, [r3, #0]
 8007442:	e002      	b.n	800744a <_printf_i+0xf2>
 8007444:	0646      	lsls	r6, r0, #25
 8007446:	d5fb      	bpl.n	8007440 <_printf_i+0xe8>
 8007448:	881e      	ldrh	r6, [r3, #0]
 800744a:	4854      	ldr	r0, [pc, #336]	; (800759c <_printf_i+0x244>)
 800744c:	2f6f      	cmp	r7, #111	; 0x6f
 800744e:	bf0c      	ite	eq
 8007450:	2308      	moveq	r3, #8
 8007452:	230a      	movne	r3, #10
 8007454:	2100      	movs	r1, #0
 8007456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800745a:	6865      	ldr	r5, [r4, #4]
 800745c:	60a5      	str	r5, [r4, #8]
 800745e:	2d00      	cmp	r5, #0
 8007460:	bfa2      	ittt	ge
 8007462:	6821      	ldrge	r1, [r4, #0]
 8007464:	f021 0104 	bicge.w	r1, r1, #4
 8007468:	6021      	strge	r1, [r4, #0]
 800746a:	b90e      	cbnz	r6, 8007470 <_printf_i+0x118>
 800746c:	2d00      	cmp	r5, #0
 800746e:	d04d      	beq.n	800750c <_printf_i+0x1b4>
 8007470:	4615      	mov	r5, r2
 8007472:	fbb6 f1f3 	udiv	r1, r6, r3
 8007476:	fb03 6711 	mls	r7, r3, r1, r6
 800747a:	5dc7      	ldrb	r7, [r0, r7]
 800747c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007480:	4637      	mov	r7, r6
 8007482:	42bb      	cmp	r3, r7
 8007484:	460e      	mov	r6, r1
 8007486:	d9f4      	bls.n	8007472 <_printf_i+0x11a>
 8007488:	2b08      	cmp	r3, #8
 800748a:	d10b      	bne.n	80074a4 <_printf_i+0x14c>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	07de      	lsls	r6, r3, #31
 8007490:	d508      	bpl.n	80074a4 <_printf_i+0x14c>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	6861      	ldr	r1, [r4, #4]
 8007496:	4299      	cmp	r1, r3
 8007498:	bfde      	ittt	le
 800749a:	2330      	movle	r3, #48	; 0x30
 800749c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074a4:	1b52      	subs	r2, r2, r5
 80074a6:	6122      	str	r2, [r4, #16]
 80074a8:	f8cd a000 	str.w	sl, [sp]
 80074ac:	464b      	mov	r3, r9
 80074ae:	aa03      	add	r2, sp, #12
 80074b0:	4621      	mov	r1, r4
 80074b2:	4640      	mov	r0, r8
 80074b4:	f7ff fee2 	bl	800727c <_printf_common>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d14c      	bne.n	8007556 <_printf_i+0x1fe>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	b004      	add	sp, #16
 80074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c6:	4835      	ldr	r0, [pc, #212]	; (800759c <_printf_i+0x244>)
 80074c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074cc:	6829      	ldr	r1, [r5, #0]
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074d4:	6029      	str	r1, [r5, #0]
 80074d6:	061d      	lsls	r5, r3, #24
 80074d8:	d514      	bpl.n	8007504 <_printf_i+0x1ac>
 80074da:	07df      	lsls	r7, r3, #31
 80074dc:	bf44      	itt	mi
 80074de:	f043 0320 	orrmi.w	r3, r3, #32
 80074e2:	6023      	strmi	r3, [r4, #0]
 80074e4:	b91e      	cbnz	r6, 80074ee <_printf_i+0x196>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	f023 0320 	bic.w	r3, r3, #32
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	2310      	movs	r3, #16
 80074f0:	e7b0      	b.n	8007454 <_printf_i+0xfc>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	f043 0320 	orr.w	r3, r3, #32
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	2378      	movs	r3, #120	; 0x78
 80074fc:	4828      	ldr	r0, [pc, #160]	; (80075a0 <_printf_i+0x248>)
 80074fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007502:	e7e3      	b.n	80074cc <_printf_i+0x174>
 8007504:	0659      	lsls	r1, r3, #25
 8007506:	bf48      	it	mi
 8007508:	b2b6      	uxthmi	r6, r6
 800750a:	e7e6      	b.n	80074da <_printf_i+0x182>
 800750c:	4615      	mov	r5, r2
 800750e:	e7bb      	b.n	8007488 <_printf_i+0x130>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	6826      	ldr	r6, [r4, #0]
 8007514:	6961      	ldr	r1, [r4, #20]
 8007516:	1d18      	adds	r0, r3, #4
 8007518:	6028      	str	r0, [r5, #0]
 800751a:	0635      	lsls	r5, r6, #24
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	d501      	bpl.n	8007524 <_printf_i+0x1cc>
 8007520:	6019      	str	r1, [r3, #0]
 8007522:	e002      	b.n	800752a <_printf_i+0x1d2>
 8007524:	0670      	lsls	r0, r6, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0x1c8>
 8007528:	8019      	strh	r1, [r3, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	4615      	mov	r5, r2
 8007530:	e7ba      	b.n	80074a8 <_printf_i+0x150>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	1d1a      	adds	r2, r3, #4
 8007536:	602a      	str	r2, [r5, #0]
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	6862      	ldr	r2, [r4, #4]
 800753c:	2100      	movs	r1, #0
 800753e:	4628      	mov	r0, r5
 8007540:	f7f8 fe6e 	bl	8000220 <memchr>
 8007544:	b108      	cbz	r0, 800754a <_printf_i+0x1f2>
 8007546:	1b40      	subs	r0, r0, r5
 8007548:	6060      	str	r0, [r4, #4]
 800754a:	6863      	ldr	r3, [r4, #4]
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	2300      	movs	r3, #0
 8007550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007554:	e7a8      	b.n	80074a8 <_printf_i+0x150>
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	462a      	mov	r2, r5
 800755a:	4649      	mov	r1, r9
 800755c:	4640      	mov	r0, r8
 800755e:	47d0      	blx	sl
 8007560:	3001      	adds	r0, #1
 8007562:	d0ab      	beq.n	80074bc <_printf_i+0x164>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	079b      	lsls	r3, r3, #30
 8007568:	d413      	bmi.n	8007592 <_printf_i+0x23a>
 800756a:	68e0      	ldr	r0, [r4, #12]
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	4298      	cmp	r0, r3
 8007570:	bfb8      	it	lt
 8007572:	4618      	movlt	r0, r3
 8007574:	e7a4      	b.n	80074c0 <_printf_i+0x168>
 8007576:	2301      	movs	r3, #1
 8007578:	4632      	mov	r2, r6
 800757a:	4649      	mov	r1, r9
 800757c:	4640      	mov	r0, r8
 800757e:	47d0      	blx	sl
 8007580:	3001      	adds	r0, #1
 8007582:	d09b      	beq.n	80074bc <_printf_i+0x164>
 8007584:	3501      	adds	r5, #1
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	9903      	ldr	r1, [sp, #12]
 800758a:	1a5b      	subs	r3, r3, r1
 800758c:	42ab      	cmp	r3, r5
 800758e:	dcf2      	bgt.n	8007576 <_printf_i+0x21e>
 8007590:	e7eb      	b.n	800756a <_printf_i+0x212>
 8007592:	2500      	movs	r5, #0
 8007594:	f104 0619 	add.w	r6, r4, #25
 8007598:	e7f5      	b.n	8007586 <_printf_i+0x22e>
 800759a:	bf00      	nop
 800759c:	0800bf24 	.word	0x0800bf24
 80075a0:	0800bf35 	.word	0x0800bf35

080075a4 <_scanf_float>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	b087      	sub	sp, #28
 80075aa:	4617      	mov	r7, r2
 80075ac:	9303      	str	r3, [sp, #12]
 80075ae:	688b      	ldr	r3, [r1, #8]
 80075b0:	1e5a      	subs	r2, r3, #1
 80075b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075b6:	bf83      	ittte	hi
 80075b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075bc:	195b      	addhi	r3, r3, r5
 80075be:	9302      	strhi	r3, [sp, #8]
 80075c0:	2300      	movls	r3, #0
 80075c2:	bf86      	itte	hi
 80075c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075c8:	608b      	strhi	r3, [r1, #8]
 80075ca:	9302      	strls	r3, [sp, #8]
 80075cc:	680b      	ldr	r3, [r1, #0]
 80075ce:	468b      	mov	fp, r1
 80075d0:	2500      	movs	r5, #0
 80075d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80075da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075de:	4680      	mov	r8, r0
 80075e0:	460c      	mov	r4, r1
 80075e2:	465e      	mov	r6, fp
 80075e4:	46aa      	mov	sl, r5
 80075e6:	46a9      	mov	r9, r5
 80075e8:	9501      	str	r5, [sp, #4]
 80075ea:	68a2      	ldr	r2, [r4, #8]
 80075ec:	b152      	cbz	r2, 8007604 <_scanf_float+0x60>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2b4e      	cmp	r3, #78	; 0x4e
 80075f4:	d864      	bhi.n	80076c0 <_scanf_float+0x11c>
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d83c      	bhi.n	8007674 <_scanf_float+0xd0>
 80075fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075fe:	b2c8      	uxtb	r0, r1
 8007600:	280e      	cmp	r0, #14
 8007602:	d93a      	bls.n	800767a <_scanf_float+0xd6>
 8007604:	f1b9 0f00 	cmp.w	r9, #0
 8007608:	d003      	beq.n	8007612 <_scanf_float+0x6e>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007616:	f1ba 0f01 	cmp.w	sl, #1
 800761a:	f200 8113 	bhi.w	8007844 <_scanf_float+0x2a0>
 800761e:	455e      	cmp	r6, fp
 8007620:	f200 8105 	bhi.w	800782e <_scanf_float+0x28a>
 8007624:	2501      	movs	r5, #1
 8007626:	4628      	mov	r0, r5
 8007628:	b007      	add	sp, #28
 800762a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007632:	2a0d      	cmp	r2, #13
 8007634:	d8e6      	bhi.n	8007604 <_scanf_float+0x60>
 8007636:	a101      	add	r1, pc, #4	; (adr r1, 800763c <_scanf_float+0x98>)
 8007638:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800763c:	0800777b 	.word	0x0800777b
 8007640:	08007605 	.word	0x08007605
 8007644:	08007605 	.word	0x08007605
 8007648:	08007605 	.word	0x08007605
 800764c:	080077db 	.word	0x080077db
 8007650:	080077b3 	.word	0x080077b3
 8007654:	08007605 	.word	0x08007605
 8007658:	08007605 	.word	0x08007605
 800765c:	08007789 	.word	0x08007789
 8007660:	08007605 	.word	0x08007605
 8007664:	08007605 	.word	0x08007605
 8007668:	08007605 	.word	0x08007605
 800766c:	08007605 	.word	0x08007605
 8007670:	08007741 	.word	0x08007741
 8007674:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007678:	e7db      	b.n	8007632 <_scanf_float+0x8e>
 800767a:	290e      	cmp	r1, #14
 800767c:	d8c2      	bhi.n	8007604 <_scanf_float+0x60>
 800767e:	a001      	add	r0, pc, #4	; (adr r0, 8007684 <_scanf_float+0xe0>)
 8007680:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007684:	08007733 	.word	0x08007733
 8007688:	08007605 	.word	0x08007605
 800768c:	08007733 	.word	0x08007733
 8007690:	080077c7 	.word	0x080077c7
 8007694:	08007605 	.word	0x08007605
 8007698:	080076e1 	.word	0x080076e1
 800769c:	0800771d 	.word	0x0800771d
 80076a0:	0800771d 	.word	0x0800771d
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	0800771d 	.word	0x0800771d
 80076ac:	0800771d 	.word	0x0800771d
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	0800771d 	.word	0x0800771d
 80076bc:	0800771d 	.word	0x0800771d
 80076c0:	2b6e      	cmp	r3, #110	; 0x6e
 80076c2:	d809      	bhi.n	80076d8 <_scanf_float+0x134>
 80076c4:	2b60      	cmp	r3, #96	; 0x60
 80076c6:	d8b2      	bhi.n	800762e <_scanf_float+0x8a>
 80076c8:	2b54      	cmp	r3, #84	; 0x54
 80076ca:	d077      	beq.n	80077bc <_scanf_float+0x218>
 80076cc:	2b59      	cmp	r3, #89	; 0x59
 80076ce:	d199      	bne.n	8007604 <_scanf_float+0x60>
 80076d0:	2d07      	cmp	r5, #7
 80076d2:	d197      	bne.n	8007604 <_scanf_float+0x60>
 80076d4:	2508      	movs	r5, #8
 80076d6:	e029      	b.n	800772c <_scanf_float+0x188>
 80076d8:	2b74      	cmp	r3, #116	; 0x74
 80076da:	d06f      	beq.n	80077bc <_scanf_float+0x218>
 80076dc:	2b79      	cmp	r3, #121	; 0x79
 80076de:	e7f6      	b.n	80076ce <_scanf_float+0x12a>
 80076e0:	6821      	ldr	r1, [r4, #0]
 80076e2:	05c8      	lsls	r0, r1, #23
 80076e4:	d51a      	bpl.n	800771c <_scanf_float+0x178>
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076ec:	6021      	str	r1, [r4, #0]
 80076ee:	f109 0901 	add.w	r9, r9, #1
 80076f2:	b11b      	cbz	r3, 80076fc <_scanf_float+0x158>
 80076f4:	3b01      	subs	r3, #1
 80076f6:	3201      	adds	r2, #1
 80076f8:	9302      	str	r3, [sp, #8]
 80076fa:	60a2      	str	r2, [r4, #8]
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	3301      	adds	r3, #1
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3b01      	subs	r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	f340 8084 	ble.w	800781c <_scanf_float+0x278>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	603b      	str	r3, [r7, #0]
 800771a:	e766      	b.n	80075ea <_scanf_float+0x46>
 800771c:	eb1a 0f05 	cmn.w	sl, r5
 8007720:	f47f af70 	bne.w	8007604 <_scanf_float+0x60>
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	f806 3b01 	strb.w	r3, [r6], #1
 8007730:	e7e4      	b.n	80076fc <_scanf_float+0x158>
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	0610      	lsls	r0, r2, #24
 8007736:	f57f af65 	bpl.w	8007604 <_scanf_float+0x60>
 800773a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800773e:	e7f4      	b.n	800772a <_scanf_float+0x186>
 8007740:	f1ba 0f00 	cmp.w	sl, #0
 8007744:	d10e      	bne.n	8007764 <_scanf_float+0x1c0>
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	d10e      	bne.n	800776a <_scanf_float+0x1c6>
 800774c:	6822      	ldr	r2, [r4, #0]
 800774e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007752:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007756:	d108      	bne.n	800776a <_scanf_float+0x1c6>
 8007758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	f04f 0a01 	mov.w	sl, #1
 8007762:	e7e3      	b.n	800772c <_scanf_float+0x188>
 8007764:	f1ba 0f02 	cmp.w	sl, #2
 8007768:	d055      	beq.n	8007816 <_scanf_float+0x272>
 800776a:	2d01      	cmp	r5, #1
 800776c:	d002      	beq.n	8007774 <_scanf_float+0x1d0>
 800776e:	2d04      	cmp	r5, #4
 8007770:	f47f af48 	bne.w	8007604 <_scanf_float+0x60>
 8007774:	3501      	adds	r5, #1
 8007776:	b2ed      	uxtb	r5, r5
 8007778:	e7d8      	b.n	800772c <_scanf_float+0x188>
 800777a:	f1ba 0f01 	cmp.w	sl, #1
 800777e:	f47f af41 	bne.w	8007604 <_scanf_float+0x60>
 8007782:	f04f 0a02 	mov.w	sl, #2
 8007786:	e7d1      	b.n	800772c <_scanf_float+0x188>
 8007788:	b97d      	cbnz	r5, 80077aa <_scanf_float+0x206>
 800778a:	f1b9 0f00 	cmp.w	r9, #0
 800778e:	f47f af3c 	bne.w	800760a <_scanf_float+0x66>
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007798:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800779c:	f47f af39 	bne.w	8007612 <_scanf_float+0x6e>
 80077a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	2501      	movs	r5, #1
 80077a8:	e7c0      	b.n	800772c <_scanf_float+0x188>
 80077aa:	2d03      	cmp	r5, #3
 80077ac:	d0e2      	beq.n	8007774 <_scanf_float+0x1d0>
 80077ae:	2d05      	cmp	r5, #5
 80077b0:	e7de      	b.n	8007770 <_scanf_float+0x1cc>
 80077b2:	2d02      	cmp	r5, #2
 80077b4:	f47f af26 	bne.w	8007604 <_scanf_float+0x60>
 80077b8:	2503      	movs	r5, #3
 80077ba:	e7b7      	b.n	800772c <_scanf_float+0x188>
 80077bc:	2d06      	cmp	r5, #6
 80077be:	f47f af21 	bne.w	8007604 <_scanf_float+0x60>
 80077c2:	2507      	movs	r5, #7
 80077c4:	e7b2      	b.n	800772c <_scanf_float+0x188>
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	0591      	lsls	r1, r2, #22
 80077ca:	f57f af1b 	bpl.w	8007604 <_scanf_float+0x60>
 80077ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077d2:	6022      	str	r2, [r4, #0]
 80077d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80077d8:	e7a8      	b.n	800772c <_scanf_float+0x188>
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077e4:	d006      	beq.n	80077f4 <_scanf_float+0x250>
 80077e6:	0550      	lsls	r0, r2, #21
 80077e8:	f57f af0c 	bpl.w	8007604 <_scanf_float+0x60>
 80077ec:	f1b9 0f00 	cmp.w	r9, #0
 80077f0:	f43f af0f 	beq.w	8007612 <_scanf_float+0x6e>
 80077f4:	0591      	lsls	r1, r2, #22
 80077f6:	bf58      	it	pl
 80077f8:	9901      	ldrpl	r1, [sp, #4]
 80077fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077fe:	bf58      	it	pl
 8007800:	eba9 0101 	subpl.w	r1, r9, r1
 8007804:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007808:	bf58      	it	pl
 800780a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800780e:	6022      	str	r2, [r4, #0]
 8007810:	f04f 0900 	mov.w	r9, #0
 8007814:	e78a      	b.n	800772c <_scanf_float+0x188>
 8007816:	f04f 0a03 	mov.w	sl, #3
 800781a:	e787      	b.n	800772c <_scanf_float+0x188>
 800781c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007820:	4639      	mov	r1, r7
 8007822:	4640      	mov	r0, r8
 8007824:	4798      	blx	r3
 8007826:	2800      	cmp	r0, #0
 8007828:	f43f aedf 	beq.w	80075ea <_scanf_float+0x46>
 800782c:	e6ea      	b.n	8007604 <_scanf_float+0x60>
 800782e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007836:	463a      	mov	r2, r7
 8007838:	4640      	mov	r0, r8
 800783a:	4798      	blx	r3
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	3b01      	subs	r3, #1
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	e6ec      	b.n	800761e <_scanf_float+0x7a>
 8007844:	1e6b      	subs	r3, r5, #1
 8007846:	2b06      	cmp	r3, #6
 8007848:	d825      	bhi.n	8007896 <_scanf_float+0x2f2>
 800784a:	2d02      	cmp	r5, #2
 800784c:	d836      	bhi.n	80078bc <_scanf_float+0x318>
 800784e:	455e      	cmp	r6, fp
 8007850:	f67f aee8 	bls.w	8007624 <_scanf_float+0x80>
 8007854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007858:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800785c:	463a      	mov	r2, r7
 800785e:	4640      	mov	r0, r8
 8007860:	4798      	blx	r3
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	3b01      	subs	r3, #1
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	e7f1      	b.n	800784e <_scanf_float+0x2aa>
 800786a:	9802      	ldr	r0, [sp, #8]
 800786c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007870:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007874:	9002      	str	r0, [sp, #8]
 8007876:	463a      	mov	r2, r7
 8007878:	4640      	mov	r0, r8
 800787a:	4798      	blx	r3
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	3b01      	subs	r3, #1
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007886:	fa5f fa8a 	uxtb.w	sl, sl
 800788a:	f1ba 0f02 	cmp.w	sl, #2
 800788e:	d1ec      	bne.n	800786a <_scanf_float+0x2c6>
 8007890:	3d03      	subs	r5, #3
 8007892:	b2ed      	uxtb	r5, r5
 8007894:	1b76      	subs	r6, r6, r5
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	05da      	lsls	r2, r3, #23
 800789a:	d52f      	bpl.n	80078fc <_scanf_float+0x358>
 800789c:	055b      	lsls	r3, r3, #21
 800789e:	d510      	bpl.n	80078c2 <_scanf_float+0x31e>
 80078a0:	455e      	cmp	r6, fp
 80078a2:	f67f aebf 	bls.w	8007624 <_scanf_float+0x80>
 80078a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ae:	463a      	mov	r2, r7
 80078b0:	4640      	mov	r0, r8
 80078b2:	4798      	blx	r3
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	e7f1      	b.n	80078a0 <_scanf_float+0x2fc>
 80078bc:	46aa      	mov	sl, r5
 80078be:	9602      	str	r6, [sp, #8]
 80078c0:	e7df      	b.n	8007882 <_scanf_float+0x2de>
 80078c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	2965      	cmp	r1, #101	; 0x65
 80078ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	d00c      	beq.n	80078f0 <_scanf_float+0x34c>
 80078d6:	2945      	cmp	r1, #69	; 0x45
 80078d8:	d00a      	beq.n	80078f0 <_scanf_float+0x34c>
 80078da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078de:	463a      	mov	r2, r7
 80078e0:	4640      	mov	r0, r8
 80078e2:	4798      	blx	r3
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	1eb5      	subs	r5, r6, #2
 80078ee:	6123      	str	r3, [r4, #16]
 80078f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078f4:	463a      	mov	r2, r7
 80078f6:	4640      	mov	r0, r8
 80078f8:	4798      	blx	r3
 80078fa:	462e      	mov	r6, r5
 80078fc:	6825      	ldr	r5, [r4, #0]
 80078fe:	f015 0510 	ands.w	r5, r5, #16
 8007902:	d159      	bne.n	80079b8 <_scanf_float+0x414>
 8007904:	7035      	strb	r5, [r6, #0]
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800790c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007910:	d11b      	bne.n	800794a <_scanf_float+0x3a6>
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	454b      	cmp	r3, r9
 8007916:	eba3 0209 	sub.w	r2, r3, r9
 800791a:	d123      	bne.n	8007964 <_scanf_float+0x3c0>
 800791c:	2200      	movs	r2, #0
 800791e:	4659      	mov	r1, fp
 8007920:	4640      	mov	r0, r8
 8007922:	f000 ff1f 	bl	8008764 <_strtod_r>
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	f012 0f02 	tst.w	r2, #2
 800792e:	ec57 6b10 	vmov	r6, r7, d0
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	d021      	beq.n	800797a <_scanf_float+0x3d6>
 8007936:	9903      	ldr	r1, [sp, #12]
 8007938:	1d1a      	adds	r2, r3, #4
 800793a:	600a      	str	r2, [r1, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	e9c3 6700 	strd	r6, r7, [r3]
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60e3      	str	r3, [r4, #12]
 8007948:	e66d      	b.n	8007626 <_scanf_float+0x82>
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0e5      	beq.n	800791c <_scanf_float+0x378>
 8007950:	9905      	ldr	r1, [sp, #20]
 8007952:	230a      	movs	r3, #10
 8007954:	462a      	mov	r2, r5
 8007956:	3101      	adds	r1, #1
 8007958:	4640      	mov	r0, r8
 800795a:	f000 ff8b 	bl	8008874 <_strtol_r>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	9e05      	ldr	r6, [sp, #20]
 8007962:	1ac2      	subs	r2, r0, r3
 8007964:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007968:	429e      	cmp	r6, r3
 800796a:	bf28      	it	cs
 800796c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007970:	4912      	ldr	r1, [pc, #72]	; (80079bc <_scanf_float+0x418>)
 8007972:	4630      	mov	r0, r6
 8007974:	f000 f82c 	bl	80079d0 <siprintf>
 8007978:	e7d0      	b.n	800791c <_scanf_float+0x378>
 800797a:	9903      	ldr	r1, [sp, #12]
 800797c:	f012 0f04 	tst.w	r2, #4
 8007980:	f103 0204 	add.w	r2, r3, #4
 8007984:	600a      	str	r2, [r1, #0]
 8007986:	d1d9      	bne.n	800793c <_scanf_float+0x398>
 8007988:	f8d3 8000 	ldr.w	r8, [r3]
 800798c:	ee10 2a10 	vmov	r2, s0
 8007990:	ee10 0a10 	vmov	r0, s0
 8007994:	463b      	mov	r3, r7
 8007996:	4639      	mov	r1, r7
 8007998:	f7f9 f8e8 	bl	8000b6c <__aeabi_dcmpun>
 800799c:	b128      	cbz	r0, 80079aa <_scanf_float+0x406>
 800799e:	4808      	ldr	r0, [pc, #32]	; (80079c0 <_scanf_float+0x41c>)
 80079a0:	f000 f810 	bl	80079c4 <nanf>
 80079a4:	ed88 0a00 	vstr	s0, [r8]
 80079a8:	e7cb      	b.n	8007942 <_scanf_float+0x39e>
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f9 f93b 	bl	8000c28 <__aeabi_d2f>
 80079b2:	f8c8 0000 	str.w	r0, [r8]
 80079b6:	e7c4      	b.n	8007942 <_scanf_float+0x39e>
 80079b8:	2500      	movs	r5, #0
 80079ba:	e634      	b.n	8007626 <_scanf_float+0x82>
 80079bc:	0800bf46 	.word	0x0800bf46
 80079c0:	0800c36b 	.word	0x0800c36b

080079c4 <nanf>:
 80079c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079cc <nanf+0x8>
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	7fc00000 	.word	0x7fc00000

080079d0 <siprintf>:
 80079d0:	b40e      	push	{r1, r2, r3}
 80079d2:	b500      	push	{lr}
 80079d4:	b09c      	sub	sp, #112	; 0x70
 80079d6:	ab1d      	add	r3, sp, #116	; 0x74
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	9006      	str	r0, [sp, #24]
 80079dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079e0:	4809      	ldr	r0, [pc, #36]	; (8007a08 <siprintf+0x38>)
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	9104      	str	r1, [sp, #16]
 80079e6:	4909      	ldr	r1, [pc, #36]	; (8007a0c <siprintf+0x3c>)
 80079e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ec:	9105      	str	r1, [sp, #20]
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	a902      	add	r1, sp, #8
 80079f4:	f002 ffa0 	bl	800a938 <_svfiprintf_r>
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	b01c      	add	sp, #112	; 0x70
 8007a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a04:	b003      	add	sp, #12
 8007a06:	4770      	bx	lr
 8007a08:	2000000c 	.word	0x2000000c
 8007a0c:	ffff0208 	.word	0xffff0208

08007a10 <siscanf>:
 8007a10:	b40e      	push	{r1, r2, r3}
 8007a12:	b510      	push	{r4, lr}
 8007a14:	b09f      	sub	sp, #124	; 0x7c
 8007a16:	ac21      	add	r4, sp, #132	; 0x84
 8007a18:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007a1c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a20:	9201      	str	r2, [sp, #4]
 8007a22:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007a26:	9004      	str	r0, [sp, #16]
 8007a28:	9008      	str	r0, [sp, #32]
 8007a2a:	f7f8 fbf1 	bl	8000210 <strlen>
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <siscanf+0x50>)
 8007a30:	9005      	str	r0, [sp, #20]
 8007a32:	9009      	str	r0, [sp, #36]	; 0x24
 8007a34:	930d      	str	r3, [sp, #52]	; 0x34
 8007a36:	480b      	ldr	r0, [pc, #44]	; (8007a64 <siscanf+0x54>)
 8007a38:	9a01      	ldr	r2, [sp, #4]
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	9403      	str	r4, [sp, #12]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9311      	str	r3, [sp, #68]	; 0x44
 8007a42:	9316      	str	r3, [sp, #88]	; 0x58
 8007a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4623      	mov	r3, r4
 8007a50:	f003 f8cc 	bl	800abec <__ssvfiscanf_r>
 8007a54:	b01f      	add	sp, #124	; 0x7c
 8007a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5a:	b003      	add	sp, #12
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	08007a8b 	.word	0x08007a8b
 8007a64:	2000000c 	.word	0x2000000c

08007a68 <__sread>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	f003 fb86 	bl	800b180 <_read_r>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	bfab      	itete	ge
 8007a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a7c:	181b      	addge	r3, r3, r0
 8007a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a82:	bfac      	ite	ge
 8007a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a86:	81a3      	strhlt	r3, [r4, #12]
 8007a88:	bd10      	pop	{r4, pc}

08007a8a <__seofread>:
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	4770      	bx	lr

08007a8e <__swrite>:
 8007a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	461f      	mov	r7, r3
 8007a94:	898b      	ldrh	r3, [r1, #12]
 8007a96:	05db      	lsls	r3, r3, #23
 8007a98:	4605      	mov	r5, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	d505      	bpl.n	8007aac <__swrite+0x1e>
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f002 f8f8 	bl	8009c9c <_lseek_r>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	4632      	mov	r2, r6
 8007aba:	463b      	mov	r3, r7
 8007abc:	4628      	mov	r0, r5
 8007abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	f000 bed9 	b.w	8008878 <_write_r>

08007ac6 <__sseek>:
 8007ac6:	b510      	push	{r4, lr}
 8007ac8:	460c      	mov	r4, r1
 8007aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ace:	f002 f8e5 	bl	8009c9c <_lseek_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	bf15      	itete	ne
 8007ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ae2:	81a3      	strheq	r3, [r4, #12]
 8007ae4:	bf18      	it	ne
 8007ae6:	81a3      	strhne	r3, [r4, #12]
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <__sclose>:
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 bed5 	b.w	800889c <_close_r>

08007af2 <strncmp>:
 8007af2:	b510      	push	{r4, lr}
 8007af4:	b17a      	cbz	r2, 8007b16 <strncmp+0x24>
 8007af6:	4603      	mov	r3, r0
 8007af8:	3901      	subs	r1, #1
 8007afa:	1884      	adds	r4, r0, r2
 8007afc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b04:	4290      	cmp	r0, r2
 8007b06:	d101      	bne.n	8007b0c <strncmp+0x1a>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d101      	bne.n	8007b10 <strncmp+0x1e>
 8007b0c:	1a80      	subs	r0, r0, r2
 8007b0e:	bd10      	pop	{r4, pc}
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d1f3      	bne.n	8007afc <strncmp+0xa>
 8007b14:	e7fa      	b.n	8007b0c <strncmp+0x1a>
 8007b16:	4610      	mov	r0, r2
 8007b18:	e7f9      	b.n	8007b0e <strncmp+0x1c>

08007b1a <sulp>:
 8007b1a:	b570      	push	{r4, r5, r6, lr}
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	ec45 4b10 	vmov	d0, r4, r5
 8007b24:	4616      	mov	r6, r2
 8007b26:	f002 fc65 	bl	800a3f4 <__ulp>
 8007b2a:	ec51 0b10 	vmov	r0, r1, d0
 8007b2e:	b17e      	cbz	r6, 8007b50 <sulp+0x36>
 8007b30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	dd09      	ble.n	8007b50 <sulp+0x36>
 8007b3c:	051b      	lsls	r3, r3, #20
 8007b3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b42:	2400      	movs	r4, #0
 8007b44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	f7f8 fd74 	bl	8000638 <__aeabi_dmul>
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	0000      	movs	r0, r0
 8007b54:	0000      	movs	r0, r0
	...

08007b58 <_strtod_l>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	ed2d 8b02 	vpush	{d8}
 8007b60:	b09d      	sub	sp, #116	; 0x74
 8007b62:	461f      	mov	r7, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	9318      	str	r3, [sp, #96]	; 0x60
 8007b68:	4ba2      	ldr	r3, [pc, #648]	; (8007df4 <_strtod_l+0x29c>)
 8007b6a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	4604      	mov	r4, r0
 8007b72:	4618      	mov	r0, r3
 8007b74:	4688      	mov	r8, r1
 8007b76:	f7f8 fb4b 	bl	8000210 <strlen>
 8007b7a:	f04f 0a00 	mov.w	sl, #0
 8007b7e:	4605      	mov	r5, r0
 8007b80:	f04f 0b00 	mov.w	fp, #0
 8007b84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	2a2b      	cmp	r2, #43	; 0x2b
 8007b8e:	d04e      	beq.n	8007c2e <_strtod_l+0xd6>
 8007b90:	d83b      	bhi.n	8007c0a <_strtod_l+0xb2>
 8007b92:	2a0d      	cmp	r2, #13
 8007b94:	d834      	bhi.n	8007c00 <_strtod_l+0xa8>
 8007b96:	2a08      	cmp	r2, #8
 8007b98:	d834      	bhi.n	8007c04 <_strtod_l+0xac>
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d03e      	beq.n	8007c1c <_strtod_l+0xc4>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007ba4:	7833      	ldrb	r3, [r6, #0]
 8007ba6:	2b30      	cmp	r3, #48	; 0x30
 8007ba8:	f040 80b0 	bne.w	8007d0c <_strtod_l+0x1b4>
 8007bac:	7873      	ldrb	r3, [r6, #1]
 8007bae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bb2:	2b58      	cmp	r3, #88	; 0x58
 8007bb4:	d168      	bne.n	8007c88 <_strtod_l+0x130>
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	ab18      	add	r3, sp, #96	; 0x60
 8007bbc:	9702      	str	r7, [sp, #8]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4a8d      	ldr	r2, [pc, #564]	; (8007df8 <_strtod_l+0x2a0>)
 8007bc2:	ab19      	add	r3, sp, #100	; 0x64
 8007bc4:	a917      	add	r1, sp, #92	; 0x5c
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f001 fd5c 	bl	8009684 <__gethex>
 8007bcc:	f010 0707 	ands.w	r7, r0, #7
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	d005      	beq.n	8007be0 <_strtod_l+0x88>
 8007bd4:	2f06      	cmp	r7, #6
 8007bd6:	d12c      	bne.n	8007c32 <_strtod_l+0xda>
 8007bd8:	3601      	adds	r6, #1
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9617      	str	r6, [sp, #92]	; 0x5c
 8007bde:	930a      	str	r3, [sp, #40]	; 0x28
 8007be0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 8590 	bne.w	8008708 <_strtod_l+0xbb0>
 8007be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bea:	b1eb      	cbz	r3, 8007c28 <_strtod_l+0xd0>
 8007bec:	4652      	mov	r2, sl
 8007bee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bf2:	ec43 2b10 	vmov	d0, r2, r3
 8007bf6:	b01d      	add	sp, #116	; 0x74
 8007bf8:	ecbd 8b02 	vpop	{d8}
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	2a20      	cmp	r2, #32
 8007c02:	d1cc      	bne.n	8007b9e <_strtod_l+0x46>
 8007c04:	3301      	adds	r3, #1
 8007c06:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c08:	e7be      	b.n	8007b88 <_strtod_l+0x30>
 8007c0a:	2a2d      	cmp	r2, #45	; 0x2d
 8007c0c:	d1c7      	bne.n	8007b9e <_strtod_l+0x46>
 8007c0e:	2201      	movs	r2, #1
 8007c10:	920a      	str	r2, [sp, #40]	; 0x28
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1c2      	bne.n	8007ba2 <_strtod_l+0x4a>
 8007c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 856e 	bne.w	8008704 <_strtod_l+0xbac>
 8007c28:	4652      	mov	r2, sl
 8007c2a:	465b      	mov	r3, fp
 8007c2c:	e7e1      	b.n	8007bf2 <_strtod_l+0x9a>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	e7ee      	b.n	8007c10 <_strtod_l+0xb8>
 8007c32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c34:	b13a      	cbz	r2, 8007c46 <_strtod_l+0xee>
 8007c36:	2135      	movs	r1, #53	; 0x35
 8007c38:	a81a      	add	r0, sp, #104	; 0x68
 8007c3a:	f002 fce6 	bl	800a60a <__copybits>
 8007c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c40:	4620      	mov	r0, r4
 8007c42:	f002 f8a5 	bl	8009d90 <_Bfree>
 8007c46:	3f01      	subs	r7, #1
 8007c48:	2f04      	cmp	r7, #4
 8007c4a:	d806      	bhi.n	8007c5a <_strtod_l+0x102>
 8007c4c:	e8df f007 	tbb	[pc, r7]
 8007c50:	1714030a 	.word	0x1714030a
 8007c54:	0a          	.byte	0x0a
 8007c55:	00          	.byte	0x00
 8007c56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007c5a:	0728      	lsls	r0, r5, #28
 8007c5c:	d5c0      	bpl.n	8007be0 <_strtod_l+0x88>
 8007c5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c62:	e7bd      	b.n	8007be0 <_strtod_l+0x88>
 8007c64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007c68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c76:	e7f0      	b.n	8007c5a <_strtod_l+0x102>
 8007c78:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007dfc <_strtod_l+0x2a4>
 8007c7c:	e7ed      	b.n	8007c5a <_strtod_l+0x102>
 8007c7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007c82:	f04f 3aff 	mov.w	sl, #4294967295
 8007c86:	e7e8      	b.n	8007c5a <_strtod_l+0x102>
 8007c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b30      	cmp	r3, #48	; 0x30
 8007c92:	d0f9      	beq.n	8007c88 <_strtod_l+0x130>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0a3      	beq.n	8007be0 <_strtod_l+0x88>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f04f 0900 	mov.w	r9, #0
 8007c9e:	9304      	str	r3, [sp, #16]
 8007ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ca8:	464f      	mov	r7, r9
 8007caa:	220a      	movs	r2, #10
 8007cac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007cae:	7806      	ldrb	r6, [r0, #0]
 8007cb0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007cb4:	b2d9      	uxtb	r1, r3
 8007cb6:	2909      	cmp	r1, #9
 8007cb8:	d92a      	bls.n	8007d10 <_strtod_l+0x1b8>
 8007cba:	9905      	ldr	r1, [sp, #20]
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	f7ff ff18 	bl	8007af2 <strncmp>
 8007cc2:	b398      	cbz	r0, 8007d2c <_strtod_l+0x1d4>
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	463d      	mov	r5, r7
 8007cca:	9005      	str	r0, [sp, #20]
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2a65      	cmp	r2, #101	; 0x65
 8007cd0:	d001      	beq.n	8007cd6 <_strtod_l+0x17e>
 8007cd2:	2a45      	cmp	r2, #69	; 0x45
 8007cd4:	d118      	bne.n	8007d08 <_strtod_l+0x1b0>
 8007cd6:	b91d      	cbnz	r5, 8007ce0 <_strtod_l+0x188>
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	4302      	orrs	r2, r0
 8007cdc:	d09e      	beq.n	8007c1c <_strtod_l+0xc4>
 8007cde:	2500      	movs	r5, #0
 8007ce0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007ce4:	f108 0201 	add.w	r2, r8, #1
 8007ce8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007cee:	2a2b      	cmp	r2, #43	; 0x2b
 8007cf0:	d075      	beq.n	8007dde <_strtod_l+0x286>
 8007cf2:	2a2d      	cmp	r2, #45	; 0x2d
 8007cf4:	d07b      	beq.n	8007dee <_strtod_l+0x296>
 8007cf6:	f04f 0c00 	mov.w	ip, #0
 8007cfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007cfe:	2909      	cmp	r1, #9
 8007d00:	f240 8082 	bls.w	8007e08 <_strtod_l+0x2b0>
 8007d04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d08:	2600      	movs	r6, #0
 8007d0a:	e09d      	b.n	8007e48 <_strtod_l+0x2f0>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e7c4      	b.n	8007c9a <_strtod_l+0x142>
 8007d10:	2f08      	cmp	r7, #8
 8007d12:	bfd8      	it	le
 8007d14:	9907      	ldrle	r1, [sp, #28]
 8007d16:	f100 0001 	add.w	r0, r0, #1
 8007d1a:	bfda      	itte	le
 8007d1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d20:	9307      	strle	r3, [sp, #28]
 8007d22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007d26:	3701      	adds	r7, #1
 8007d28:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d2a:	e7bf      	b.n	8007cac <_strtod_l+0x154>
 8007d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d2e:	195a      	adds	r2, r3, r5
 8007d30:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d32:	5d5a      	ldrb	r2, [r3, r5]
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	d037      	beq.n	8007da8 <_strtod_l+0x250>
 8007d38:	9005      	str	r0, [sp, #20]
 8007d3a:	463d      	mov	r5, r7
 8007d3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d40:	2b09      	cmp	r3, #9
 8007d42:	d912      	bls.n	8007d6a <_strtod_l+0x212>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7c2      	b.n	8007cce <_strtod_l+0x176>
 8007d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d4e:	785a      	ldrb	r2, [r3, #1]
 8007d50:	3001      	adds	r0, #1
 8007d52:	2a30      	cmp	r2, #48	; 0x30
 8007d54:	d0f8      	beq.n	8007d48 <_strtod_l+0x1f0>
 8007d56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	f200 84d9 	bhi.w	8008712 <_strtod_l+0xbba>
 8007d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d62:	9005      	str	r0, [sp, #20]
 8007d64:	2000      	movs	r0, #0
 8007d66:	9308      	str	r3, [sp, #32]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	3a30      	subs	r2, #48	; 0x30
 8007d6c:	f100 0301 	add.w	r3, r0, #1
 8007d70:	d014      	beq.n	8007d9c <_strtod_l+0x244>
 8007d72:	9905      	ldr	r1, [sp, #20]
 8007d74:	4419      	add	r1, r3
 8007d76:	9105      	str	r1, [sp, #20]
 8007d78:	462b      	mov	r3, r5
 8007d7a:	eb00 0e05 	add.w	lr, r0, r5
 8007d7e:	210a      	movs	r1, #10
 8007d80:	4573      	cmp	r3, lr
 8007d82:	d113      	bne.n	8007dac <_strtod_l+0x254>
 8007d84:	182b      	adds	r3, r5, r0
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	f105 0501 	add.w	r5, r5, #1
 8007d8c:	4405      	add	r5, r0
 8007d8e:	dc1c      	bgt.n	8007dca <_strtod_l+0x272>
 8007d90:	9907      	ldr	r1, [sp, #28]
 8007d92:	230a      	movs	r3, #10
 8007d94:	fb03 2301 	mla	r3, r3, r1, r2
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d9e:	1c51      	adds	r1, r2, #1
 8007da0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007da2:	7852      	ldrb	r2, [r2, #1]
 8007da4:	4618      	mov	r0, r3
 8007da6:	e7c9      	b.n	8007d3c <_strtod_l+0x1e4>
 8007da8:	4638      	mov	r0, r7
 8007daa:	e7d2      	b.n	8007d52 <_strtod_l+0x1fa>
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	dc04      	bgt.n	8007dba <_strtod_l+0x262>
 8007db0:	9e07      	ldr	r6, [sp, #28]
 8007db2:	434e      	muls	r6, r1
 8007db4:	9607      	str	r6, [sp, #28]
 8007db6:	3301      	adds	r3, #1
 8007db8:	e7e2      	b.n	8007d80 <_strtod_l+0x228>
 8007dba:	f103 0c01 	add.w	ip, r3, #1
 8007dbe:	f1bc 0f10 	cmp.w	ip, #16
 8007dc2:	bfd8      	it	le
 8007dc4:	fb01 f909 	mulle.w	r9, r1, r9
 8007dc8:	e7f5      	b.n	8007db6 <_strtod_l+0x25e>
 8007dca:	2d10      	cmp	r5, #16
 8007dcc:	bfdc      	itt	le
 8007dce:	230a      	movle	r3, #10
 8007dd0:	fb03 2909 	mlale	r9, r3, r9, r2
 8007dd4:	e7e1      	b.n	8007d9a <_strtod_l+0x242>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9305      	str	r3, [sp, #20]
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e77c      	b.n	8007cd8 <_strtod_l+0x180>
 8007dde:	f04f 0c00 	mov.w	ip, #0
 8007de2:	f108 0202 	add.w	r2, r8, #2
 8007de6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007de8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007dec:	e785      	b.n	8007cfa <_strtod_l+0x1a2>
 8007dee:	f04f 0c01 	mov.w	ip, #1
 8007df2:	e7f6      	b.n	8007de2 <_strtod_l+0x28a>
 8007df4:	0800c198 	.word	0x0800c198
 8007df8:	0800bf4c 	.word	0x0800bf4c
 8007dfc:	7ff00000 	.word	0x7ff00000
 8007e00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e02:	1c51      	adds	r1, r2, #1
 8007e04:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e06:	7852      	ldrb	r2, [r2, #1]
 8007e08:	2a30      	cmp	r2, #48	; 0x30
 8007e0a:	d0f9      	beq.n	8007e00 <_strtod_l+0x2a8>
 8007e0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007e10:	2908      	cmp	r1, #8
 8007e12:	f63f af79 	bhi.w	8007d08 <_strtod_l+0x1b0>
 8007e16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e1c:	9206      	str	r2, [sp, #24]
 8007e1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e20:	1c51      	adds	r1, r2, #1
 8007e22:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e24:	7852      	ldrb	r2, [r2, #1]
 8007e26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007e2a:	2e09      	cmp	r6, #9
 8007e2c:	d937      	bls.n	8007e9e <_strtod_l+0x346>
 8007e2e:	9e06      	ldr	r6, [sp, #24]
 8007e30:	1b89      	subs	r1, r1, r6
 8007e32:	2908      	cmp	r1, #8
 8007e34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007e38:	dc02      	bgt.n	8007e40 <_strtod_l+0x2e8>
 8007e3a:	4576      	cmp	r6, lr
 8007e3c:	bfa8      	it	ge
 8007e3e:	4676      	movge	r6, lr
 8007e40:	f1bc 0f00 	cmp.w	ip, #0
 8007e44:	d000      	beq.n	8007e48 <_strtod_l+0x2f0>
 8007e46:	4276      	negs	r6, r6
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	d14d      	bne.n	8007ee8 <_strtod_l+0x390>
 8007e4c:	9904      	ldr	r1, [sp, #16]
 8007e4e:	4301      	orrs	r1, r0
 8007e50:	f47f aec6 	bne.w	8007be0 <_strtod_l+0x88>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f47f aee1 	bne.w	8007c1c <_strtod_l+0xc4>
 8007e5a:	2a69      	cmp	r2, #105	; 0x69
 8007e5c:	d027      	beq.n	8007eae <_strtod_l+0x356>
 8007e5e:	dc24      	bgt.n	8007eaa <_strtod_l+0x352>
 8007e60:	2a49      	cmp	r2, #73	; 0x49
 8007e62:	d024      	beq.n	8007eae <_strtod_l+0x356>
 8007e64:	2a4e      	cmp	r2, #78	; 0x4e
 8007e66:	f47f aed9 	bne.w	8007c1c <_strtod_l+0xc4>
 8007e6a:	499f      	ldr	r1, [pc, #636]	; (80080e8 <_strtod_l+0x590>)
 8007e6c:	a817      	add	r0, sp, #92	; 0x5c
 8007e6e:	f001 fe61 	bl	8009b34 <__match>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f43f aed2 	beq.w	8007c1c <_strtod_l+0xc4>
 8007e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b28      	cmp	r3, #40	; 0x28
 8007e7e:	d12d      	bne.n	8007edc <_strtod_l+0x384>
 8007e80:	499a      	ldr	r1, [pc, #616]	; (80080ec <_strtod_l+0x594>)
 8007e82:	aa1a      	add	r2, sp, #104	; 0x68
 8007e84:	a817      	add	r0, sp, #92	; 0x5c
 8007e86:	f001 fe69 	bl	8009b5c <__hexnan>
 8007e8a:	2805      	cmp	r0, #5
 8007e8c:	d126      	bne.n	8007edc <_strtod_l+0x384>
 8007e8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007e94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e9c:	e6a0      	b.n	8007be0 <_strtod_l+0x88>
 8007e9e:	210a      	movs	r1, #10
 8007ea0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007ea4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ea8:	e7b9      	b.n	8007e1e <_strtod_l+0x2c6>
 8007eaa:	2a6e      	cmp	r2, #110	; 0x6e
 8007eac:	e7db      	b.n	8007e66 <_strtod_l+0x30e>
 8007eae:	4990      	ldr	r1, [pc, #576]	; (80080f0 <_strtod_l+0x598>)
 8007eb0:	a817      	add	r0, sp, #92	; 0x5c
 8007eb2:	f001 fe3f 	bl	8009b34 <__match>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f43f aeb0 	beq.w	8007c1c <_strtod_l+0xc4>
 8007ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ebe:	498d      	ldr	r1, [pc, #564]	; (80080f4 <_strtod_l+0x59c>)
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	a817      	add	r0, sp, #92	; 0x5c
 8007ec4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ec6:	f001 fe35 	bl	8009b34 <__match>
 8007eca:	b910      	cbnz	r0, 8007ed2 <_strtod_l+0x37a>
 8007ecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ece:	3301      	adds	r3, #1
 8007ed0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ed2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008104 <_strtod_l+0x5ac>
 8007ed6:	f04f 0a00 	mov.w	sl, #0
 8007eda:	e681      	b.n	8007be0 <_strtod_l+0x88>
 8007edc:	4886      	ldr	r0, [pc, #536]	; (80080f8 <_strtod_l+0x5a0>)
 8007ede:	f003 f963 	bl	800b1a8 <nan>
 8007ee2:	ec5b ab10 	vmov	sl, fp, d0
 8007ee6:	e67b      	b.n	8007be0 <_strtod_l+0x88>
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	9807      	ldr	r0, [sp, #28]
 8007eec:	1af3      	subs	r3, r6, r3
 8007eee:	2f00      	cmp	r7, #0
 8007ef0:	bf08      	it	eq
 8007ef2:	462f      	moveq	r7, r5
 8007ef4:	2d10      	cmp	r5, #16
 8007ef6:	9306      	str	r3, [sp, #24]
 8007ef8:	46a8      	mov	r8, r5
 8007efa:	bfa8      	it	ge
 8007efc:	f04f 0810 	movge.w	r8, #16
 8007f00:	f7f8 fb20 	bl	8000544 <__aeabi_ui2d>
 8007f04:	2d09      	cmp	r5, #9
 8007f06:	4682      	mov	sl, r0
 8007f08:	468b      	mov	fp, r1
 8007f0a:	dd13      	ble.n	8007f34 <_strtod_l+0x3dc>
 8007f0c:	4b7b      	ldr	r3, [pc, #492]	; (80080fc <_strtod_l+0x5a4>)
 8007f0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f16:	f7f8 fb8f 	bl	8000638 <__aeabi_dmul>
 8007f1a:	4682      	mov	sl, r0
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	468b      	mov	fp, r1
 8007f20:	f7f8 fb10 	bl	8000544 <__aeabi_ui2d>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4650      	mov	r0, sl
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	f7f8 f9ce 	bl	80002cc <__adddf3>
 8007f30:	4682      	mov	sl, r0
 8007f32:	468b      	mov	fp, r1
 8007f34:	2d0f      	cmp	r5, #15
 8007f36:	dc38      	bgt.n	8007faa <_strtod_l+0x452>
 8007f38:	9b06      	ldr	r3, [sp, #24]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f43f ae50 	beq.w	8007be0 <_strtod_l+0x88>
 8007f40:	dd24      	ble.n	8007f8c <_strtod_l+0x434>
 8007f42:	2b16      	cmp	r3, #22
 8007f44:	dc0b      	bgt.n	8007f5e <_strtod_l+0x406>
 8007f46:	496d      	ldr	r1, [pc, #436]	; (80080fc <_strtod_l+0x5a4>)
 8007f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f50:	4652      	mov	r2, sl
 8007f52:	465b      	mov	r3, fp
 8007f54:	f7f8 fb70 	bl	8000638 <__aeabi_dmul>
 8007f58:	4682      	mov	sl, r0
 8007f5a:	468b      	mov	fp, r1
 8007f5c:	e640      	b.n	8007be0 <_strtod_l+0x88>
 8007f5e:	9a06      	ldr	r2, [sp, #24]
 8007f60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007f64:	4293      	cmp	r3, r2
 8007f66:	db20      	blt.n	8007faa <_strtod_l+0x452>
 8007f68:	4c64      	ldr	r4, [pc, #400]	; (80080fc <_strtod_l+0x5a4>)
 8007f6a:	f1c5 050f 	rsb	r5, r5, #15
 8007f6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f72:	4652      	mov	r2, sl
 8007f74:	465b      	mov	r3, fp
 8007f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7a:	f7f8 fb5d 	bl	8000638 <__aeabi_dmul>
 8007f7e:	9b06      	ldr	r3, [sp, #24]
 8007f80:	1b5d      	subs	r5, r3, r5
 8007f82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f8a:	e7e3      	b.n	8007f54 <_strtod_l+0x3fc>
 8007f8c:	9b06      	ldr	r3, [sp, #24]
 8007f8e:	3316      	adds	r3, #22
 8007f90:	db0b      	blt.n	8007faa <_strtod_l+0x452>
 8007f92:	9b05      	ldr	r3, [sp, #20]
 8007f94:	1b9e      	subs	r6, r3, r6
 8007f96:	4b59      	ldr	r3, [pc, #356]	; (80080fc <_strtod_l+0x5a4>)
 8007f98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007f9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	f7f8 fc72 	bl	800088c <__aeabi_ddiv>
 8007fa8:	e7d6      	b.n	8007f58 <_strtod_l+0x400>
 8007faa:	9b06      	ldr	r3, [sp, #24]
 8007fac:	eba5 0808 	sub.w	r8, r5, r8
 8007fb0:	4498      	add	r8, r3
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	dd74      	ble.n	80080a2 <_strtod_l+0x54a>
 8007fb8:	f018 030f 	ands.w	r3, r8, #15
 8007fbc:	d00a      	beq.n	8007fd4 <_strtod_l+0x47c>
 8007fbe:	494f      	ldr	r1, [pc, #316]	; (80080fc <_strtod_l+0x5a4>)
 8007fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	465b      	mov	r3, fp
 8007fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fcc:	f7f8 fb34 	bl	8000638 <__aeabi_dmul>
 8007fd0:	4682      	mov	sl, r0
 8007fd2:	468b      	mov	fp, r1
 8007fd4:	f038 080f 	bics.w	r8, r8, #15
 8007fd8:	d04f      	beq.n	800807a <_strtod_l+0x522>
 8007fda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007fde:	dd22      	ble.n	8008026 <_strtod_l+0x4ce>
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	462e      	mov	r6, r5
 8007fe4:	9507      	str	r5, [sp, #28]
 8007fe6:	9505      	str	r5, [sp, #20]
 8007fe8:	2322      	movs	r3, #34	; 0x22
 8007fea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008104 <_strtod_l+0x5ac>
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	f04f 0a00 	mov.w	sl, #0
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f43f adf2 	beq.w	8007be0 <_strtod_l+0x88>
 8007ffc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ffe:	4620      	mov	r0, r4
 8008000:	f001 fec6 	bl	8009d90 <_Bfree>
 8008004:	9905      	ldr	r1, [sp, #20]
 8008006:	4620      	mov	r0, r4
 8008008:	f001 fec2 	bl	8009d90 <_Bfree>
 800800c:	4631      	mov	r1, r6
 800800e:	4620      	mov	r0, r4
 8008010:	f001 febe 	bl	8009d90 <_Bfree>
 8008014:	9907      	ldr	r1, [sp, #28]
 8008016:	4620      	mov	r0, r4
 8008018:	f001 feba 	bl	8009d90 <_Bfree>
 800801c:	4629      	mov	r1, r5
 800801e:	4620      	mov	r0, r4
 8008020:	f001 feb6 	bl	8009d90 <_Bfree>
 8008024:	e5dc      	b.n	8007be0 <_strtod_l+0x88>
 8008026:	4b36      	ldr	r3, [pc, #216]	; (8008100 <_strtod_l+0x5a8>)
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	2300      	movs	r3, #0
 800802c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008030:	4650      	mov	r0, sl
 8008032:	4659      	mov	r1, fp
 8008034:	4699      	mov	r9, r3
 8008036:	f1b8 0f01 	cmp.w	r8, #1
 800803a:	dc21      	bgt.n	8008080 <_strtod_l+0x528>
 800803c:	b10b      	cbz	r3, 8008042 <_strtod_l+0x4ea>
 800803e:	4682      	mov	sl, r0
 8008040:	468b      	mov	fp, r1
 8008042:	4b2f      	ldr	r3, [pc, #188]	; (8008100 <_strtod_l+0x5a8>)
 8008044:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008048:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800804c:	4652      	mov	r2, sl
 800804e:	465b      	mov	r3, fp
 8008050:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008054:	f7f8 faf0 	bl	8000638 <__aeabi_dmul>
 8008058:	4b2a      	ldr	r3, [pc, #168]	; (8008104 <_strtod_l+0x5ac>)
 800805a:	460a      	mov	r2, r1
 800805c:	400b      	ands	r3, r1
 800805e:	492a      	ldr	r1, [pc, #168]	; (8008108 <_strtod_l+0x5b0>)
 8008060:	428b      	cmp	r3, r1
 8008062:	4682      	mov	sl, r0
 8008064:	d8bc      	bhi.n	8007fe0 <_strtod_l+0x488>
 8008066:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800806a:	428b      	cmp	r3, r1
 800806c:	bf86      	itte	hi
 800806e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800810c <_strtod_l+0x5b4>
 8008072:	f04f 3aff 	movhi.w	sl, #4294967295
 8008076:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800807a:	2300      	movs	r3, #0
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	e084      	b.n	800818a <_strtod_l+0x632>
 8008080:	f018 0f01 	tst.w	r8, #1
 8008084:	d005      	beq.n	8008092 <_strtod_l+0x53a>
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f7f8 fad4 	bl	8000638 <__aeabi_dmul>
 8008090:	2301      	movs	r3, #1
 8008092:	9a04      	ldr	r2, [sp, #16]
 8008094:	3208      	adds	r2, #8
 8008096:	f109 0901 	add.w	r9, r9, #1
 800809a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800809e:	9204      	str	r2, [sp, #16]
 80080a0:	e7c9      	b.n	8008036 <_strtod_l+0x4de>
 80080a2:	d0ea      	beq.n	800807a <_strtod_l+0x522>
 80080a4:	f1c8 0800 	rsb	r8, r8, #0
 80080a8:	f018 020f 	ands.w	r2, r8, #15
 80080ac:	d00a      	beq.n	80080c4 <_strtod_l+0x56c>
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <_strtod_l+0x5a4>)
 80080b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080b4:	4650      	mov	r0, sl
 80080b6:	4659      	mov	r1, fp
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 fbe6 	bl	800088c <__aeabi_ddiv>
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80080c8:	d0d7      	beq.n	800807a <_strtod_l+0x522>
 80080ca:	f1b8 0f1f 	cmp.w	r8, #31
 80080ce:	dd1f      	ble.n	8008110 <_strtod_l+0x5b8>
 80080d0:	2500      	movs	r5, #0
 80080d2:	462e      	mov	r6, r5
 80080d4:	9507      	str	r5, [sp, #28]
 80080d6:	9505      	str	r5, [sp, #20]
 80080d8:	2322      	movs	r3, #34	; 0x22
 80080da:	f04f 0a00 	mov.w	sl, #0
 80080de:	f04f 0b00 	mov.w	fp, #0
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	e786      	b.n	8007ff4 <_strtod_l+0x49c>
 80080e6:	bf00      	nop
 80080e8:	0800bf21 	.word	0x0800bf21
 80080ec:	0800bf60 	.word	0x0800bf60
 80080f0:	0800bf19 	.word	0x0800bf19
 80080f4:	0800c0a4 	.word	0x0800c0a4
 80080f8:	0800c36b 	.word	0x0800c36b
 80080fc:	0800c230 	.word	0x0800c230
 8008100:	0800c208 	.word	0x0800c208
 8008104:	7ff00000 	.word	0x7ff00000
 8008108:	7ca00000 	.word	0x7ca00000
 800810c:	7fefffff 	.word	0x7fefffff
 8008110:	f018 0310 	ands.w	r3, r8, #16
 8008114:	bf18      	it	ne
 8008116:	236a      	movne	r3, #106	; 0x6a
 8008118:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80084c8 <_strtod_l+0x970>
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	4650      	mov	r0, sl
 8008120:	4659      	mov	r1, fp
 8008122:	2300      	movs	r3, #0
 8008124:	f018 0f01 	tst.w	r8, #1
 8008128:	d004      	beq.n	8008134 <_strtod_l+0x5dc>
 800812a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800812e:	f7f8 fa83 	bl	8000638 <__aeabi_dmul>
 8008132:	2301      	movs	r3, #1
 8008134:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008138:	f109 0908 	add.w	r9, r9, #8
 800813c:	d1f2      	bne.n	8008124 <_strtod_l+0x5cc>
 800813e:	b10b      	cbz	r3, 8008144 <_strtod_l+0x5ec>
 8008140:	4682      	mov	sl, r0
 8008142:	468b      	mov	fp, r1
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	b1c3      	cbz	r3, 800817a <_strtod_l+0x622>
 8008148:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800814c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008150:	2b00      	cmp	r3, #0
 8008152:	4659      	mov	r1, fp
 8008154:	dd11      	ble.n	800817a <_strtod_l+0x622>
 8008156:	2b1f      	cmp	r3, #31
 8008158:	f340 8124 	ble.w	80083a4 <_strtod_l+0x84c>
 800815c:	2b34      	cmp	r3, #52	; 0x34
 800815e:	bfde      	ittt	le
 8008160:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008164:	f04f 33ff 	movle.w	r3, #4294967295
 8008168:	fa03 f202 	lslle.w	r2, r3, r2
 800816c:	f04f 0a00 	mov.w	sl, #0
 8008170:	bfcc      	ite	gt
 8008172:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008176:	ea02 0b01 	andle.w	fp, r2, r1
 800817a:	2200      	movs	r2, #0
 800817c:	2300      	movs	r3, #0
 800817e:	4650      	mov	r0, sl
 8008180:	4659      	mov	r1, fp
 8008182:	f7f8 fcc1 	bl	8000b08 <__aeabi_dcmpeq>
 8008186:	2800      	cmp	r0, #0
 8008188:	d1a2      	bne.n	80080d0 <_strtod_l+0x578>
 800818a:	9b07      	ldr	r3, [sp, #28]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	9908      	ldr	r1, [sp, #32]
 8008190:	462b      	mov	r3, r5
 8008192:	463a      	mov	r2, r7
 8008194:	4620      	mov	r0, r4
 8008196:	f001 fe63 	bl	8009e60 <__s2b>
 800819a:	9007      	str	r0, [sp, #28]
 800819c:	2800      	cmp	r0, #0
 800819e:	f43f af1f 	beq.w	8007fe0 <_strtod_l+0x488>
 80081a2:	9b05      	ldr	r3, [sp, #20]
 80081a4:	1b9e      	subs	r6, r3, r6
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bfb4      	ite	lt
 80081ac:	4633      	movlt	r3, r6
 80081ae:	2300      	movge	r3, #0
 80081b0:	930c      	str	r3, [sp, #48]	; 0x30
 80081b2:	9b06      	ldr	r3, [sp, #24]
 80081b4:	2500      	movs	r5, #0
 80081b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081ba:	9312      	str	r3, [sp, #72]	; 0x48
 80081bc:	462e      	mov	r6, r5
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	4620      	mov	r0, r4
 80081c2:	6859      	ldr	r1, [r3, #4]
 80081c4:	f001 fda4 	bl	8009d10 <_Balloc>
 80081c8:	9005      	str	r0, [sp, #20]
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f43f af0c 	beq.w	8007fe8 <_strtod_l+0x490>
 80081d0:	9b07      	ldr	r3, [sp, #28]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	3202      	adds	r2, #2
 80081d6:	f103 010c 	add.w	r1, r3, #12
 80081da:	0092      	lsls	r2, r2, #2
 80081dc:	300c      	adds	r0, #12
 80081de:	f001 fd89 	bl	8009cf4 <memcpy>
 80081e2:	ec4b ab10 	vmov	d0, sl, fp
 80081e6:	aa1a      	add	r2, sp, #104	; 0x68
 80081e8:	a919      	add	r1, sp, #100	; 0x64
 80081ea:	4620      	mov	r0, r4
 80081ec:	f002 f97e 	bl	800a4ec <__d2b>
 80081f0:	ec4b ab18 	vmov	d8, sl, fp
 80081f4:	9018      	str	r0, [sp, #96]	; 0x60
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f43f aef6 	beq.w	8007fe8 <_strtod_l+0x490>
 80081fc:	2101      	movs	r1, #1
 80081fe:	4620      	mov	r0, r4
 8008200:	f001 fec8 	bl	8009f94 <__i2b>
 8008204:	4606      	mov	r6, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f aeee 	beq.w	8007fe8 <_strtod_l+0x490>
 800820c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800820e:	9904      	ldr	r1, [sp, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfab      	itete	ge
 8008214:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008216:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008218:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800821a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800821e:	bfac      	ite	ge
 8008220:	eb03 0902 	addge.w	r9, r3, r2
 8008224:	1ad7      	sublt	r7, r2, r3
 8008226:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008228:	eba3 0801 	sub.w	r8, r3, r1
 800822c:	4490      	add	r8, r2
 800822e:	4ba1      	ldr	r3, [pc, #644]	; (80084b4 <_strtod_l+0x95c>)
 8008230:	f108 38ff 	add.w	r8, r8, #4294967295
 8008234:	4598      	cmp	r8, r3
 8008236:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800823a:	f280 80c7 	bge.w	80083cc <_strtod_l+0x874>
 800823e:	eba3 0308 	sub.w	r3, r3, r8
 8008242:	2b1f      	cmp	r3, #31
 8008244:	eba2 0203 	sub.w	r2, r2, r3
 8008248:	f04f 0101 	mov.w	r1, #1
 800824c:	f300 80b1 	bgt.w	80083b2 <_strtod_l+0x85a>
 8008250:	fa01 f303 	lsl.w	r3, r1, r3
 8008254:	930d      	str	r3, [sp, #52]	; 0x34
 8008256:	2300      	movs	r3, #0
 8008258:	9308      	str	r3, [sp, #32]
 800825a:	eb09 0802 	add.w	r8, r9, r2
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	45c1      	cmp	r9, r8
 8008262:	4417      	add	r7, r2
 8008264:	441f      	add	r7, r3
 8008266:	464b      	mov	r3, r9
 8008268:	bfa8      	it	ge
 800826a:	4643      	movge	r3, r8
 800826c:	42bb      	cmp	r3, r7
 800826e:	bfa8      	it	ge
 8008270:	463b      	movge	r3, r7
 8008272:	2b00      	cmp	r3, #0
 8008274:	bfc2      	ittt	gt
 8008276:	eba8 0803 	subgt.w	r8, r8, r3
 800827a:	1aff      	subgt	r7, r7, r3
 800827c:	eba9 0903 	subgt.w	r9, r9, r3
 8008280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008282:	2b00      	cmp	r3, #0
 8008284:	dd17      	ble.n	80082b6 <_strtod_l+0x75e>
 8008286:	4631      	mov	r1, r6
 8008288:	461a      	mov	r2, r3
 800828a:	4620      	mov	r0, r4
 800828c:	f001 ff42 	bl	800a114 <__pow5mult>
 8008290:	4606      	mov	r6, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	f43f aea8 	beq.w	8007fe8 <_strtod_l+0x490>
 8008298:	4601      	mov	r1, r0
 800829a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800829c:	4620      	mov	r0, r4
 800829e:	f001 fe8f 	bl	8009fc0 <__multiply>
 80082a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f43f ae9f 	beq.w	8007fe8 <_strtod_l+0x490>
 80082aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082ac:	4620      	mov	r0, r4
 80082ae:	f001 fd6f 	bl	8009d90 <_Bfree>
 80082b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b4:	9318      	str	r3, [sp, #96]	; 0x60
 80082b6:	f1b8 0f00 	cmp.w	r8, #0
 80082ba:	f300 808c 	bgt.w	80083d6 <_strtod_l+0x87e>
 80082be:	9b06      	ldr	r3, [sp, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dd08      	ble.n	80082d6 <_strtod_l+0x77e>
 80082c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082c6:	9905      	ldr	r1, [sp, #20]
 80082c8:	4620      	mov	r0, r4
 80082ca:	f001 ff23 	bl	800a114 <__pow5mult>
 80082ce:	9005      	str	r0, [sp, #20]
 80082d0:	2800      	cmp	r0, #0
 80082d2:	f43f ae89 	beq.w	8007fe8 <_strtod_l+0x490>
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	dd08      	ble.n	80082ec <_strtod_l+0x794>
 80082da:	9905      	ldr	r1, [sp, #20]
 80082dc:	463a      	mov	r2, r7
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 ff72 	bl	800a1c8 <__lshift>
 80082e4:	9005      	str	r0, [sp, #20]
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f ae7e 	beq.w	8007fe8 <_strtod_l+0x490>
 80082ec:	f1b9 0f00 	cmp.w	r9, #0
 80082f0:	dd08      	ble.n	8008304 <_strtod_l+0x7ac>
 80082f2:	4631      	mov	r1, r6
 80082f4:	464a      	mov	r2, r9
 80082f6:	4620      	mov	r0, r4
 80082f8:	f001 ff66 	bl	800a1c8 <__lshift>
 80082fc:	4606      	mov	r6, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f ae72 	beq.w	8007fe8 <_strtod_l+0x490>
 8008304:	9a05      	ldr	r2, [sp, #20]
 8008306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008308:	4620      	mov	r0, r4
 800830a:	f001 ffe9 	bl	800a2e0 <__mdiff>
 800830e:	4605      	mov	r5, r0
 8008310:	2800      	cmp	r0, #0
 8008312:	f43f ae69 	beq.w	8007fe8 <_strtod_l+0x490>
 8008316:	68c3      	ldr	r3, [r0, #12]
 8008318:	930b      	str	r3, [sp, #44]	; 0x2c
 800831a:	2300      	movs	r3, #0
 800831c:	60c3      	str	r3, [r0, #12]
 800831e:	4631      	mov	r1, r6
 8008320:	f001 ffc2 	bl	800a2a8 <__mcmp>
 8008324:	2800      	cmp	r0, #0
 8008326:	da60      	bge.n	80083ea <_strtod_l+0x892>
 8008328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800832a:	ea53 030a 	orrs.w	r3, r3, sl
 800832e:	f040 8082 	bne.w	8008436 <_strtod_l+0x8de>
 8008332:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008336:	2b00      	cmp	r3, #0
 8008338:	d17d      	bne.n	8008436 <_strtod_l+0x8de>
 800833a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800833e:	0d1b      	lsrs	r3, r3, #20
 8008340:	051b      	lsls	r3, r3, #20
 8008342:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008346:	d976      	bls.n	8008436 <_strtod_l+0x8de>
 8008348:	696b      	ldr	r3, [r5, #20]
 800834a:	b913      	cbnz	r3, 8008352 <_strtod_l+0x7fa>
 800834c:	692b      	ldr	r3, [r5, #16]
 800834e:	2b01      	cmp	r3, #1
 8008350:	dd71      	ble.n	8008436 <_strtod_l+0x8de>
 8008352:	4629      	mov	r1, r5
 8008354:	2201      	movs	r2, #1
 8008356:	4620      	mov	r0, r4
 8008358:	f001 ff36 	bl	800a1c8 <__lshift>
 800835c:	4631      	mov	r1, r6
 800835e:	4605      	mov	r5, r0
 8008360:	f001 ffa2 	bl	800a2a8 <__mcmp>
 8008364:	2800      	cmp	r0, #0
 8008366:	dd66      	ble.n	8008436 <_strtod_l+0x8de>
 8008368:	9904      	ldr	r1, [sp, #16]
 800836a:	4a53      	ldr	r2, [pc, #332]	; (80084b8 <_strtod_l+0x960>)
 800836c:	465b      	mov	r3, fp
 800836e:	2900      	cmp	r1, #0
 8008370:	f000 8081 	beq.w	8008476 <_strtod_l+0x91e>
 8008374:	ea02 010b 	and.w	r1, r2, fp
 8008378:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800837c:	dc7b      	bgt.n	8008476 <_strtod_l+0x91e>
 800837e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008382:	f77f aea9 	ble.w	80080d8 <_strtod_l+0x580>
 8008386:	4b4d      	ldr	r3, [pc, #308]	; (80084bc <_strtod_l+0x964>)
 8008388:	4650      	mov	r0, sl
 800838a:	4659      	mov	r1, fp
 800838c:	2200      	movs	r2, #0
 800838e:	f7f8 f953 	bl	8000638 <__aeabi_dmul>
 8008392:	460b      	mov	r3, r1
 8008394:	4303      	orrs	r3, r0
 8008396:	bf08      	it	eq
 8008398:	2322      	moveq	r3, #34	; 0x22
 800839a:	4682      	mov	sl, r0
 800839c:	468b      	mov	fp, r1
 800839e:	bf08      	it	eq
 80083a0:	6023      	streq	r3, [r4, #0]
 80083a2:	e62b      	b.n	8007ffc <_strtod_l+0x4a4>
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	ea03 0a0a 	and.w	sl, r3, sl
 80083b0:	e6e3      	b.n	800817a <_strtod_l+0x622>
 80083b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80083b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80083ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80083be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80083c2:	fa01 f308 	lsl.w	r3, r1, r8
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	910d      	str	r1, [sp, #52]	; 0x34
 80083ca:	e746      	b.n	800825a <_strtod_l+0x702>
 80083cc:	2300      	movs	r3, #0
 80083ce:	9308      	str	r3, [sp, #32]
 80083d0:	2301      	movs	r3, #1
 80083d2:	930d      	str	r3, [sp, #52]	; 0x34
 80083d4:	e741      	b.n	800825a <_strtod_l+0x702>
 80083d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083d8:	4642      	mov	r2, r8
 80083da:	4620      	mov	r0, r4
 80083dc:	f001 fef4 	bl	800a1c8 <__lshift>
 80083e0:	9018      	str	r0, [sp, #96]	; 0x60
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f47f af6b 	bne.w	80082be <_strtod_l+0x766>
 80083e8:	e5fe      	b.n	8007fe8 <_strtod_l+0x490>
 80083ea:	465f      	mov	r7, fp
 80083ec:	d16e      	bne.n	80084cc <_strtod_l+0x974>
 80083ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083f4:	b342      	cbz	r2, 8008448 <_strtod_l+0x8f0>
 80083f6:	4a32      	ldr	r2, [pc, #200]	; (80084c0 <_strtod_l+0x968>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d128      	bne.n	800844e <_strtod_l+0x8f6>
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	4651      	mov	r1, sl
 8008400:	b1eb      	cbz	r3, 800843e <_strtod_l+0x8e6>
 8008402:	4b2d      	ldr	r3, [pc, #180]	; (80084b8 <_strtod_l+0x960>)
 8008404:	403b      	ands	r3, r7
 8008406:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800840a:	f04f 32ff 	mov.w	r2, #4294967295
 800840e:	d819      	bhi.n	8008444 <_strtod_l+0x8ec>
 8008410:	0d1b      	lsrs	r3, r3, #20
 8008412:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	4299      	cmp	r1, r3
 800841c:	d117      	bne.n	800844e <_strtod_l+0x8f6>
 800841e:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <_strtod_l+0x96c>)
 8008420:	429f      	cmp	r7, r3
 8008422:	d102      	bne.n	800842a <_strtod_l+0x8d2>
 8008424:	3101      	adds	r1, #1
 8008426:	f43f addf 	beq.w	8007fe8 <_strtod_l+0x490>
 800842a:	4b23      	ldr	r3, [pc, #140]	; (80084b8 <_strtod_l+0x960>)
 800842c:	403b      	ands	r3, r7
 800842e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008432:	f04f 0a00 	mov.w	sl, #0
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1a4      	bne.n	8008386 <_strtod_l+0x82e>
 800843c:	e5de      	b.n	8007ffc <_strtod_l+0x4a4>
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	e7ea      	b.n	800841a <_strtod_l+0x8c2>
 8008444:	4613      	mov	r3, r2
 8008446:	e7e8      	b.n	800841a <_strtod_l+0x8c2>
 8008448:	ea53 030a 	orrs.w	r3, r3, sl
 800844c:	d08c      	beq.n	8008368 <_strtod_l+0x810>
 800844e:	9b08      	ldr	r3, [sp, #32]
 8008450:	b1db      	cbz	r3, 800848a <_strtod_l+0x932>
 8008452:	423b      	tst	r3, r7
 8008454:	d0ef      	beq.n	8008436 <_strtod_l+0x8de>
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	9a04      	ldr	r2, [sp, #16]
 800845a:	4650      	mov	r0, sl
 800845c:	4659      	mov	r1, fp
 800845e:	b1c3      	cbz	r3, 8008492 <_strtod_l+0x93a>
 8008460:	f7ff fb5b 	bl	8007b1a <sulp>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	ec51 0b18 	vmov	r0, r1, d8
 800846c:	f7f7 ff2e 	bl	80002cc <__adddf3>
 8008470:	4682      	mov	sl, r0
 8008472:	468b      	mov	fp, r1
 8008474:	e7df      	b.n	8008436 <_strtod_l+0x8de>
 8008476:	4013      	ands	r3, r2
 8008478:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800847c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008480:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008484:	f04f 3aff 	mov.w	sl, #4294967295
 8008488:	e7d5      	b.n	8008436 <_strtod_l+0x8de>
 800848a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800848c:	ea13 0f0a 	tst.w	r3, sl
 8008490:	e7e0      	b.n	8008454 <_strtod_l+0x8fc>
 8008492:	f7ff fb42 	bl	8007b1a <sulp>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	ec51 0b18 	vmov	r0, r1, d8
 800849e:	f7f7 ff13 	bl	80002c8 <__aeabi_dsub>
 80084a2:	2200      	movs	r2, #0
 80084a4:	2300      	movs	r3, #0
 80084a6:	4682      	mov	sl, r0
 80084a8:	468b      	mov	fp, r1
 80084aa:	f7f8 fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d0c1      	beq.n	8008436 <_strtod_l+0x8de>
 80084b2:	e611      	b.n	80080d8 <_strtod_l+0x580>
 80084b4:	fffffc02 	.word	0xfffffc02
 80084b8:	7ff00000 	.word	0x7ff00000
 80084bc:	39500000 	.word	0x39500000
 80084c0:	000fffff 	.word	0x000fffff
 80084c4:	7fefffff 	.word	0x7fefffff
 80084c8:	0800bf78 	.word	0x0800bf78
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	f002 f868 	bl	800a5a4 <__ratio>
 80084d4:	ec59 8b10 	vmov	r8, r9, d0
 80084d8:	ee10 0a10 	vmov	r0, s0
 80084dc:	2200      	movs	r2, #0
 80084de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f8 fb24 	bl	8000b30 <__aeabi_dcmple>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d07a      	beq.n	80085e2 <_strtod_l+0xa8a>
 80084ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d04a      	beq.n	8008588 <_strtod_l+0xa30>
 80084f2:	4b95      	ldr	r3, [pc, #596]	; (8008748 <_strtod_l+0xbf0>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008748 <_strtod_l+0xbf0>
 80084fe:	f04f 0800 	mov.w	r8, #0
 8008502:	4b92      	ldr	r3, [pc, #584]	; (800874c <_strtod_l+0xbf4>)
 8008504:	403b      	ands	r3, r7
 8008506:	930d      	str	r3, [sp, #52]	; 0x34
 8008508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800850a:	4b91      	ldr	r3, [pc, #580]	; (8008750 <_strtod_l+0xbf8>)
 800850c:	429a      	cmp	r2, r3
 800850e:	f040 80b0 	bne.w	8008672 <_strtod_l+0xb1a>
 8008512:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008516:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800851a:	ec4b ab10 	vmov	d0, sl, fp
 800851e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008522:	f001 ff67 	bl	800a3f4 <__ulp>
 8008526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800852a:	ec53 2b10 	vmov	r2, r3, d0
 800852e:	f7f8 f883 	bl	8000638 <__aeabi_dmul>
 8008532:	4652      	mov	r2, sl
 8008534:	465b      	mov	r3, fp
 8008536:	f7f7 fec9 	bl	80002cc <__adddf3>
 800853a:	460b      	mov	r3, r1
 800853c:	4983      	ldr	r1, [pc, #524]	; (800874c <_strtod_l+0xbf4>)
 800853e:	4a85      	ldr	r2, [pc, #532]	; (8008754 <_strtod_l+0xbfc>)
 8008540:	4019      	ands	r1, r3
 8008542:	4291      	cmp	r1, r2
 8008544:	4682      	mov	sl, r0
 8008546:	d960      	bls.n	800860a <_strtod_l+0xab2>
 8008548:	ee18 3a90 	vmov	r3, s17
 800854c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008550:	4293      	cmp	r3, r2
 8008552:	d104      	bne.n	800855e <_strtod_l+0xa06>
 8008554:	ee18 3a10 	vmov	r3, s16
 8008558:	3301      	adds	r3, #1
 800855a:	f43f ad45 	beq.w	8007fe8 <_strtod_l+0x490>
 800855e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008760 <_strtod_l+0xc08>
 8008562:	f04f 3aff 	mov.w	sl, #4294967295
 8008566:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008568:	4620      	mov	r0, r4
 800856a:	f001 fc11 	bl	8009d90 <_Bfree>
 800856e:	9905      	ldr	r1, [sp, #20]
 8008570:	4620      	mov	r0, r4
 8008572:	f001 fc0d 	bl	8009d90 <_Bfree>
 8008576:	4631      	mov	r1, r6
 8008578:	4620      	mov	r0, r4
 800857a:	f001 fc09 	bl	8009d90 <_Bfree>
 800857e:	4629      	mov	r1, r5
 8008580:	4620      	mov	r0, r4
 8008582:	f001 fc05 	bl	8009d90 <_Bfree>
 8008586:	e61a      	b.n	80081be <_strtod_l+0x666>
 8008588:	f1ba 0f00 	cmp.w	sl, #0
 800858c:	d11b      	bne.n	80085c6 <_strtod_l+0xa6e>
 800858e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008592:	b9f3      	cbnz	r3, 80085d2 <_strtod_l+0xa7a>
 8008594:	4b6c      	ldr	r3, [pc, #432]	; (8008748 <_strtod_l+0xbf0>)
 8008596:	2200      	movs	r2, #0
 8008598:	4640      	mov	r0, r8
 800859a:	4649      	mov	r1, r9
 800859c:	f7f8 fabe 	bl	8000b1c <__aeabi_dcmplt>
 80085a0:	b9d0      	cbnz	r0, 80085d8 <_strtod_l+0xa80>
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	4b6c      	ldr	r3, [pc, #432]	; (8008758 <_strtod_l+0xc00>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	f7f8 f845 	bl	8000638 <__aeabi_dmul>
 80085ae:	4680      	mov	r8, r0
 80085b0:	4689      	mov	r9, r1
 80085b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80085ba:	9315      	str	r3, [sp, #84]	; 0x54
 80085bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80085c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085c4:	e79d      	b.n	8008502 <_strtod_l+0x9aa>
 80085c6:	f1ba 0f01 	cmp.w	sl, #1
 80085ca:	d102      	bne.n	80085d2 <_strtod_l+0xa7a>
 80085cc:	2f00      	cmp	r7, #0
 80085ce:	f43f ad83 	beq.w	80080d8 <_strtod_l+0x580>
 80085d2:	4b62      	ldr	r3, [pc, #392]	; (800875c <_strtod_l+0xc04>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	e78e      	b.n	80084f6 <_strtod_l+0x99e>
 80085d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008758 <_strtod_l+0xc00>
 80085dc:	f04f 0800 	mov.w	r8, #0
 80085e0:	e7e7      	b.n	80085b2 <_strtod_l+0xa5a>
 80085e2:	4b5d      	ldr	r3, [pc, #372]	; (8008758 <_strtod_l+0xc00>)
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	2200      	movs	r2, #0
 80085ea:	f7f8 f825 	bl	8000638 <__aeabi_dmul>
 80085ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f0:	4680      	mov	r8, r0
 80085f2:	4689      	mov	r9, r1
 80085f4:	b933      	cbnz	r3, 8008604 <_strtod_l+0xaac>
 80085f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085fa:	900e      	str	r0, [sp, #56]	; 0x38
 80085fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80085fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008602:	e7dd      	b.n	80085c0 <_strtod_l+0xa68>
 8008604:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008608:	e7f9      	b.n	80085fe <_strtod_l+0xaa6>
 800860a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1a8      	bne.n	8008566 <_strtod_l+0xa0e>
 8008614:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800861a:	0d1b      	lsrs	r3, r3, #20
 800861c:	051b      	lsls	r3, r3, #20
 800861e:	429a      	cmp	r2, r3
 8008620:	d1a1      	bne.n	8008566 <_strtod_l+0xa0e>
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f8 fb67 	bl	8000cf8 <__aeabi_d2lz>
 800862a:	f7f7 ffd7 	bl	80005dc <__aeabi_l2d>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f7f7 fe47 	bl	80002c8 <__aeabi_dsub>
 800863a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800863c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008640:	ea43 030a 	orr.w	r3, r3, sl
 8008644:	4313      	orrs	r3, r2
 8008646:	4680      	mov	r8, r0
 8008648:	4689      	mov	r9, r1
 800864a:	d055      	beq.n	80086f8 <_strtod_l+0xba0>
 800864c:	a336      	add	r3, pc, #216	; (adr r3, 8008728 <_strtod_l+0xbd0>)
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	f7f8 fa63 	bl	8000b1c <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	f47f acd0 	bne.w	8007ffc <_strtod_l+0x4a4>
 800865c:	a334      	add	r3, pc, #208	; (adr r3, 8008730 <_strtod_l+0xbd8>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f8 fa77 	bl	8000b58 <__aeabi_dcmpgt>
 800866a:	2800      	cmp	r0, #0
 800866c:	f43f af7b 	beq.w	8008566 <_strtod_l+0xa0e>
 8008670:	e4c4      	b.n	8007ffc <_strtod_l+0x4a4>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	b333      	cbz	r3, 80086c4 <_strtod_l+0xb6c>
 8008676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008678:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800867c:	d822      	bhi.n	80086c4 <_strtod_l+0xb6c>
 800867e:	a32e      	add	r3, pc, #184	; (adr r3, 8008738 <_strtod_l+0xbe0>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	4640      	mov	r0, r8
 8008686:	4649      	mov	r1, r9
 8008688:	f7f8 fa52 	bl	8000b30 <__aeabi_dcmple>
 800868c:	b1a0      	cbz	r0, 80086b8 <_strtod_l+0xb60>
 800868e:	4649      	mov	r1, r9
 8008690:	4640      	mov	r0, r8
 8008692:	f7f8 faa9 	bl	8000be8 <__aeabi_d2uiz>
 8008696:	2801      	cmp	r0, #1
 8008698:	bf38      	it	cc
 800869a:	2001      	movcc	r0, #1
 800869c:	f7f7 ff52 	bl	8000544 <__aeabi_ui2d>
 80086a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a2:	4680      	mov	r8, r0
 80086a4:	4689      	mov	r9, r1
 80086a6:	bb23      	cbnz	r3, 80086f2 <_strtod_l+0xb9a>
 80086a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086ac:	9010      	str	r0, [sp, #64]	; 0x40
 80086ae:	9311      	str	r3, [sp, #68]	; 0x44
 80086b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80086c0:	1a9b      	subs	r3, r3, r2
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086c8:	eeb0 0a48 	vmov.f32	s0, s16
 80086cc:	eef0 0a68 	vmov.f32	s1, s17
 80086d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086d4:	f001 fe8e 	bl	800a3f4 <__ulp>
 80086d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086dc:	ec53 2b10 	vmov	r2, r3, d0
 80086e0:	f7f7 ffaa 	bl	8000638 <__aeabi_dmul>
 80086e4:	ec53 2b18 	vmov	r2, r3, d8
 80086e8:	f7f7 fdf0 	bl	80002cc <__adddf3>
 80086ec:	4682      	mov	sl, r0
 80086ee:	468b      	mov	fp, r1
 80086f0:	e78d      	b.n	800860e <_strtod_l+0xab6>
 80086f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80086f6:	e7db      	b.n	80086b0 <_strtod_l+0xb58>
 80086f8:	a311      	add	r3, pc, #68	; (adr r3, 8008740 <_strtod_l+0xbe8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f8 fa0d 	bl	8000b1c <__aeabi_dcmplt>
 8008702:	e7b2      	b.n	800866a <_strtod_l+0xb12>
 8008704:	2300      	movs	r3, #0
 8008706:	930a      	str	r3, [sp, #40]	; 0x28
 8008708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800870a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	f7ff ba6b 	b.w	8007be8 <_strtod_l+0x90>
 8008712:	2a65      	cmp	r2, #101	; 0x65
 8008714:	f43f ab5f 	beq.w	8007dd6 <_strtod_l+0x27e>
 8008718:	2a45      	cmp	r2, #69	; 0x45
 800871a:	f43f ab5c 	beq.w	8007dd6 <_strtod_l+0x27e>
 800871e:	2301      	movs	r3, #1
 8008720:	f7ff bb94 	b.w	8007e4c <_strtod_l+0x2f4>
 8008724:	f3af 8000 	nop.w
 8008728:	94a03595 	.word	0x94a03595
 800872c:	3fdfffff 	.word	0x3fdfffff
 8008730:	35afe535 	.word	0x35afe535
 8008734:	3fe00000 	.word	0x3fe00000
 8008738:	ffc00000 	.word	0xffc00000
 800873c:	41dfffff 	.word	0x41dfffff
 8008740:	94a03595 	.word	0x94a03595
 8008744:	3fcfffff 	.word	0x3fcfffff
 8008748:	3ff00000 	.word	0x3ff00000
 800874c:	7ff00000 	.word	0x7ff00000
 8008750:	7fe00000 	.word	0x7fe00000
 8008754:	7c9fffff 	.word	0x7c9fffff
 8008758:	3fe00000 	.word	0x3fe00000
 800875c:	bff00000 	.word	0xbff00000
 8008760:	7fefffff 	.word	0x7fefffff

08008764 <_strtod_r>:
 8008764:	4b01      	ldr	r3, [pc, #4]	; (800876c <_strtod_r+0x8>)
 8008766:	f7ff b9f7 	b.w	8007b58 <_strtod_l>
 800876a:	bf00      	nop
 800876c:	20000074 	.word	0x20000074

08008770 <_strtol_l.constprop.0>:
 8008770:	2b01      	cmp	r3, #1
 8008772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008776:	d001      	beq.n	800877c <_strtol_l.constprop.0+0xc>
 8008778:	2b24      	cmp	r3, #36	; 0x24
 800877a:	d906      	bls.n	800878a <_strtol_l.constprop.0+0x1a>
 800877c:	f7fe fa76 	bl	8006c6c <__errno>
 8008780:	2316      	movs	r3, #22
 8008782:	6003      	str	r3, [r0, #0]
 8008784:	2000      	movs	r0, #0
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008870 <_strtol_l.constprop.0+0x100>
 800878e:	460d      	mov	r5, r1
 8008790:	462e      	mov	r6, r5
 8008792:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008796:	f814 700c 	ldrb.w	r7, [r4, ip]
 800879a:	f017 0708 	ands.w	r7, r7, #8
 800879e:	d1f7      	bne.n	8008790 <_strtol_l.constprop.0+0x20>
 80087a0:	2c2d      	cmp	r4, #45	; 0x2d
 80087a2:	d132      	bne.n	800880a <_strtol_l.constprop.0+0x9a>
 80087a4:	782c      	ldrb	r4, [r5, #0]
 80087a6:	2701      	movs	r7, #1
 80087a8:	1cb5      	adds	r5, r6, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d05b      	beq.n	8008866 <_strtol_l.constprop.0+0xf6>
 80087ae:	2b10      	cmp	r3, #16
 80087b0:	d109      	bne.n	80087c6 <_strtol_l.constprop.0+0x56>
 80087b2:	2c30      	cmp	r4, #48	; 0x30
 80087b4:	d107      	bne.n	80087c6 <_strtol_l.constprop.0+0x56>
 80087b6:	782c      	ldrb	r4, [r5, #0]
 80087b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087bc:	2c58      	cmp	r4, #88	; 0x58
 80087be:	d14d      	bne.n	800885c <_strtol_l.constprop.0+0xec>
 80087c0:	786c      	ldrb	r4, [r5, #1]
 80087c2:	2310      	movs	r3, #16
 80087c4:	3502      	adds	r5, #2
 80087c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80087ce:	f04f 0c00 	mov.w	ip, #0
 80087d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80087d6:	4666      	mov	r6, ip
 80087d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80087dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087e0:	f1be 0f09 	cmp.w	lr, #9
 80087e4:	d816      	bhi.n	8008814 <_strtol_l.constprop.0+0xa4>
 80087e6:	4674      	mov	r4, lr
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	dd24      	ble.n	8008836 <_strtol_l.constprop.0+0xc6>
 80087ec:	f1bc 0f00 	cmp.w	ip, #0
 80087f0:	db1e      	blt.n	8008830 <_strtol_l.constprop.0+0xc0>
 80087f2:	45b1      	cmp	r9, r6
 80087f4:	d31c      	bcc.n	8008830 <_strtol_l.constprop.0+0xc0>
 80087f6:	d101      	bne.n	80087fc <_strtol_l.constprop.0+0x8c>
 80087f8:	45a2      	cmp	sl, r4
 80087fa:	db19      	blt.n	8008830 <_strtol_l.constprop.0+0xc0>
 80087fc:	fb06 4603 	mla	r6, r6, r3, r4
 8008800:	f04f 0c01 	mov.w	ip, #1
 8008804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008808:	e7e8      	b.n	80087dc <_strtol_l.constprop.0+0x6c>
 800880a:	2c2b      	cmp	r4, #43	; 0x2b
 800880c:	bf04      	itt	eq
 800880e:	782c      	ldrbeq	r4, [r5, #0]
 8008810:	1cb5      	addeq	r5, r6, #2
 8008812:	e7ca      	b.n	80087aa <_strtol_l.constprop.0+0x3a>
 8008814:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008818:	f1be 0f19 	cmp.w	lr, #25
 800881c:	d801      	bhi.n	8008822 <_strtol_l.constprop.0+0xb2>
 800881e:	3c37      	subs	r4, #55	; 0x37
 8008820:	e7e2      	b.n	80087e8 <_strtol_l.constprop.0+0x78>
 8008822:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008826:	f1be 0f19 	cmp.w	lr, #25
 800882a:	d804      	bhi.n	8008836 <_strtol_l.constprop.0+0xc6>
 800882c:	3c57      	subs	r4, #87	; 0x57
 800882e:	e7db      	b.n	80087e8 <_strtol_l.constprop.0+0x78>
 8008830:	f04f 3cff 	mov.w	ip, #4294967295
 8008834:	e7e6      	b.n	8008804 <_strtol_l.constprop.0+0x94>
 8008836:	f1bc 0f00 	cmp.w	ip, #0
 800883a:	da05      	bge.n	8008848 <_strtol_l.constprop.0+0xd8>
 800883c:	2322      	movs	r3, #34	; 0x22
 800883e:	6003      	str	r3, [r0, #0]
 8008840:	4646      	mov	r6, r8
 8008842:	b942      	cbnz	r2, 8008856 <_strtol_l.constprop.0+0xe6>
 8008844:	4630      	mov	r0, r6
 8008846:	e79e      	b.n	8008786 <_strtol_l.constprop.0+0x16>
 8008848:	b107      	cbz	r7, 800884c <_strtol_l.constprop.0+0xdc>
 800884a:	4276      	negs	r6, r6
 800884c:	2a00      	cmp	r2, #0
 800884e:	d0f9      	beq.n	8008844 <_strtol_l.constprop.0+0xd4>
 8008850:	f1bc 0f00 	cmp.w	ip, #0
 8008854:	d000      	beq.n	8008858 <_strtol_l.constprop.0+0xe8>
 8008856:	1e69      	subs	r1, r5, #1
 8008858:	6011      	str	r1, [r2, #0]
 800885a:	e7f3      	b.n	8008844 <_strtol_l.constprop.0+0xd4>
 800885c:	2430      	movs	r4, #48	; 0x30
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1b1      	bne.n	80087c6 <_strtol_l.constprop.0+0x56>
 8008862:	2308      	movs	r3, #8
 8008864:	e7af      	b.n	80087c6 <_strtol_l.constprop.0+0x56>
 8008866:	2c30      	cmp	r4, #48	; 0x30
 8008868:	d0a5      	beq.n	80087b6 <_strtol_l.constprop.0+0x46>
 800886a:	230a      	movs	r3, #10
 800886c:	e7ab      	b.n	80087c6 <_strtol_l.constprop.0+0x56>
 800886e:	bf00      	nop
 8008870:	0800bfa1 	.word	0x0800bfa1

08008874 <_strtol_r>:
 8008874:	f7ff bf7c 	b.w	8008770 <_strtol_l.constprop.0>

08008878 <_write_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	; (8008898 <_write_r+0x20>)
 800887c:	4604      	mov	r4, r0
 800887e:	4608      	mov	r0, r1
 8008880:	4611      	mov	r1, r2
 8008882:	2200      	movs	r2, #0
 8008884:	602a      	str	r2, [r5, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f7f9 fe09 	bl	800249e <_write>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_write_r+0x1e>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_write_r+0x1e>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20000898 	.word	0x20000898

0800889c <_close_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d06      	ldr	r5, [pc, #24]	; (80088b8 <_close_r+0x1c>)
 80088a0:	2300      	movs	r3, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	602b      	str	r3, [r5, #0]
 80088a8:	f7f9 fe15 	bl	80024d6 <_close>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_close_r+0x1a>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_close_r+0x1a>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000898 	.word	0x20000898

080088bc <quorem>:
 80088bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	6903      	ldr	r3, [r0, #16]
 80088c2:	690c      	ldr	r4, [r1, #16]
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	4607      	mov	r7, r0
 80088c8:	f2c0 8081 	blt.w	80089ce <quorem+0x112>
 80088cc:	3c01      	subs	r4, #1
 80088ce:	f101 0814 	add.w	r8, r1, #20
 80088d2:	f100 0514 	add.w	r5, r0, #20
 80088d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088e4:	3301      	adds	r3, #1
 80088e6:	429a      	cmp	r2, r3
 80088e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80088f4:	d331      	bcc.n	800895a <quorem+0x9e>
 80088f6:	f04f 0e00 	mov.w	lr, #0
 80088fa:	4640      	mov	r0, r8
 80088fc:	46ac      	mov	ip, r5
 80088fe:	46f2      	mov	sl, lr
 8008900:	f850 2b04 	ldr.w	r2, [r0], #4
 8008904:	b293      	uxth	r3, r2
 8008906:	fb06 e303 	mla	r3, r6, r3, lr
 800890a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800890e:	b29b      	uxth	r3, r3
 8008910:	ebaa 0303 	sub.w	r3, sl, r3
 8008914:	f8dc a000 	ldr.w	sl, [ip]
 8008918:	0c12      	lsrs	r2, r2, #16
 800891a:	fa13 f38a 	uxtah	r3, r3, sl
 800891e:	fb06 e202 	mla	r2, r6, r2, lr
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	9b00      	ldr	r3, [sp, #0]
 8008926:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800892a:	b292      	uxth	r2, r2
 800892c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008934:	f8bd 3000 	ldrh.w	r3, [sp]
 8008938:	4581      	cmp	r9, r0
 800893a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800893e:	f84c 3b04 	str.w	r3, [ip], #4
 8008942:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008946:	d2db      	bcs.n	8008900 <quorem+0x44>
 8008948:	f855 300b 	ldr.w	r3, [r5, fp]
 800894c:	b92b      	cbnz	r3, 800895a <quorem+0x9e>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	3b04      	subs	r3, #4
 8008952:	429d      	cmp	r5, r3
 8008954:	461a      	mov	r2, r3
 8008956:	d32e      	bcc.n	80089b6 <quorem+0xfa>
 8008958:	613c      	str	r4, [r7, #16]
 800895a:	4638      	mov	r0, r7
 800895c:	f001 fca4 	bl	800a2a8 <__mcmp>
 8008960:	2800      	cmp	r0, #0
 8008962:	db24      	blt.n	80089ae <quorem+0xf2>
 8008964:	3601      	adds	r6, #1
 8008966:	4628      	mov	r0, r5
 8008968:	f04f 0c00 	mov.w	ip, #0
 800896c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008970:	f8d0 e000 	ldr.w	lr, [r0]
 8008974:	b293      	uxth	r3, r2
 8008976:	ebac 0303 	sub.w	r3, ip, r3
 800897a:	0c12      	lsrs	r2, r2, #16
 800897c:	fa13 f38e 	uxtah	r3, r3, lr
 8008980:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008988:	b29b      	uxth	r3, r3
 800898a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800898e:	45c1      	cmp	r9, r8
 8008990:	f840 3b04 	str.w	r3, [r0], #4
 8008994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008998:	d2e8      	bcs.n	800896c <quorem+0xb0>
 800899a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800899e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089a2:	b922      	cbnz	r2, 80089ae <quorem+0xf2>
 80089a4:	3b04      	subs	r3, #4
 80089a6:	429d      	cmp	r5, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	d30a      	bcc.n	80089c2 <quorem+0x106>
 80089ac:	613c      	str	r4, [r7, #16]
 80089ae:	4630      	mov	r0, r6
 80089b0:	b003      	add	sp, #12
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	6812      	ldr	r2, [r2, #0]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d1cc      	bne.n	8008958 <quorem+0x9c>
 80089be:	3c01      	subs	r4, #1
 80089c0:	e7c7      	b.n	8008952 <quorem+0x96>
 80089c2:	6812      	ldr	r2, [r2, #0]
 80089c4:	3b04      	subs	r3, #4
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	d1f0      	bne.n	80089ac <quorem+0xf0>
 80089ca:	3c01      	subs	r4, #1
 80089cc:	e7eb      	b.n	80089a6 <quorem+0xea>
 80089ce:	2000      	movs	r0, #0
 80089d0:	e7ee      	b.n	80089b0 <quorem+0xf4>
 80089d2:	0000      	movs	r0, r0
 80089d4:	0000      	movs	r0, r0
	...

080089d8 <_dtoa_r>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	ed2d 8b04 	vpush	{d8-d9}
 80089e0:	ec57 6b10 	vmov	r6, r7, d0
 80089e4:	b093      	sub	sp, #76	; 0x4c
 80089e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089ec:	9106      	str	r1, [sp, #24]
 80089ee:	ee10 aa10 	vmov	sl, s0
 80089f2:	4604      	mov	r4, r0
 80089f4:	9209      	str	r2, [sp, #36]	; 0x24
 80089f6:	930c      	str	r3, [sp, #48]	; 0x30
 80089f8:	46bb      	mov	fp, r7
 80089fa:	b975      	cbnz	r5, 8008a1a <_dtoa_r+0x42>
 80089fc:	2010      	movs	r0, #16
 80089fe:	f001 f95f 	bl	8009cc0 <malloc>
 8008a02:	4602      	mov	r2, r0
 8008a04:	6260      	str	r0, [r4, #36]	; 0x24
 8008a06:	b920      	cbnz	r0, 8008a12 <_dtoa_r+0x3a>
 8008a08:	4ba7      	ldr	r3, [pc, #668]	; (8008ca8 <_dtoa_r+0x2d0>)
 8008a0a:	21ea      	movs	r1, #234	; 0xea
 8008a0c:	48a7      	ldr	r0, [pc, #668]	; (8008cac <_dtoa_r+0x2d4>)
 8008a0e:	f002 fcd7 	bl	800b3c0 <__assert_func>
 8008a12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a16:	6005      	str	r5, [r0, #0]
 8008a18:	60c5      	str	r5, [r0, #12]
 8008a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a1c:	6819      	ldr	r1, [r3, #0]
 8008a1e:	b151      	cbz	r1, 8008a36 <_dtoa_r+0x5e>
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	604a      	str	r2, [r1, #4]
 8008a24:	2301      	movs	r3, #1
 8008a26:	4093      	lsls	r3, r2
 8008a28:	608b      	str	r3, [r1, #8]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f001 f9b0 	bl	8009d90 <_Bfree>
 8008a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	1e3b      	subs	r3, r7, #0
 8008a38:	bfaa      	itet	ge
 8008a3a:	2300      	movge	r3, #0
 8008a3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a40:	f8c8 3000 	strge.w	r3, [r8]
 8008a44:	4b9a      	ldr	r3, [pc, #616]	; (8008cb0 <_dtoa_r+0x2d8>)
 8008a46:	bfbc      	itt	lt
 8008a48:	2201      	movlt	r2, #1
 8008a4a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a4e:	ea33 030b 	bics.w	r3, r3, fp
 8008a52:	d11b      	bne.n	8008a8c <_dtoa_r+0xb4>
 8008a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a56:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a60:	4333      	orrs	r3, r6
 8008a62:	f000 8592 	beq.w	800958a <_dtoa_r+0xbb2>
 8008a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a68:	b963      	cbnz	r3, 8008a84 <_dtoa_r+0xac>
 8008a6a:	4b92      	ldr	r3, [pc, #584]	; (8008cb4 <_dtoa_r+0x2dc>)
 8008a6c:	e022      	b.n	8008ab4 <_dtoa_r+0xdc>
 8008a6e:	4b92      	ldr	r3, [pc, #584]	; (8008cb8 <_dtoa_r+0x2e0>)
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	3308      	adds	r3, #8
 8008a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	9801      	ldr	r0, [sp, #4]
 8008a7a:	b013      	add	sp, #76	; 0x4c
 8008a7c:	ecbd 8b04 	vpop	{d8-d9}
 8008a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	4b8b      	ldr	r3, [pc, #556]	; (8008cb4 <_dtoa_r+0x2dc>)
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	3303      	adds	r3, #3
 8008a8a:	e7f3      	b.n	8008a74 <_dtoa_r+0x9c>
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2300      	movs	r3, #0
 8008a90:	4650      	mov	r0, sl
 8008a92:	4659      	mov	r1, fp
 8008a94:	f7f8 f838 	bl	8000b08 <__aeabi_dcmpeq>
 8008a98:	ec4b ab19 	vmov	d9, sl, fp
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	b158      	cbz	r0, 8008ab8 <_dtoa_r+0xe0>
 8008aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 856b 	beq.w	8009584 <_dtoa_r+0xbac>
 8008aae:	4883      	ldr	r0, [pc, #524]	; (8008cbc <_dtoa_r+0x2e4>)
 8008ab0:	6018      	str	r0, [r3, #0]
 8008ab2:	1e43      	subs	r3, r0, #1
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	e7df      	b.n	8008a78 <_dtoa_r+0xa0>
 8008ab8:	ec4b ab10 	vmov	d0, sl, fp
 8008abc:	aa10      	add	r2, sp, #64	; 0x40
 8008abe:	a911      	add	r1, sp, #68	; 0x44
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f001 fd13 	bl	800a4ec <__d2b>
 8008ac6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008aca:	ee08 0a10 	vmov	s16, r0
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	f000 8084 	beq.w	8008bdc <_dtoa_r+0x204>
 8008ad4:	ee19 3a90 	vmov	r3, s19
 8008ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008adc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ae0:	4656      	mov	r6, sl
 8008ae2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008aea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008aee:	4b74      	ldr	r3, [pc, #464]	; (8008cc0 <_dtoa_r+0x2e8>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	4630      	mov	r0, r6
 8008af4:	4639      	mov	r1, r7
 8008af6:	f7f7 fbe7 	bl	80002c8 <__aeabi_dsub>
 8008afa:	a365      	add	r3, pc, #404	; (adr r3, 8008c90 <_dtoa_r+0x2b8>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f7f7 fd9a 	bl	8000638 <__aeabi_dmul>
 8008b04:	a364      	add	r3, pc, #400	; (adr r3, 8008c98 <_dtoa_r+0x2c0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fbdf 	bl	80002cc <__adddf3>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	4628      	mov	r0, r5
 8008b12:	460f      	mov	r7, r1
 8008b14:	f7f7 fd26 	bl	8000564 <__aeabi_i2d>
 8008b18:	a361      	add	r3, pc, #388	; (adr r3, 8008ca0 <_dtoa_r+0x2c8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fd8b 	bl	8000638 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4630      	mov	r0, r6
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f7f7 fbcf 	bl	80002cc <__adddf3>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460f      	mov	r7, r1
 8008b32:	f7f8 f831 	bl	8000b98 <__aeabi_d2iz>
 8008b36:	2200      	movs	r2, #0
 8008b38:	9000      	str	r0, [sp, #0]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8008b44:	b150      	cbz	r0, 8008b5c <_dtoa_r+0x184>
 8008b46:	9800      	ldr	r0, [sp, #0]
 8008b48:	f7f7 fd0c 	bl	8000564 <__aeabi_i2d>
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	463b      	mov	r3, r7
 8008b50:	f7f7 ffda 	bl	8000b08 <__aeabi_dcmpeq>
 8008b54:	b910      	cbnz	r0, 8008b5c <_dtoa_r+0x184>
 8008b56:	9b00      	ldr	r3, [sp, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	9b00      	ldr	r3, [sp, #0]
 8008b5e:	2b16      	cmp	r3, #22
 8008b60:	d85a      	bhi.n	8008c18 <_dtoa_r+0x240>
 8008b62:	9a00      	ldr	r2, [sp, #0]
 8008b64:	4b57      	ldr	r3, [pc, #348]	; (8008cc4 <_dtoa_r+0x2ec>)
 8008b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	ec51 0b19 	vmov	r0, r1, d9
 8008b72:	f7f7 ffd3 	bl	8000b1c <__aeabi_dcmplt>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d050      	beq.n	8008c1c <_dtoa_r+0x244>
 8008b7a:	9b00      	ldr	r3, [sp, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	2300      	movs	r3, #0
 8008b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b86:	1b5d      	subs	r5, r3, r5
 8008b88:	1e6b      	subs	r3, r5, #1
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	bf45      	ittet	mi
 8008b8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b92:	9304      	strmi	r3, [sp, #16]
 8008b94:	2300      	movpl	r3, #0
 8008b96:	2300      	movmi	r3, #0
 8008b98:	bf4c      	ite	mi
 8008b9a:	9305      	strmi	r3, [sp, #20]
 8008b9c:	9304      	strpl	r3, [sp, #16]
 8008b9e:	9b00      	ldr	r3, [sp, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	db3d      	blt.n	8008c20 <_dtoa_r+0x248>
 8008ba4:	9b05      	ldr	r3, [sp, #20]
 8008ba6:	9a00      	ldr	r2, [sp, #0]
 8008ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8008baa:	4413      	add	r3, r2
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	f200 8089 	bhi.w	8008ccc <_dtoa_r+0x2f4>
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	bfc4      	itt	gt
 8008bbe:	3b04      	subgt	r3, #4
 8008bc0:	9306      	strgt	r3, [sp, #24]
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bc8:	bfcc      	ite	gt
 8008bca:	2500      	movgt	r5, #0
 8008bcc:	2501      	movle	r5, #1
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	f200 8087 	bhi.w	8008ce2 <_dtoa_r+0x30a>
 8008bd4:	e8df f003 	tbb	[pc, r3]
 8008bd8:	59383a2d 	.word	0x59383a2d
 8008bdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008be0:	441d      	add	r5, r3
 8008be2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	bfc1      	itttt	gt
 8008bea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008bf2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008bf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008bfa:	bfda      	itte	le
 8008bfc:	f1c3 0320 	rsble	r3, r3, #32
 8008c00:	fa06 f003 	lslle.w	r0, r6, r3
 8008c04:	4318      	orrgt	r0, r3
 8008c06:	f7f7 fc9d 	bl	8000544 <__aeabi_ui2d>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c12:	3d01      	subs	r5, #1
 8008c14:	930e      	str	r3, [sp, #56]	; 0x38
 8008c16:	e76a      	b.n	8008aee <_dtoa_r+0x116>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e7b2      	b.n	8008b82 <_dtoa_r+0x1aa>
 8008c1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c1e:	e7b1      	b.n	8008b84 <_dtoa_r+0x1ac>
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	9a00      	ldr	r2, [sp, #0]
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	4253      	negs	r3, r2
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c30:	e7bf      	b.n	8008bb2 <_dtoa_r+0x1da>
 8008c32:	2300      	movs	r3, #0
 8008c34:	9308      	str	r3, [sp, #32]
 8008c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc55      	bgt.n	8008ce8 <_dtoa_r+0x310>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c42:	461a      	mov	r2, r3
 8008c44:	9209      	str	r2, [sp, #36]	; 0x24
 8008c46:	e00c      	b.n	8008c62 <_dtoa_r+0x28a>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7f3      	b.n	8008c34 <_dtoa_r+0x25c>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c50:	9308      	str	r3, [sp, #32]
 8008c52:	9b00      	ldr	r3, [sp, #0]
 8008c54:	4413      	add	r3, r2
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	bfb8      	it	lt
 8008c60:	2301      	movlt	r3, #1
 8008c62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c64:	2200      	movs	r2, #0
 8008c66:	6042      	str	r2, [r0, #4]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	f102 0614 	add.w	r6, r2, #20
 8008c6e:	429e      	cmp	r6, r3
 8008c70:	6841      	ldr	r1, [r0, #4]
 8008c72:	d93d      	bls.n	8008cf0 <_dtoa_r+0x318>
 8008c74:	4620      	mov	r0, r4
 8008c76:	f001 f84b 	bl	8009d10 <_Balloc>
 8008c7a:	9001      	str	r0, [sp, #4]
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d13b      	bne.n	8008cf8 <_dtoa_r+0x320>
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <_dtoa_r+0x2f0>)
 8008c82:	4602      	mov	r2, r0
 8008c84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c88:	e6c0      	b.n	8008a0c <_dtoa_r+0x34>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e7df      	b.n	8008c4e <_dtoa_r+0x276>
 8008c8e:	bf00      	nop
 8008c90:	636f4361 	.word	0x636f4361
 8008c94:	3fd287a7 	.word	0x3fd287a7
 8008c98:	8b60c8b3 	.word	0x8b60c8b3
 8008c9c:	3fc68a28 	.word	0x3fc68a28
 8008ca0:	509f79fb 	.word	0x509f79fb
 8008ca4:	3fd34413 	.word	0x3fd34413
 8008ca8:	0800c0ae 	.word	0x0800c0ae
 8008cac:	0800c0c5 	.word	0x0800c0c5
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	0800c0aa 	.word	0x0800c0aa
 8008cb8:	0800c0a1 	.word	0x0800c0a1
 8008cbc:	0800c31a 	.word	0x0800c31a
 8008cc0:	3ff80000 	.word	0x3ff80000
 8008cc4:	0800c230 	.word	0x0800c230
 8008cc8:	0800c120 	.word	0x0800c120
 8008ccc:	2501      	movs	r5, #1
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9306      	str	r3, [sp, #24]
 8008cd2:	9508      	str	r5, [sp, #32]
 8008cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2312      	movs	r3, #18
 8008ce0:	e7b0      	b.n	8008c44 <_dtoa_r+0x26c>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	9308      	str	r3, [sp, #32]
 8008ce6:	e7f5      	b.n	8008cd4 <_dtoa_r+0x2fc>
 8008ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cee:	e7b8      	b.n	8008c62 <_dtoa_r+0x28a>
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	6041      	str	r1, [r0, #4]
 8008cf4:	0052      	lsls	r2, r2, #1
 8008cf6:	e7b8      	b.n	8008c6a <_dtoa_r+0x292>
 8008cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	2b0e      	cmp	r3, #14
 8008d02:	f200 809d 	bhi.w	8008e40 <_dtoa_r+0x468>
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	f000 809a 	beq.w	8008e40 <_dtoa_r+0x468>
 8008d0c:	9b00      	ldr	r3, [sp, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	dd32      	ble.n	8008d78 <_dtoa_r+0x3a0>
 8008d12:	4ab7      	ldr	r2, [pc, #732]	; (8008ff0 <_dtoa_r+0x618>)
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d20:	9b00      	ldr	r3, [sp, #0]
 8008d22:	05d8      	lsls	r0, r3, #23
 8008d24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d28:	d516      	bpl.n	8008d58 <_dtoa_r+0x380>
 8008d2a:	4bb2      	ldr	r3, [pc, #712]	; (8008ff4 <_dtoa_r+0x61c>)
 8008d2c:	ec51 0b19 	vmov	r0, r1, d9
 8008d30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d34:	f7f7 fdaa 	bl	800088c <__aeabi_ddiv>
 8008d38:	f007 070f 	and.w	r7, r7, #15
 8008d3c:	4682      	mov	sl, r0
 8008d3e:	468b      	mov	fp, r1
 8008d40:	2503      	movs	r5, #3
 8008d42:	4eac      	ldr	r6, [pc, #688]	; (8008ff4 <_dtoa_r+0x61c>)
 8008d44:	b957      	cbnz	r7, 8008d5c <_dtoa_r+0x384>
 8008d46:	4642      	mov	r2, r8
 8008d48:	464b      	mov	r3, r9
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	f7f7 fd9d 	bl	800088c <__aeabi_ddiv>
 8008d52:	4682      	mov	sl, r0
 8008d54:	468b      	mov	fp, r1
 8008d56:	e028      	b.n	8008daa <_dtoa_r+0x3d2>
 8008d58:	2502      	movs	r5, #2
 8008d5a:	e7f2      	b.n	8008d42 <_dtoa_r+0x36a>
 8008d5c:	07f9      	lsls	r1, r7, #31
 8008d5e:	d508      	bpl.n	8008d72 <_dtoa_r+0x39a>
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d68:	f7f7 fc66 	bl	8000638 <__aeabi_dmul>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	4680      	mov	r8, r0
 8008d70:	4689      	mov	r9, r1
 8008d72:	107f      	asrs	r7, r7, #1
 8008d74:	3608      	adds	r6, #8
 8008d76:	e7e5      	b.n	8008d44 <_dtoa_r+0x36c>
 8008d78:	f000 809b 	beq.w	8008eb2 <_dtoa_r+0x4da>
 8008d7c:	9b00      	ldr	r3, [sp, #0]
 8008d7e:	4f9d      	ldr	r7, [pc, #628]	; (8008ff4 <_dtoa_r+0x61c>)
 8008d80:	425e      	negs	r6, r3
 8008d82:	4b9b      	ldr	r3, [pc, #620]	; (8008ff0 <_dtoa_r+0x618>)
 8008d84:	f006 020f 	and.w	r2, r6, #15
 8008d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	ec51 0b19 	vmov	r0, r1, d9
 8008d94:	f7f7 fc50 	bl	8000638 <__aeabi_dmul>
 8008d98:	1136      	asrs	r6, r6, #4
 8008d9a:	4682      	mov	sl, r0
 8008d9c:	468b      	mov	fp, r1
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2502      	movs	r5, #2
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d17a      	bne.n	8008e9c <_dtoa_r+0x4c4>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1d3      	bne.n	8008d52 <_dtoa_r+0x37a>
 8008daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8082 	beq.w	8008eb6 <_dtoa_r+0x4de>
 8008db2:	4b91      	ldr	r3, [pc, #580]	; (8008ff8 <_dtoa_r+0x620>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	4650      	mov	r0, sl
 8008db8:	4659      	mov	r1, fp
 8008dba:	f7f7 feaf 	bl	8000b1c <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d079      	beq.n	8008eb6 <_dtoa_r+0x4de>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d076      	beq.n	8008eb6 <_dtoa_r+0x4de>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd36      	ble.n	8008e3c <_dtoa_r+0x464>
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	4659      	mov	r1, fp
 8008dd4:	1e5f      	subs	r7, r3, #1
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4b88      	ldr	r3, [pc, #544]	; (8008ffc <_dtoa_r+0x624>)
 8008dda:	f7f7 fc2d 	bl	8000638 <__aeabi_dmul>
 8008dde:	9e02      	ldr	r6, [sp, #8]
 8008de0:	4682      	mov	sl, r0
 8008de2:	468b      	mov	fp, r1
 8008de4:	3501      	adds	r5, #1
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7f7 fbbc 	bl	8000564 <__aeabi_i2d>
 8008dec:	4652      	mov	r2, sl
 8008dee:	465b      	mov	r3, fp
 8008df0:	f7f7 fc22 	bl	8000638 <__aeabi_dmul>
 8008df4:	4b82      	ldr	r3, [pc, #520]	; (8009000 <_dtoa_r+0x628>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	f7f7 fa68 	bl	80002cc <__adddf3>
 8008dfc:	46d0      	mov	r8, sl
 8008dfe:	46d9      	mov	r9, fp
 8008e00:	4682      	mov	sl, r0
 8008e02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	d158      	bne.n	8008ebc <_dtoa_r+0x4e4>
 8008e0a:	4b7e      	ldr	r3, [pc, #504]	; (8009004 <_dtoa_r+0x62c>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4640      	mov	r0, r8
 8008e10:	4649      	mov	r1, r9
 8008e12:	f7f7 fa59 	bl	80002c8 <__aeabi_dsub>
 8008e16:	4652      	mov	r2, sl
 8008e18:	465b      	mov	r3, fp
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	4689      	mov	r9, r1
 8008e1e:	f7f7 fe9b 	bl	8000b58 <__aeabi_dcmpgt>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f040 8295 	bne.w	8009352 <_dtoa_r+0x97a>
 8008e28:	4652      	mov	r2, sl
 8008e2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fe73 	bl	8000b1c <__aeabi_dcmplt>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f040 8289 	bne.w	800934e <_dtoa_r+0x976>
 8008e3c:	ec5b ab19 	vmov	sl, fp, d9
 8008e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f2c0 8148 	blt.w	80090d8 <_dtoa_r+0x700>
 8008e48:	9a00      	ldr	r2, [sp, #0]
 8008e4a:	2a0e      	cmp	r2, #14
 8008e4c:	f300 8144 	bgt.w	80090d8 <_dtoa_r+0x700>
 8008e50:	4b67      	ldr	r3, [pc, #412]	; (8008ff0 <_dtoa_r+0x618>)
 8008e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f280 80d5 	bge.w	800900c <_dtoa_r+0x634>
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f300 80d1 	bgt.w	800900c <_dtoa_r+0x634>
 8008e6a:	f040 826f 	bne.w	800934c <_dtoa_r+0x974>
 8008e6e:	4b65      	ldr	r3, [pc, #404]	; (8009004 <_dtoa_r+0x62c>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 fbdf 	bl	8000638 <__aeabi_dmul>
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	465b      	mov	r3, fp
 8008e7e:	f7f7 fe61 	bl	8000b44 <__aeabi_dcmpge>
 8008e82:	9e03      	ldr	r6, [sp, #12]
 8008e84:	4637      	mov	r7, r6
 8008e86:	2800      	cmp	r0, #0
 8008e88:	f040 8245 	bne.w	8009316 <_dtoa_r+0x93e>
 8008e8c:	9d01      	ldr	r5, [sp, #4]
 8008e8e:	2331      	movs	r3, #49	; 0x31
 8008e90:	f805 3b01 	strb.w	r3, [r5], #1
 8008e94:	9b00      	ldr	r3, [sp, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	e240      	b.n	800931e <_dtoa_r+0x946>
 8008e9c:	07f2      	lsls	r2, r6, #31
 8008e9e:	d505      	bpl.n	8008eac <_dtoa_r+0x4d4>
 8008ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	2301      	movs	r3, #1
 8008eac:	1076      	asrs	r6, r6, #1
 8008eae:	3708      	adds	r7, #8
 8008eb0:	e777      	b.n	8008da2 <_dtoa_r+0x3ca>
 8008eb2:	2502      	movs	r5, #2
 8008eb4:	e779      	b.n	8008daa <_dtoa_r+0x3d2>
 8008eb6:	9f00      	ldr	r7, [sp, #0]
 8008eb8:	9e03      	ldr	r6, [sp, #12]
 8008eba:	e794      	b.n	8008de6 <_dtoa_r+0x40e>
 8008ebc:	9901      	ldr	r1, [sp, #4]
 8008ebe:	4b4c      	ldr	r3, [pc, #304]	; (8008ff0 <_dtoa_r+0x618>)
 8008ec0:	4431      	add	r1, r6
 8008ec2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ec4:	9908      	ldr	r1, [sp, #32]
 8008ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d043      	beq.n	8008f5a <_dtoa_r+0x582>
 8008ed2:	494d      	ldr	r1, [pc, #308]	; (8009008 <_dtoa_r+0x630>)
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	f7f7 fcd9 	bl	800088c <__aeabi_ddiv>
 8008eda:	4652      	mov	r2, sl
 8008edc:	465b      	mov	r3, fp
 8008ede:	f7f7 f9f3 	bl	80002c8 <__aeabi_dsub>
 8008ee2:	9d01      	ldr	r5, [sp, #4]
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	468b      	mov	fp, r1
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4640      	mov	r0, r8
 8008eec:	f7f7 fe54 	bl	8000b98 <__aeabi_d2iz>
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	f7f7 fb37 	bl	8000564 <__aeabi_i2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 f9e3 	bl	80002c8 <__aeabi_dsub>
 8008f02:	3630      	adds	r6, #48	; 0x30
 8008f04:	f805 6b01 	strb.w	r6, [r5], #1
 8008f08:	4652      	mov	r2, sl
 8008f0a:	465b      	mov	r3, fp
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	4689      	mov	r9, r1
 8008f10:	f7f7 fe04 	bl	8000b1c <__aeabi_dcmplt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d163      	bne.n	8008fe0 <_dtoa_r+0x608>
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4936      	ldr	r1, [pc, #216]	; (8008ff8 <_dtoa_r+0x620>)
 8008f1e:	2000      	movs	r0, #0
 8008f20:	f7f7 f9d2 	bl	80002c8 <__aeabi_dsub>
 8008f24:	4652      	mov	r2, sl
 8008f26:	465b      	mov	r3, fp
 8008f28:	f7f7 fdf8 	bl	8000b1c <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f040 80b5 	bne.w	800909c <_dtoa_r+0x6c4>
 8008f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f34:	429d      	cmp	r5, r3
 8008f36:	d081      	beq.n	8008e3c <_dtoa_r+0x464>
 8008f38:	4b30      	ldr	r3, [pc, #192]	; (8008ffc <_dtoa_r+0x624>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	4659      	mov	r1, fp
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	4b2d      	ldr	r3, [pc, #180]	; (8008ffc <_dtoa_r+0x624>)
 8008f46:	4682      	mov	sl, r0
 8008f48:	468b      	mov	fp, r1
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f7f7 fb72 	bl	8000638 <__aeabi_dmul>
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	e7c6      	b.n	8008ee8 <_dtoa_r+0x510>
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	f7f7 fb6b 	bl	8000638 <__aeabi_dmul>
 8008f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f64:	9d01      	ldr	r5, [sp, #4]
 8008f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f68:	4682      	mov	sl, r0
 8008f6a:	468b      	mov	fp, r1
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7f7 fe12 	bl	8000b98 <__aeabi_d2iz>
 8008f74:	4606      	mov	r6, r0
 8008f76:	f7f7 faf5 	bl	8000564 <__aeabi_i2d>
 8008f7a:	3630      	adds	r6, #48	; 0x30
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	f7f7 f9a0 	bl	80002c8 <__aeabi_dsub>
 8008f88:	f805 6b01 	strb.w	r6, [r5], #1
 8008f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f8e:	429d      	cmp	r5, r3
 8008f90:	4680      	mov	r8, r0
 8008f92:	4689      	mov	r9, r1
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	d124      	bne.n	8008fe4 <_dtoa_r+0x60c>
 8008f9a:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <_dtoa_r+0x630>)
 8008f9c:	4650      	mov	r0, sl
 8008f9e:	4659      	mov	r1, fp
 8008fa0:	f7f7 f994 	bl	80002cc <__adddf3>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	f7f7 fdd4 	bl	8000b58 <__aeabi_dcmpgt>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d173      	bne.n	800909c <_dtoa_r+0x6c4>
 8008fb4:	4652      	mov	r2, sl
 8008fb6:	465b      	mov	r3, fp
 8008fb8:	4913      	ldr	r1, [pc, #76]	; (8009008 <_dtoa_r+0x630>)
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f7f7 f984 	bl	80002c8 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f af35 	beq.w	8008e3c <_dtoa_r+0x464>
 8008fd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fd4:	1e6b      	subs	r3, r5, #1
 8008fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fdc:	2b30      	cmp	r3, #48	; 0x30
 8008fde:	d0f8      	beq.n	8008fd2 <_dtoa_r+0x5fa>
 8008fe0:	9700      	str	r7, [sp, #0]
 8008fe2:	e049      	b.n	8009078 <_dtoa_r+0x6a0>
 8008fe4:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <_dtoa_r+0x624>)
 8008fe6:	f7f7 fb27 	bl	8000638 <__aeabi_dmul>
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	e7bd      	b.n	8008f6c <_dtoa_r+0x594>
 8008ff0:	0800c230 	.word	0x0800c230
 8008ff4:	0800c208 	.word	0x0800c208
 8008ff8:	3ff00000 	.word	0x3ff00000
 8008ffc:	40240000 	.word	0x40240000
 8009000:	401c0000 	.word	0x401c0000
 8009004:	40140000 	.word	0x40140000
 8009008:	3fe00000 	.word	0x3fe00000
 800900c:	9d01      	ldr	r5, [sp, #4]
 800900e:	4656      	mov	r6, sl
 8009010:	465f      	mov	r7, fp
 8009012:	4642      	mov	r2, r8
 8009014:	464b      	mov	r3, r9
 8009016:	4630      	mov	r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	f7f7 fc37 	bl	800088c <__aeabi_ddiv>
 800901e:	f7f7 fdbb 	bl	8000b98 <__aeabi_d2iz>
 8009022:	4682      	mov	sl, r0
 8009024:	f7f7 fa9e 	bl	8000564 <__aeabi_i2d>
 8009028:	4642      	mov	r2, r8
 800902a:	464b      	mov	r3, r9
 800902c:	f7f7 fb04 	bl	8000638 <__aeabi_dmul>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800903c:	f7f7 f944 	bl	80002c8 <__aeabi_dsub>
 8009040:	f805 6b01 	strb.w	r6, [r5], #1
 8009044:	9e01      	ldr	r6, [sp, #4]
 8009046:	9f03      	ldr	r7, [sp, #12]
 8009048:	1bae      	subs	r6, r5, r6
 800904a:	42b7      	cmp	r7, r6
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	d135      	bne.n	80090be <_dtoa_r+0x6e6>
 8009052:	f7f7 f93b 	bl	80002cc <__adddf3>
 8009056:	4642      	mov	r2, r8
 8009058:	464b      	mov	r3, r9
 800905a:	4606      	mov	r6, r0
 800905c:	460f      	mov	r7, r1
 800905e:	f7f7 fd7b 	bl	8000b58 <__aeabi_dcmpgt>
 8009062:	b9d0      	cbnz	r0, 800909a <_dtoa_r+0x6c2>
 8009064:	4642      	mov	r2, r8
 8009066:	464b      	mov	r3, r9
 8009068:	4630      	mov	r0, r6
 800906a:	4639      	mov	r1, r7
 800906c:	f7f7 fd4c 	bl	8000b08 <__aeabi_dcmpeq>
 8009070:	b110      	cbz	r0, 8009078 <_dtoa_r+0x6a0>
 8009072:	f01a 0f01 	tst.w	sl, #1
 8009076:	d110      	bne.n	800909a <_dtoa_r+0x6c2>
 8009078:	4620      	mov	r0, r4
 800907a:	ee18 1a10 	vmov	r1, s16
 800907e:	f000 fe87 	bl	8009d90 <_Bfree>
 8009082:	2300      	movs	r3, #0
 8009084:	9800      	ldr	r0, [sp, #0]
 8009086:	702b      	strb	r3, [r5, #0]
 8009088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800908a:	3001      	adds	r0, #1
 800908c:	6018      	str	r0, [r3, #0]
 800908e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009090:	2b00      	cmp	r3, #0
 8009092:	f43f acf1 	beq.w	8008a78 <_dtoa_r+0xa0>
 8009096:	601d      	str	r5, [r3, #0]
 8009098:	e4ee      	b.n	8008a78 <_dtoa_r+0xa0>
 800909a:	9f00      	ldr	r7, [sp, #0]
 800909c:	462b      	mov	r3, r5
 800909e:	461d      	mov	r5, r3
 80090a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090a4:	2a39      	cmp	r2, #57	; 0x39
 80090a6:	d106      	bne.n	80090b6 <_dtoa_r+0x6de>
 80090a8:	9a01      	ldr	r2, [sp, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d1f7      	bne.n	800909e <_dtoa_r+0x6c6>
 80090ae:	9901      	ldr	r1, [sp, #4]
 80090b0:	2230      	movs	r2, #48	; 0x30
 80090b2:	3701      	adds	r7, #1
 80090b4:	700a      	strb	r2, [r1, #0]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	3201      	adds	r2, #1
 80090ba:	701a      	strb	r2, [r3, #0]
 80090bc:	e790      	b.n	8008fe0 <_dtoa_r+0x608>
 80090be:	4ba6      	ldr	r3, [pc, #664]	; (8009358 <_dtoa_r+0x980>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	f7f7 fab9 	bl	8000638 <__aeabi_dmul>
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	4606      	mov	r6, r0
 80090cc:	460f      	mov	r7, r1
 80090ce:	f7f7 fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d09d      	beq.n	8009012 <_dtoa_r+0x63a>
 80090d6:	e7cf      	b.n	8009078 <_dtoa_r+0x6a0>
 80090d8:	9a08      	ldr	r2, [sp, #32]
 80090da:	2a00      	cmp	r2, #0
 80090dc:	f000 80d7 	beq.w	800928e <_dtoa_r+0x8b6>
 80090e0:	9a06      	ldr	r2, [sp, #24]
 80090e2:	2a01      	cmp	r2, #1
 80090e4:	f300 80ba 	bgt.w	800925c <_dtoa_r+0x884>
 80090e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	f000 80b2 	beq.w	8009254 <_dtoa_r+0x87c>
 80090f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090f4:	9e07      	ldr	r6, [sp, #28]
 80090f6:	9d04      	ldr	r5, [sp, #16]
 80090f8:	9a04      	ldr	r2, [sp, #16]
 80090fa:	441a      	add	r2, r3
 80090fc:	9204      	str	r2, [sp, #16]
 80090fe:	9a05      	ldr	r2, [sp, #20]
 8009100:	2101      	movs	r1, #1
 8009102:	441a      	add	r2, r3
 8009104:	4620      	mov	r0, r4
 8009106:	9205      	str	r2, [sp, #20]
 8009108:	f000 ff44 	bl	8009f94 <__i2b>
 800910c:	4607      	mov	r7, r0
 800910e:	2d00      	cmp	r5, #0
 8009110:	dd0c      	ble.n	800912c <_dtoa_r+0x754>
 8009112:	9b05      	ldr	r3, [sp, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dd09      	ble.n	800912c <_dtoa_r+0x754>
 8009118:	42ab      	cmp	r3, r5
 800911a:	9a04      	ldr	r2, [sp, #16]
 800911c:	bfa8      	it	ge
 800911e:	462b      	movge	r3, r5
 8009120:	1ad2      	subs	r2, r2, r3
 8009122:	9204      	str	r2, [sp, #16]
 8009124:	9a05      	ldr	r2, [sp, #20]
 8009126:	1aed      	subs	r5, r5, r3
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	9b07      	ldr	r3, [sp, #28]
 800912e:	b31b      	cbz	r3, 8009178 <_dtoa_r+0x7a0>
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80af 	beq.w	8009296 <_dtoa_r+0x8be>
 8009138:	2e00      	cmp	r6, #0
 800913a:	dd13      	ble.n	8009164 <_dtoa_r+0x78c>
 800913c:	4639      	mov	r1, r7
 800913e:	4632      	mov	r2, r6
 8009140:	4620      	mov	r0, r4
 8009142:	f000 ffe7 	bl	800a114 <__pow5mult>
 8009146:	ee18 2a10 	vmov	r2, s16
 800914a:	4601      	mov	r1, r0
 800914c:	4607      	mov	r7, r0
 800914e:	4620      	mov	r0, r4
 8009150:	f000 ff36 	bl	8009fc0 <__multiply>
 8009154:	ee18 1a10 	vmov	r1, s16
 8009158:	4680      	mov	r8, r0
 800915a:	4620      	mov	r0, r4
 800915c:	f000 fe18 	bl	8009d90 <_Bfree>
 8009160:	ee08 8a10 	vmov	s16, r8
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	1b9a      	subs	r2, r3, r6
 8009168:	d006      	beq.n	8009178 <_dtoa_r+0x7a0>
 800916a:	ee18 1a10 	vmov	r1, s16
 800916e:	4620      	mov	r0, r4
 8009170:	f000 ffd0 	bl	800a114 <__pow5mult>
 8009174:	ee08 0a10 	vmov	s16, r0
 8009178:	2101      	movs	r1, #1
 800917a:	4620      	mov	r0, r4
 800917c:	f000 ff0a 	bl	8009f94 <__i2b>
 8009180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	4606      	mov	r6, r0
 8009186:	f340 8088 	ble.w	800929a <_dtoa_r+0x8c2>
 800918a:	461a      	mov	r2, r3
 800918c:	4601      	mov	r1, r0
 800918e:	4620      	mov	r0, r4
 8009190:	f000 ffc0 	bl	800a114 <__pow5mult>
 8009194:	9b06      	ldr	r3, [sp, #24]
 8009196:	2b01      	cmp	r3, #1
 8009198:	4606      	mov	r6, r0
 800919a:	f340 8081 	ble.w	80092a0 <_dtoa_r+0x8c8>
 800919e:	f04f 0800 	mov.w	r8, #0
 80091a2:	6933      	ldr	r3, [r6, #16]
 80091a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091a8:	6918      	ldr	r0, [r3, #16]
 80091aa:	f000 fea3 	bl	8009ef4 <__hi0bits>
 80091ae:	f1c0 0020 	rsb	r0, r0, #32
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	4418      	add	r0, r3
 80091b6:	f010 001f 	ands.w	r0, r0, #31
 80091ba:	f000 8092 	beq.w	80092e2 <_dtoa_r+0x90a>
 80091be:	f1c0 0320 	rsb	r3, r0, #32
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	f340 808a 	ble.w	80092dc <_dtoa_r+0x904>
 80091c8:	f1c0 001c 	rsb	r0, r0, #28
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	4403      	add	r3, r0
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	4403      	add	r3, r0
 80091d6:	4405      	add	r5, r0
 80091d8:	9305      	str	r3, [sp, #20]
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dd07      	ble.n	80091f0 <_dtoa_r+0x818>
 80091e0:	ee18 1a10 	vmov	r1, s16
 80091e4:	461a      	mov	r2, r3
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 ffee 	bl	800a1c8 <__lshift>
 80091ec:	ee08 0a10 	vmov	s16, r0
 80091f0:	9b05      	ldr	r3, [sp, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd05      	ble.n	8009202 <_dtoa_r+0x82a>
 80091f6:	4631      	mov	r1, r6
 80091f8:	461a      	mov	r2, r3
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 ffe4 	bl	800a1c8 <__lshift>
 8009200:	4606      	mov	r6, r0
 8009202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d06e      	beq.n	80092e6 <_dtoa_r+0x90e>
 8009208:	ee18 0a10 	vmov	r0, s16
 800920c:	4631      	mov	r1, r6
 800920e:	f001 f84b 	bl	800a2a8 <__mcmp>
 8009212:	2800      	cmp	r0, #0
 8009214:	da67      	bge.n	80092e6 <_dtoa_r+0x90e>
 8009216:	9b00      	ldr	r3, [sp, #0]
 8009218:	3b01      	subs	r3, #1
 800921a:	ee18 1a10 	vmov	r1, s16
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	220a      	movs	r2, #10
 8009222:	2300      	movs	r3, #0
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fdd5 	bl	8009dd4 <__multadd>
 800922a:	9b08      	ldr	r3, [sp, #32]
 800922c:	ee08 0a10 	vmov	s16, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 81b1 	beq.w	8009598 <_dtoa_r+0xbc0>
 8009236:	2300      	movs	r3, #0
 8009238:	4639      	mov	r1, r7
 800923a:	220a      	movs	r2, #10
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fdc9 	bl	8009dd4 <__multadd>
 8009242:	9b02      	ldr	r3, [sp, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	4607      	mov	r7, r0
 8009248:	f300 808e 	bgt.w	8009368 <_dtoa_r+0x990>
 800924c:	9b06      	ldr	r3, [sp, #24]
 800924e:	2b02      	cmp	r3, #2
 8009250:	dc51      	bgt.n	80092f6 <_dtoa_r+0x91e>
 8009252:	e089      	b.n	8009368 <_dtoa_r+0x990>
 8009254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800925a:	e74b      	b.n	80090f4 <_dtoa_r+0x71c>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1e5e      	subs	r6, r3, #1
 8009260:	9b07      	ldr	r3, [sp, #28]
 8009262:	42b3      	cmp	r3, r6
 8009264:	bfbf      	itttt	lt
 8009266:	9b07      	ldrlt	r3, [sp, #28]
 8009268:	9607      	strlt	r6, [sp, #28]
 800926a:	1af2      	sublt	r2, r6, r3
 800926c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800926e:	bfb6      	itet	lt
 8009270:	189b      	addlt	r3, r3, r2
 8009272:	1b9e      	subge	r6, r3, r6
 8009274:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	bfb8      	it	lt
 800927a:	2600      	movlt	r6, #0
 800927c:	2b00      	cmp	r3, #0
 800927e:	bfb7      	itett	lt
 8009280:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009284:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009288:	1a9d      	sublt	r5, r3, r2
 800928a:	2300      	movlt	r3, #0
 800928c:	e734      	b.n	80090f8 <_dtoa_r+0x720>
 800928e:	9e07      	ldr	r6, [sp, #28]
 8009290:	9d04      	ldr	r5, [sp, #16]
 8009292:	9f08      	ldr	r7, [sp, #32]
 8009294:	e73b      	b.n	800910e <_dtoa_r+0x736>
 8009296:	9a07      	ldr	r2, [sp, #28]
 8009298:	e767      	b.n	800916a <_dtoa_r+0x792>
 800929a:	9b06      	ldr	r3, [sp, #24]
 800929c:	2b01      	cmp	r3, #1
 800929e:	dc18      	bgt.n	80092d2 <_dtoa_r+0x8fa>
 80092a0:	f1ba 0f00 	cmp.w	sl, #0
 80092a4:	d115      	bne.n	80092d2 <_dtoa_r+0x8fa>
 80092a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092aa:	b993      	cbnz	r3, 80092d2 <_dtoa_r+0x8fa>
 80092ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092b0:	0d1b      	lsrs	r3, r3, #20
 80092b2:	051b      	lsls	r3, r3, #20
 80092b4:	b183      	cbz	r3, 80092d8 <_dtoa_r+0x900>
 80092b6:	9b04      	ldr	r3, [sp, #16]
 80092b8:	3301      	adds	r3, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	3301      	adds	r3, #1
 80092c0:	9305      	str	r3, [sp, #20]
 80092c2:	f04f 0801 	mov.w	r8, #1
 80092c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f47f af6a 	bne.w	80091a2 <_dtoa_r+0x7ca>
 80092ce:	2001      	movs	r0, #1
 80092d0:	e76f      	b.n	80091b2 <_dtoa_r+0x7da>
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	e7f6      	b.n	80092c6 <_dtoa_r+0x8ee>
 80092d8:	4698      	mov	r8, r3
 80092da:	e7f4      	b.n	80092c6 <_dtoa_r+0x8ee>
 80092dc:	f43f af7d 	beq.w	80091da <_dtoa_r+0x802>
 80092e0:	4618      	mov	r0, r3
 80092e2:	301c      	adds	r0, #28
 80092e4:	e772      	b.n	80091cc <_dtoa_r+0x7f4>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc37      	bgt.n	800935c <_dtoa_r+0x984>
 80092ec:	9b06      	ldr	r3, [sp, #24]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dd34      	ble.n	800935c <_dtoa_r+0x984>
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	9302      	str	r3, [sp, #8]
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	b96b      	cbnz	r3, 8009316 <_dtoa_r+0x93e>
 80092fa:	4631      	mov	r1, r6
 80092fc:	2205      	movs	r2, #5
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fd68 	bl	8009dd4 <__multadd>
 8009304:	4601      	mov	r1, r0
 8009306:	4606      	mov	r6, r0
 8009308:	ee18 0a10 	vmov	r0, s16
 800930c:	f000 ffcc 	bl	800a2a8 <__mcmp>
 8009310:	2800      	cmp	r0, #0
 8009312:	f73f adbb 	bgt.w	8008e8c <_dtoa_r+0x4b4>
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	9d01      	ldr	r5, [sp, #4]
 800931a:	43db      	mvns	r3, r3
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	4631      	mov	r1, r6
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fd33 	bl	8009d90 <_Bfree>
 800932a:	2f00      	cmp	r7, #0
 800932c:	f43f aea4 	beq.w	8009078 <_dtoa_r+0x6a0>
 8009330:	f1b8 0f00 	cmp.w	r8, #0
 8009334:	d005      	beq.n	8009342 <_dtoa_r+0x96a>
 8009336:	45b8      	cmp	r8, r7
 8009338:	d003      	beq.n	8009342 <_dtoa_r+0x96a>
 800933a:	4641      	mov	r1, r8
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fd27 	bl	8009d90 <_Bfree>
 8009342:	4639      	mov	r1, r7
 8009344:	4620      	mov	r0, r4
 8009346:	f000 fd23 	bl	8009d90 <_Bfree>
 800934a:	e695      	b.n	8009078 <_dtoa_r+0x6a0>
 800934c:	2600      	movs	r6, #0
 800934e:	4637      	mov	r7, r6
 8009350:	e7e1      	b.n	8009316 <_dtoa_r+0x93e>
 8009352:	9700      	str	r7, [sp, #0]
 8009354:	4637      	mov	r7, r6
 8009356:	e599      	b.n	8008e8c <_dtoa_r+0x4b4>
 8009358:	40240000 	.word	0x40240000
 800935c:	9b08      	ldr	r3, [sp, #32]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80ca 	beq.w	80094f8 <_dtoa_r+0xb20>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	2d00      	cmp	r5, #0
 800936a:	dd05      	ble.n	8009378 <_dtoa_r+0x9a0>
 800936c:	4639      	mov	r1, r7
 800936e:	462a      	mov	r2, r5
 8009370:	4620      	mov	r0, r4
 8009372:	f000 ff29 	bl	800a1c8 <__lshift>
 8009376:	4607      	mov	r7, r0
 8009378:	f1b8 0f00 	cmp.w	r8, #0
 800937c:	d05b      	beq.n	8009436 <_dtoa_r+0xa5e>
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fcc5 	bl	8009d10 <_Balloc>
 8009386:	4605      	mov	r5, r0
 8009388:	b928      	cbnz	r0, 8009396 <_dtoa_r+0x9be>
 800938a:	4b87      	ldr	r3, [pc, #540]	; (80095a8 <_dtoa_r+0xbd0>)
 800938c:	4602      	mov	r2, r0
 800938e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009392:	f7ff bb3b 	b.w	8008a0c <_dtoa_r+0x34>
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	3202      	adds	r2, #2
 800939a:	0092      	lsls	r2, r2, #2
 800939c:	f107 010c 	add.w	r1, r7, #12
 80093a0:	300c      	adds	r0, #12
 80093a2:	f000 fca7 	bl	8009cf4 <memcpy>
 80093a6:	2201      	movs	r2, #1
 80093a8:	4629      	mov	r1, r5
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 ff0c 	bl	800a1c8 <__lshift>
 80093b0:	9b01      	ldr	r3, [sp, #4]
 80093b2:	f103 0901 	add.w	r9, r3, #1
 80093b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093ba:	4413      	add	r3, r2
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	f00a 0301 	and.w	r3, sl, #1
 80093c2:	46b8      	mov	r8, r7
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	4607      	mov	r7, r0
 80093c8:	4631      	mov	r1, r6
 80093ca:	ee18 0a10 	vmov	r0, s16
 80093ce:	f7ff fa75 	bl	80088bc <quorem>
 80093d2:	4641      	mov	r1, r8
 80093d4:	9002      	str	r0, [sp, #8]
 80093d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093da:	ee18 0a10 	vmov	r0, s16
 80093de:	f000 ff63 	bl	800a2a8 <__mcmp>
 80093e2:	463a      	mov	r2, r7
 80093e4:	9003      	str	r0, [sp, #12]
 80093e6:	4631      	mov	r1, r6
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 ff79 	bl	800a2e0 <__mdiff>
 80093ee:	68c2      	ldr	r2, [r0, #12]
 80093f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80093f4:	4605      	mov	r5, r0
 80093f6:	bb02      	cbnz	r2, 800943a <_dtoa_r+0xa62>
 80093f8:	4601      	mov	r1, r0
 80093fa:	ee18 0a10 	vmov	r0, s16
 80093fe:	f000 ff53 	bl	800a2a8 <__mcmp>
 8009402:	4602      	mov	r2, r0
 8009404:	4629      	mov	r1, r5
 8009406:	4620      	mov	r0, r4
 8009408:	9207      	str	r2, [sp, #28]
 800940a:	f000 fcc1 	bl	8009d90 <_Bfree>
 800940e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009412:	ea43 0102 	orr.w	r1, r3, r2
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	430b      	orrs	r3, r1
 800941a:	464d      	mov	r5, r9
 800941c:	d10f      	bne.n	800943e <_dtoa_r+0xa66>
 800941e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009422:	d02a      	beq.n	800947a <_dtoa_r+0xaa2>
 8009424:	9b03      	ldr	r3, [sp, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dd02      	ble.n	8009430 <_dtoa_r+0xa58>
 800942a:	9b02      	ldr	r3, [sp, #8]
 800942c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009430:	f88b a000 	strb.w	sl, [fp]
 8009434:	e775      	b.n	8009322 <_dtoa_r+0x94a>
 8009436:	4638      	mov	r0, r7
 8009438:	e7ba      	b.n	80093b0 <_dtoa_r+0x9d8>
 800943a:	2201      	movs	r2, #1
 800943c:	e7e2      	b.n	8009404 <_dtoa_r+0xa2c>
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	db04      	blt.n	800944e <_dtoa_r+0xa76>
 8009444:	9906      	ldr	r1, [sp, #24]
 8009446:	430b      	orrs	r3, r1
 8009448:	9904      	ldr	r1, [sp, #16]
 800944a:	430b      	orrs	r3, r1
 800944c:	d122      	bne.n	8009494 <_dtoa_r+0xabc>
 800944e:	2a00      	cmp	r2, #0
 8009450:	ddee      	ble.n	8009430 <_dtoa_r+0xa58>
 8009452:	ee18 1a10 	vmov	r1, s16
 8009456:	2201      	movs	r2, #1
 8009458:	4620      	mov	r0, r4
 800945a:	f000 feb5 	bl	800a1c8 <__lshift>
 800945e:	4631      	mov	r1, r6
 8009460:	ee08 0a10 	vmov	s16, r0
 8009464:	f000 ff20 	bl	800a2a8 <__mcmp>
 8009468:	2800      	cmp	r0, #0
 800946a:	dc03      	bgt.n	8009474 <_dtoa_r+0xa9c>
 800946c:	d1e0      	bne.n	8009430 <_dtoa_r+0xa58>
 800946e:	f01a 0f01 	tst.w	sl, #1
 8009472:	d0dd      	beq.n	8009430 <_dtoa_r+0xa58>
 8009474:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009478:	d1d7      	bne.n	800942a <_dtoa_r+0xa52>
 800947a:	2339      	movs	r3, #57	; 0x39
 800947c:	f88b 3000 	strb.w	r3, [fp]
 8009480:	462b      	mov	r3, r5
 8009482:	461d      	mov	r5, r3
 8009484:	3b01      	subs	r3, #1
 8009486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800948a:	2a39      	cmp	r2, #57	; 0x39
 800948c:	d071      	beq.n	8009572 <_dtoa_r+0xb9a>
 800948e:	3201      	adds	r2, #1
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	e746      	b.n	8009322 <_dtoa_r+0x94a>
 8009494:	2a00      	cmp	r2, #0
 8009496:	dd07      	ble.n	80094a8 <_dtoa_r+0xad0>
 8009498:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800949c:	d0ed      	beq.n	800947a <_dtoa_r+0xaa2>
 800949e:	f10a 0301 	add.w	r3, sl, #1
 80094a2:	f88b 3000 	strb.w	r3, [fp]
 80094a6:	e73c      	b.n	8009322 <_dtoa_r+0x94a>
 80094a8:	9b05      	ldr	r3, [sp, #20]
 80094aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094ae:	4599      	cmp	r9, r3
 80094b0:	d047      	beq.n	8009542 <_dtoa_r+0xb6a>
 80094b2:	ee18 1a10 	vmov	r1, s16
 80094b6:	2300      	movs	r3, #0
 80094b8:	220a      	movs	r2, #10
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fc8a 	bl	8009dd4 <__multadd>
 80094c0:	45b8      	cmp	r8, r7
 80094c2:	ee08 0a10 	vmov	s16, r0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	f04f 020a 	mov.w	r2, #10
 80094ce:	4641      	mov	r1, r8
 80094d0:	4620      	mov	r0, r4
 80094d2:	d106      	bne.n	80094e2 <_dtoa_r+0xb0a>
 80094d4:	f000 fc7e 	bl	8009dd4 <__multadd>
 80094d8:	4680      	mov	r8, r0
 80094da:	4607      	mov	r7, r0
 80094dc:	f109 0901 	add.w	r9, r9, #1
 80094e0:	e772      	b.n	80093c8 <_dtoa_r+0x9f0>
 80094e2:	f000 fc77 	bl	8009dd4 <__multadd>
 80094e6:	4639      	mov	r1, r7
 80094e8:	4680      	mov	r8, r0
 80094ea:	2300      	movs	r3, #0
 80094ec:	220a      	movs	r2, #10
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fc70 	bl	8009dd4 <__multadd>
 80094f4:	4607      	mov	r7, r0
 80094f6:	e7f1      	b.n	80094dc <_dtoa_r+0xb04>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	9d01      	ldr	r5, [sp, #4]
 80094fe:	ee18 0a10 	vmov	r0, s16
 8009502:	4631      	mov	r1, r6
 8009504:	f7ff f9da 	bl	80088bc <quorem>
 8009508:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800950c:	9b01      	ldr	r3, [sp, #4]
 800950e:	f805 ab01 	strb.w	sl, [r5], #1
 8009512:	1aea      	subs	r2, r5, r3
 8009514:	9b02      	ldr	r3, [sp, #8]
 8009516:	4293      	cmp	r3, r2
 8009518:	dd09      	ble.n	800952e <_dtoa_r+0xb56>
 800951a:	ee18 1a10 	vmov	r1, s16
 800951e:	2300      	movs	r3, #0
 8009520:	220a      	movs	r2, #10
 8009522:	4620      	mov	r0, r4
 8009524:	f000 fc56 	bl	8009dd4 <__multadd>
 8009528:	ee08 0a10 	vmov	s16, r0
 800952c:	e7e7      	b.n	80094fe <_dtoa_r+0xb26>
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	bfc8      	it	gt
 8009534:	461d      	movgt	r5, r3
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	bfd8      	it	le
 800953a:	2501      	movle	r5, #1
 800953c:	441d      	add	r5, r3
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	ee18 1a10 	vmov	r1, s16
 8009546:	2201      	movs	r2, #1
 8009548:	4620      	mov	r0, r4
 800954a:	f000 fe3d 	bl	800a1c8 <__lshift>
 800954e:	4631      	mov	r1, r6
 8009550:	ee08 0a10 	vmov	s16, r0
 8009554:	f000 fea8 	bl	800a2a8 <__mcmp>
 8009558:	2800      	cmp	r0, #0
 800955a:	dc91      	bgt.n	8009480 <_dtoa_r+0xaa8>
 800955c:	d102      	bne.n	8009564 <_dtoa_r+0xb8c>
 800955e:	f01a 0f01 	tst.w	sl, #1
 8009562:	d18d      	bne.n	8009480 <_dtoa_r+0xaa8>
 8009564:	462b      	mov	r3, r5
 8009566:	461d      	mov	r5, r3
 8009568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800956c:	2a30      	cmp	r2, #48	; 0x30
 800956e:	d0fa      	beq.n	8009566 <_dtoa_r+0xb8e>
 8009570:	e6d7      	b.n	8009322 <_dtoa_r+0x94a>
 8009572:	9a01      	ldr	r2, [sp, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	d184      	bne.n	8009482 <_dtoa_r+0xaaa>
 8009578:	9b00      	ldr	r3, [sp, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	2331      	movs	r3, #49	; 0x31
 8009580:	7013      	strb	r3, [r2, #0]
 8009582:	e6ce      	b.n	8009322 <_dtoa_r+0x94a>
 8009584:	4b09      	ldr	r3, [pc, #36]	; (80095ac <_dtoa_r+0xbd4>)
 8009586:	f7ff ba95 	b.w	8008ab4 <_dtoa_r+0xdc>
 800958a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800958c:	2b00      	cmp	r3, #0
 800958e:	f47f aa6e 	bne.w	8008a6e <_dtoa_r+0x96>
 8009592:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <_dtoa_r+0xbd8>)
 8009594:	f7ff ba8e 	b.w	8008ab4 <_dtoa_r+0xdc>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	dcae      	bgt.n	80094fc <_dtoa_r+0xb24>
 800959e:	9b06      	ldr	r3, [sp, #24]
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	f73f aea8 	bgt.w	80092f6 <_dtoa_r+0x91e>
 80095a6:	e7a9      	b.n	80094fc <_dtoa_r+0xb24>
 80095a8:	0800c120 	.word	0x0800c120
 80095ac:	0800c319 	.word	0x0800c319
 80095b0:	0800c0a1 	.word	0x0800c0a1

080095b4 <rshift>:
 80095b4:	6903      	ldr	r3, [r0, #16]
 80095b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095c2:	f100 0414 	add.w	r4, r0, #20
 80095c6:	dd45      	ble.n	8009654 <rshift+0xa0>
 80095c8:	f011 011f 	ands.w	r1, r1, #31
 80095cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095d4:	d10c      	bne.n	80095f0 <rshift+0x3c>
 80095d6:	f100 0710 	add.w	r7, r0, #16
 80095da:	4629      	mov	r1, r5
 80095dc:	42b1      	cmp	r1, r6
 80095de:	d334      	bcc.n	800964a <rshift+0x96>
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	1eea      	subs	r2, r5, #3
 80095e6:	4296      	cmp	r6, r2
 80095e8:	bf38      	it	cc
 80095ea:	2300      	movcc	r3, #0
 80095ec:	4423      	add	r3, r4
 80095ee:	e015      	b.n	800961c <rshift+0x68>
 80095f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095f4:	f1c1 0820 	rsb	r8, r1, #32
 80095f8:	40cf      	lsrs	r7, r1
 80095fa:	f105 0e04 	add.w	lr, r5, #4
 80095fe:	46a1      	mov	r9, r4
 8009600:	4576      	cmp	r6, lr
 8009602:	46f4      	mov	ip, lr
 8009604:	d815      	bhi.n	8009632 <rshift+0x7e>
 8009606:	1a9a      	subs	r2, r3, r2
 8009608:	0092      	lsls	r2, r2, #2
 800960a:	3a04      	subs	r2, #4
 800960c:	3501      	adds	r5, #1
 800960e:	42ae      	cmp	r6, r5
 8009610:	bf38      	it	cc
 8009612:	2200      	movcc	r2, #0
 8009614:	18a3      	adds	r3, r4, r2
 8009616:	50a7      	str	r7, [r4, r2]
 8009618:	b107      	cbz	r7, 800961c <rshift+0x68>
 800961a:	3304      	adds	r3, #4
 800961c:	1b1a      	subs	r2, r3, r4
 800961e:	42a3      	cmp	r3, r4
 8009620:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009624:	bf08      	it	eq
 8009626:	2300      	moveq	r3, #0
 8009628:	6102      	str	r2, [r0, #16]
 800962a:	bf08      	it	eq
 800962c:	6143      	streq	r3, [r0, #20]
 800962e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009632:	f8dc c000 	ldr.w	ip, [ip]
 8009636:	fa0c fc08 	lsl.w	ip, ip, r8
 800963a:	ea4c 0707 	orr.w	r7, ip, r7
 800963e:	f849 7b04 	str.w	r7, [r9], #4
 8009642:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009646:	40cf      	lsrs	r7, r1
 8009648:	e7da      	b.n	8009600 <rshift+0x4c>
 800964a:	f851 cb04 	ldr.w	ip, [r1], #4
 800964e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009652:	e7c3      	b.n	80095dc <rshift+0x28>
 8009654:	4623      	mov	r3, r4
 8009656:	e7e1      	b.n	800961c <rshift+0x68>

08009658 <__hexdig_fun>:
 8009658:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800965c:	2b09      	cmp	r3, #9
 800965e:	d802      	bhi.n	8009666 <__hexdig_fun+0xe>
 8009660:	3820      	subs	r0, #32
 8009662:	b2c0      	uxtb	r0, r0
 8009664:	4770      	bx	lr
 8009666:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800966a:	2b05      	cmp	r3, #5
 800966c:	d801      	bhi.n	8009672 <__hexdig_fun+0x1a>
 800966e:	3847      	subs	r0, #71	; 0x47
 8009670:	e7f7      	b.n	8009662 <__hexdig_fun+0xa>
 8009672:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009676:	2b05      	cmp	r3, #5
 8009678:	d801      	bhi.n	800967e <__hexdig_fun+0x26>
 800967a:	3827      	subs	r0, #39	; 0x27
 800967c:	e7f1      	b.n	8009662 <__hexdig_fun+0xa>
 800967e:	2000      	movs	r0, #0
 8009680:	4770      	bx	lr
	...

08009684 <__gethex>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	ed2d 8b02 	vpush	{d8}
 800968c:	b089      	sub	sp, #36	; 0x24
 800968e:	ee08 0a10 	vmov	s16, r0
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	4bb4      	ldr	r3, [pc, #720]	; (8009968 <__gethex+0x2e4>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	468b      	mov	fp, r1
 800969e:	4690      	mov	r8, r2
 80096a0:	f7f6 fdb6 	bl	8000210 <strlen>
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	f8db 2000 	ldr.w	r2, [fp]
 80096aa:	4403      	add	r3, r0
 80096ac:	4682      	mov	sl, r0
 80096ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	1c93      	adds	r3, r2, #2
 80096b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096be:	32fe      	adds	r2, #254	; 0xfe
 80096c0:	18d1      	adds	r1, r2, r3
 80096c2:	461f      	mov	r7, r3
 80096c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096c8:	9100      	str	r1, [sp, #0]
 80096ca:	2830      	cmp	r0, #48	; 0x30
 80096cc:	d0f8      	beq.n	80096c0 <__gethex+0x3c>
 80096ce:	f7ff ffc3 	bl	8009658 <__hexdig_fun>
 80096d2:	4604      	mov	r4, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d13a      	bne.n	800974e <__gethex+0xca>
 80096d8:	9901      	ldr	r1, [sp, #4]
 80096da:	4652      	mov	r2, sl
 80096dc:	4638      	mov	r0, r7
 80096de:	f7fe fa08 	bl	8007af2 <strncmp>
 80096e2:	4605      	mov	r5, r0
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d168      	bne.n	80097ba <__gethex+0x136>
 80096e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80096ec:	eb07 060a 	add.w	r6, r7, sl
 80096f0:	f7ff ffb2 	bl	8009658 <__hexdig_fun>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d062      	beq.n	80097be <__gethex+0x13a>
 80096f8:	4633      	mov	r3, r6
 80096fa:	7818      	ldrb	r0, [r3, #0]
 80096fc:	2830      	cmp	r0, #48	; 0x30
 80096fe:	461f      	mov	r7, r3
 8009700:	f103 0301 	add.w	r3, r3, #1
 8009704:	d0f9      	beq.n	80096fa <__gethex+0x76>
 8009706:	f7ff ffa7 	bl	8009658 <__hexdig_fun>
 800970a:	2301      	movs	r3, #1
 800970c:	fab0 f480 	clz	r4, r0
 8009710:	0964      	lsrs	r4, r4, #5
 8009712:	4635      	mov	r5, r6
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	463a      	mov	r2, r7
 8009718:	4616      	mov	r6, r2
 800971a:	3201      	adds	r2, #1
 800971c:	7830      	ldrb	r0, [r6, #0]
 800971e:	f7ff ff9b 	bl	8009658 <__hexdig_fun>
 8009722:	2800      	cmp	r0, #0
 8009724:	d1f8      	bne.n	8009718 <__gethex+0x94>
 8009726:	9901      	ldr	r1, [sp, #4]
 8009728:	4652      	mov	r2, sl
 800972a:	4630      	mov	r0, r6
 800972c:	f7fe f9e1 	bl	8007af2 <strncmp>
 8009730:	b980      	cbnz	r0, 8009754 <__gethex+0xd0>
 8009732:	b94d      	cbnz	r5, 8009748 <__gethex+0xc4>
 8009734:	eb06 050a 	add.w	r5, r6, sl
 8009738:	462a      	mov	r2, r5
 800973a:	4616      	mov	r6, r2
 800973c:	3201      	adds	r2, #1
 800973e:	7830      	ldrb	r0, [r6, #0]
 8009740:	f7ff ff8a 	bl	8009658 <__hexdig_fun>
 8009744:	2800      	cmp	r0, #0
 8009746:	d1f8      	bne.n	800973a <__gethex+0xb6>
 8009748:	1bad      	subs	r5, r5, r6
 800974a:	00ad      	lsls	r5, r5, #2
 800974c:	e004      	b.n	8009758 <__gethex+0xd4>
 800974e:	2400      	movs	r4, #0
 8009750:	4625      	mov	r5, r4
 8009752:	e7e0      	b.n	8009716 <__gethex+0x92>
 8009754:	2d00      	cmp	r5, #0
 8009756:	d1f7      	bne.n	8009748 <__gethex+0xc4>
 8009758:	7833      	ldrb	r3, [r6, #0]
 800975a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800975e:	2b50      	cmp	r3, #80	; 0x50
 8009760:	d13b      	bne.n	80097da <__gethex+0x156>
 8009762:	7873      	ldrb	r3, [r6, #1]
 8009764:	2b2b      	cmp	r3, #43	; 0x2b
 8009766:	d02c      	beq.n	80097c2 <__gethex+0x13e>
 8009768:	2b2d      	cmp	r3, #45	; 0x2d
 800976a:	d02e      	beq.n	80097ca <__gethex+0x146>
 800976c:	1c71      	adds	r1, r6, #1
 800976e:	f04f 0900 	mov.w	r9, #0
 8009772:	7808      	ldrb	r0, [r1, #0]
 8009774:	f7ff ff70 	bl	8009658 <__hexdig_fun>
 8009778:	1e43      	subs	r3, r0, #1
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b18      	cmp	r3, #24
 800977e:	d82c      	bhi.n	80097da <__gethex+0x156>
 8009780:	f1a0 0210 	sub.w	r2, r0, #16
 8009784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009788:	f7ff ff66 	bl	8009658 <__hexdig_fun>
 800978c:	1e43      	subs	r3, r0, #1
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b18      	cmp	r3, #24
 8009792:	d91d      	bls.n	80097d0 <__gethex+0x14c>
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	d000      	beq.n	800979c <__gethex+0x118>
 800979a:	4252      	negs	r2, r2
 800979c:	4415      	add	r5, r2
 800979e:	f8cb 1000 	str.w	r1, [fp]
 80097a2:	b1e4      	cbz	r4, 80097de <__gethex+0x15a>
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bf14      	ite	ne
 80097aa:	2700      	movne	r7, #0
 80097ac:	2706      	moveq	r7, #6
 80097ae:	4638      	mov	r0, r7
 80097b0:	b009      	add	sp, #36	; 0x24
 80097b2:	ecbd 8b02 	vpop	{d8}
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	463e      	mov	r6, r7
 80097bc:	4625      	mov	r5, r4
 80097be:	2401      	movs	r4, #1
 80097c0:	e7ca      	b.n	8009758 <__gethex+0xd4>
 80097c2:	f04f 0900 	mov.w	r9, #0
 80097c6:	1cb1      	adds	r1, r6, #2
 80097c8:	e7d3      	b.n	8009772 <__gethex+0xee>
 80097ca:	f04f 0901 	mov.w	r9, #1
 80097ce:	e7fa      	b.n	80097c6 <__gethex+0x142>
 80097d0:	230a      	movs	r3, #10
 80097d2:	fb03 0202 	mla	r2, r3, r2, r0
 80097d6:	3a10      	subs	r2, #16
 80097d8:	e7d4      	b.n	8009784 <__gethex+0x100>
 80097da:	4631      	mov	r1, r6
 80097dc:	e7df      	b.n	800979e <__gethex+0x11a>
 80097de:	1bf3      	subs	r3, r6, r7
 80097e0:	3b01      	subs	r3, #1
 80097e2:	4621      	mov	r1, r4
 80097e4:	2b07      	cmp	r3, #7
 80097e6:	dc0b      	bgt.n	8009800 <__gethex+0x17c>
 80097e8:	ee18 0a10 	vmov	r0, s16
 80097ec:	f000 fa90 	bl	8009d10 <_Balloc>
 80097f0:	4604      	mov	r4, r0
 80097f2:	b940      	cbnz	r0, 8009806 <__gethex+0x182>
 80097f4:	4b5d      	ldr	r3, [pc, #372]	; (800996c <__gethex+0x2e8>)
 80097f6:	4602      	mov	r2, r0
 80097f8:	21de      	movs	r1, #222	; 0xde
 80097fa:	485d      	ldr	r0, [pc, #372]	; (8009970 <__gethex+0x2ec>)
 80097fc:	f001 fde0 	bl	800b3c0 <__assert_func>
 8009800:	3101      	adds	r1, #1
 8009802:	105b      	asrs	r3, r3, #1
 8009804:	e7ee      	b.n	80097e4 <__gethex+0x160>
 8009806:	f100 0914 	add.w	r9, r0, #20
 800980a:	f04f 0b00 	mov.w	fp, #0
 800980e:	f1ca 0301 	rsb	r3, sl, #1
 8009812:	f8cd 9008 	str.w	r9, [sp, #8]
 8009816:	f8cd b000 	str.w	fp, [sp]
 800981a:	9306      	str	r3, [sp, #24]
 800981c:	42b7      	cmp	r7, r6
 800981e:	d340      	bcc.n	80098a2 <__gethex+0x21e>
 8009820:	9802      	ldr	r0, [sp, #8]
 8009822:	9b00      	ldr	r3, [sp, #0]
 8009824:	f840 3b04 	str.w	r3, [r0], #4
 8009828:	eba0 0009 	sub.w	r0, r0, r9
 800982c:	1080      	asrs	r0, r0, #2
 800982e:	0146      	lsls	r6, r0, #5
 8009830:	6120      	str	r0, [r4, #16]
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fb5e 	bl	8009ef4 <__hi0bits>
 8009838:	1a30      	subs	r0, r6, r0
 800983a:	f8d8 6000 	ldr.w	r6, [r8]
 800983e:	42b0      	cmp	r0, r6
 8009840:	dd63      	ble.n	800990a <__gethex+0x286>
 8009842:	1b87      	subs	r7, r0, r6
 8009844:	4639      	mov	r1, r7
 8009846:	4620      	mov	r0, r4
 8009848:	f000 ff02 	bl	800a650 <__any_on>
 800984c:	4682      	mov	sl, r0
 800984e:	b1a8      	cbz	r0, 800987c <__gethex+0x1f8>
 8009850:	1e7b      	subs	r3, r7, #1
 8009852:	1159      	asrs	r1, r3, #5
 8009854:	f003 021f 	and.w	r2, r3, #31
 8009858:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800985c:	f04f 0a01 	mov.w	sl, #1
 8009860:	fa0a f202 	lsl.w	r2, sl, r2
 8009864:	420a      	tst	r2, r1
 8009866:	d009      	beq.n	800987c <__gethex+0x1f8>
 8009868:	4553      	cmp	r3, sl
 800986a:	dd05      	ble.n	8009878 <__gethex+0x1f4>
 800986c:	1eb9      	subs	r1, r7, #2
 800986e:	4620      	mov	r0, r4
 8009870:	f000 feee 	bl	800a650 <__any_on>
 8009874:	2800      	cmp	r0, #0
 8009876:	d145      	bne.n	8009904 <__gethex+0x280>
 8009878:	f04f 0a02 	mov.w	sl, #2
 800987c:	4639      	mov	r1, r7
 800987e:	4620      	mov	r0, r4
 8009880:	f7ff fe98 	bl	80095b4 <rshift>
 8009884:	443d      	add	r5, r7
 8009886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800988a:	42ab      	cmp	r3, r5
 800988c:	da4c      	bge.n	8009928 <__gethex+0x2a4>
 800988e:	ee18 0a10 	vmov	r0, s16
 8009892:	4621      	mov	r1, r4
 8009894:	f000 fa7c 	bl	8009d90 <_Bfree>
 8009898:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800989a:	2300      	movs	r3, #0
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	27a3      	movs	r7, #163	; 0xa3
 80098a0:	e785      	b.n	80097ae <__gethex+0x12a>
 80098a2:	1e73      	subs	r3, r6, #1
 80098a4:	9a05      	ldr	r2, [sp, #20]
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d019      	beq.n	80098e4 <__gethex+0x260>
 80098b0:	f1bb 0f20 	cmp.w	fp, #32
 80098b4:	d107      	bne.n	80098c6 <__gethex+0x242>
 80098b6:	9b02      	ldr	r3, [sp, #8]
 80098b8:	9a00      	ldr	r2, [sp, #0]
 80098ba:	f843 2b04 	str.w	r2, [r3], #4
 80098be:	9302      	str	r3, [sp, #8]
 80098c0:	2300      	movs	r3, #0
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	469b      	mov	fp, r3
 80098c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80098ca:	f7ff fec5 	bl	8009658 <__hexdig_fun>
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	f000 000f 	and.w	r0, r0, #15
 80098d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80098d8:	4303      	orrs	r3, r0
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	f10b 0b04 	add.w	fp, fp, #4
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	e00d      	b.n	8009900 <__gethex+0x27c>
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	9a06      	ldr	r2, [sp, #24]
 80098e8:	4413      	add	r3, r2
 80098ea:	42bb      	cmp	r3, r7
 80098ec:	d3e0      	bcc.n	80098b0 <__gethex+0x22c>
 80098ee:	4618      	mov	r0, r3
 80098f0:	9901      	ldr	r1, [sp, #4]
 80098f2:	9307      	str	r3, [sp, #28]
 80098f4:	4652      	mov	r2, sl
 80098f6:	f7fe f8fc 	bl	8007af2 <strncmp>
 80098fa:	9b07      	ldr	r3, [sp, #28]
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d1d7      	bne.n	80098b0 <__gethex+0x22c>
 8009900:	461e      	mov	r6, r3
 8009902:	e78b      	b.n	800981c <__gethex+0x198>
 8009904:	f04f 0a03 	mov.w	sl, #3
 8009908:	e7b8      	b.n	800987c <__gethex+0x1f8>
 800990a:	da0a      	bge.n	8009922 <__gethex+0x29e>
 800990c:	1a37      	subs	r7, r6, r0
 800990e:	4621      	mov	r1, r4
 8009910:	ee18 0a10 	vmov	r0, s16
 8009914:	463a      	mov	r2, r7
 8009916:	f000 fc57 	bl	800a1c8 <__lshift>
 800991a:	1bed      	subs	r5, r5, r7
 800991c:	4604      	mov	r4, r0
 800991e:	f100 0914 	add.w	r9, r0, #20
 8009922:	f04f 0a00 	mov.w	sl, #0
 8009926:	e7ae      	b.n	8009886 <__gethex+0x202>
 8009928:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800992c:	42a8      	cmp	r0, r5
 800992e:	dd72      	ble.n	8009a16 <__gethex+0x392>
 8009930:	1b45      	subs	r5, r0, r5
 8009932:	42ae      	cmp	r6, r5
 8009934:	dc36      	bgt.n	80099a4 <__gethex+0x320>
 8009936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d02a      	beq.n	8009994 <__gethex+0x310>
 800993e:	2b03      	cmp	r3, #3
 8009940:	d02c      	beq.n	800999c <__gethex+0x318>
 8009942:	2b01      	cmp	r3, #1
 8009944:	d11c      	bne.n	8009980 <__gethex+0x2fc>
 8009946:	42ae      	cmp	r6, r5
 8009948:	d11a      	bne.n	8009980 <__gethex+0x2fc>
 800994a:	2e01      	cmp	r6, #1
 800994c:	d112      	bne.n	8009974 <__gethex+0x2f0>
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	2301      	movs	r3, #1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	f8c9 3000 	str.w	r3, [r9]
 800995e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009960:	2762      	movs	r7, #98	; 0x62
 8009962:	601c      	str	r4, [r3, #0]
 8009964:	e723      	b.n	80097ae <__gethex+0x12a>
 8009966:	bf00      	nop
 8009968:	0800c198 	.word	0x0800c198
 800996c:	0800c120 	.word	0x0800c120
 8009970:	0800c131 	.word	0x0800c131
 8009974:	1e71      	subs	r1, r6, #1
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fe6a 	bl	800a650 <__any_on>
 800997c:	2800      	cmp	r0, #0
 800997e:	d1e6      	bne.n	800994e <__gethex+0x2ca>
 8009980:	ee18 0a10 	vmov	r0, s16
 8009984:	4621      	mov	r1, r4
 8009986:	f000 fa03 	bl	8009d90 <_Bfree>
 800998a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800998c:	2300      	movs	r3, #0
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	2750      	movs	r7, #80	; 0x50
 8009992:	e70c      	b.n	80097ae <__gethex+0x12a>
 8009994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f2      	bne.n	8009980 <__gethex+0x2fc>
 800999a:	e7d8      	b.n	800994e <__gethex+0x2ca>
 800999c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1d5      	bne.n	800994e <__gethex+0x2ca>
 80099a2:	e7ed      	b.n	8009980 <__gethex+0x2fc>
 80099a4:	1e6f      	subs	r7, r5, #1
 80099a6:	f1ba 0f00 	cmp.w	sl, #0
 80099aa:	d131      	bne.n	8009a10 <__gethex+0x38c>
 80099ac:	b127      	cbz	r7, 80099b8 <__gethex+0x334>
 80099ae:	4639      	mov	r1, r7
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fe4d 	bl	800a650 <__any_on>
 80099b6:	4682      	mov	sl, r0
 80099b8:	117b      	asrs	r3, r7, #5
 80099ba:	2101      	movs	r1, #1
 80099bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80099c0:	f007 071f 	and.w	r7, r7, #31
 80099c4:	fa01 f707 	lsl.w	r7, r1, r7
 80099c8:	421f      	tst	r7, r3
 80099ca:	4629      	mov	r1, r5
 80099cc:	4620      	mov	r0, r4
 80099ce:	bf18      	it	ne
 80099d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80099d4:	1b76      	subs	r6, r6, r5
 80099d6:	f7ff fded 	bl	80095b4 <rshift>
 80099da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099de:	2702      	movs	r7, #2
 80099e0:	f1ba 0f00 	cmp.w	sl, #0
 80099e4:	d048      	beq.n	8009a78 <__gethex+0x3f4>
 80099e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d015      	beq.n	8009a1a <__gethex+0x396>
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d017      	beq.n	8009a22 <__gethex+0x39e>
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d109      	bne.n	8009a0a <__gethex+0x386>
 80099f6:	f01a 0f02 	tst.w	sl, #2
 80099fa:	d006      	beq.n	8009a0a <__gethex+0x386>
 80099fc:	f8d9 0000 	ldr.w	r0, [r9]
 8009a00:	ea4a 0a00 	orr.w	sl, sl, r0
 8009a04:	f01a 0f01 	tst.w	sl, #1
 8009a08:	d10e      	bne.n	8009a28 <__gethex+0x3a4>
 8009a0a:	f047 0710 	orr.w	r7, r7, #16
 8009a0e:	e033      	b.n	8009a78 <__gethex+0x3f4>
 8009a10:	f04f 0a01 	mov.w	sl, #1
 8009a14:	e7d0      	b.n	80099b8 <__gethex+0x334>
 8009a16:	2701      	movs	r7, #1
 8009a18:	e7e2      	b.n	80099e0 <__gethex+0x35c>
 8009a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a1c:	f1c3 0301 	rsb	r3, r3, #1
 8009a20:	9315      	str	r3, [sp, #84]	; 0x54
 8009a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d0f0      	beq.n	8009a0a <__gethex+0x386>
 8009a28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a2c:	f104 0314 	add.w	r3, r4, #20
 8009a30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a38:	f04f 0c00 	mov.w	ip, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a42:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a46:	d01c      	beq.n	8009a82 <__gethex+0x3fe>
 8009a48:	3201      	adds	r2, #1
 8009a4a:	6002      	str	r2, [r0, #0]
 8009a4c:	2f02      	cmp	r7, #2
 8009a4e:	f104 0314 	add.w	r3, r4, #20
 8009a52:	d13f      	bne.n	8009ad4 <__gethex+0x450>
 8009a54:	f8d8 2000 	ldr.w	r2, [r8]
 8009a58:	3a01      	subs	r2, #1
 8009a5a:	42b2      	cmp	r2, r6
 8009a5c:	d10a      	bne.n	8009a74 <__gethex+0x3f0>
 8009a5e:	1171      	asrs	r1, r6, #5
 8009a60:	2201      	movs	r2, #1
 8009a62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a66:	f006 061f 	and.w	r6, r6, #31
 8009a6a:	fa02 f606 	lsl.w	r6, r2, r6
 8009a6e:	421e      	tst	r6, r3
 8009a70:	bf18      	it	ne
 8009a72:	4617      	movne	r7, r2
 8009a74:	f047 0720 	orr.w	r7, r7, #32
 8009a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a7a:	601c      	str	r4, [r3, #0]
 8009a7c:	9b04      	ldr	r3, [sp, #16]
 8009a7e:	601d      	str	r5, [r3, #0]
 8009a80:	e695      	b.n	80097ae <__gethex+0x12a>
 8009a82:	4299      	cmp	r1, r3
 8009a84:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a88:	d8d8      	bhi.n	8009a3c <__gethex+0x3b8>
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	459b      	cmp	fp, r3
 8009a8e:	db19      	blt.n	8009ac4 <__gethex+0x440>
 8009a90:	6861      	ldr	r1, [r4, #4]
 8009a92:	ee18 0a10 	vmov	r0, s16
 8009a96:	3101      	adds	r1, #1
 8009a98:	f000 f93a 	bl	8009d10 <_Balloc>
 8009a9c:	4681      	mov	r9, r0
 8009a9e:	b918      	cbnz	r0, 8009aa8 <__gethex+0x424>
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <__gethex+0x488>)
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	2184      	movs	r1, #132	; 0x84
 8009aa6:	e6a8      	b.n	80097fa <__gethex+0x176>
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	3202      	adds	r2, #2
 8009aac:	f104 010c 	add.w	r1, r4, #12
 8009ab0:	0092      	lsls	r2, r2, #2
 8009ab2:	300c      	adds	r0, #12
 8009ab4:	f000 f91e 	bl	8009cf4 <memcpy>
 8009ab8:	4621      	mov	r1, r4
 8009aba:	ee18 0a10 	vmov	r0, s16
 8009abe:	f000 f967 	bl	8009d90 <_Bfree>
 8009ac2:	464c      	mov	r4, r9
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009acc:	6122      	str	r2, [r4, #16]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	615a      	str	r2, [r3, #20]
 8009ad2:	e7bb      	b.n	8009a4c <__gethex+0x3c8>
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	455a      	cmp	r2, fp
 8009ad8:	dd0b      	ble.n	8009af2 <__gethex+0x46e>
 8009ada:	2101      	movs	r1, #1
 8009adc:	4620      	mov	r0, r4
 8009ade:	f7ff fd69 	bl	80095b4 <rshift>
 8009ae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ae6:	3501      	adds	r5, #1
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	f6ff aed0 	blt.w	800988e <__gethex+0x20a>
 8009aee:	2701      	movs	r7, #1
 8009af0:	e7c0      	b.n	8009a74 <__gethex+0x3f0>
 8009af2:	f016 061f 	ands.w	r6, r6, #31
 8009af6:	d0fa      	beq.n	8009aee <__gethex+0x46a>
 8009af8:	4453      	add	r3, sl
 8009afa:	f1c6 0620 	rsb	r6, r6, #32
 8009afe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b02:	f000 f9f7 	bl	8009ef4 <__hi0bits>
 8009b06:	42b0      	cmp	r0, r6
 8009b08:	dbe7      	blt.n	8009ada <__gethex+0x456>
 8009b0a:	e7f0      	b.n	8009aee <__gethex+0x46a>
 8009b0c:	0800c120 	.word	0x0800c120

08009b10 <L_shift>:
 8009b10:	f1c2 0208 	rsb	r2, r2, #8
 8009b14:	0092      	lsls	r2, r2, #2
 8009b16:	b570      	push	{r4, r5, r6, lr}
 8009b18:	f1c2 0620 	rsb	r6, r2, #32
 8009b1c:	6843      	ldr	r3, [r0, #4]
 8009b1e:	6804      	ldr	r4, [r0, #0]
 8009b20:	fa03 f506 	lsl.w	r5, r3, r6
 8009b24:	432c      	orrs	r4, r5
 8009b26:	40d3      	lsrs	r3, r2
 8009b28:	6004      	str	r4, [r0, #0]
 8009b2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b2e:	4288      	cmp	r0, r1
 8009b30:	d3f4      	bcc.n	8009b1c <L_shift+0xc>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}

08009b34 <__match>:
 8009b34:	b530      	push	{r4, r5, lr}
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3e:	b914      	cbnz	r4, 8009b46 <__match+0x12>
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	2001      	movs	r0, #1
 8009b44:	bd30      	pop	{r4, r5, pc}
 8009b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b4e:	2d19      	cmp	r5, #25
 8009b50:	bf98      	it	ls
 8009b52:	3220      	addls	r2, #32
 8009b54:	42a2      	cmp	r2, r4
 8009b56:	d0f0      	beq.n	8009b3a <__match+0x6>
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7f3      	b.n	8009b44 <__match+0x10>

08009b5c <__hexnan>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	680b      	ldr	r3, [r1, #0]
 8009b62:	115e      	asrs	r6, r3, #5
 8009b64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b68:	f013 031f 	ands.w	r3, r3, #31
 8009b6c:	b087      	sub	sp, #28
 8009b6e:	bf18      	it	ne
 8009b70:	3604      	addne	r6, #4
 8009b72:	2500      	movs	r5, #0
 8009b74:	1f37      	subs	r7, r6, #4
 8009b76:	4690      	mov	r8, r2
 8009b78:	6802      	ldr	r2, [r0, #0]
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	4682      	mov	sl, r0
 8009b7e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b82:	46b9      	mov	r9, r7
 8009b84:	463c      	mov	r4, r7
 8009b86:	9502      	str	r5, [sp, #8]
 8009b88:	46ab      	mov	fp, r5
 8009b8a:	7851      	ldrb	r1, [r2, #1]
 8009b8c:	1c53      	adds	r3, r2, #1
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	b341      	cbz	r1, 8009be4 <__hexnan+0x88>
 8009b92:	4608      	mov	r0, r1
 8009b94:	9205      	str	r2, [sp, #20]
 8009b96:	9104      	str	r1, [sp, #16]
 8009b98:	f7ff fd5e 	bl	8009658 <__hexdig_fun>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d14f      	bne.n	8009c40 <__hexnan+0xe4>
 8009ba0:	9904      	ldr	r1, [sp, #16]
 8009ba2:	9a05      	ldr	r2, [sp, #20]
 8009ba4:	2920      	cmp	r1, #32
 8009ba6:	d818      	bhi.n	8009bda <__hexnan+0x7e>
 8009ba8:	9b02      	ldr	r3, [sp, #8]
 8009baa:	459b      	cmp	fp, r3
 8009bac:	dd13      	ble.n	8009bd6 <__hexnan+0x7a>
 8009bae:	454c      	cmp	r4, r9
 8009bb0:	d206      	bcs.n	8009bc0 <__hexnan+0x64>
 8009bb2:	2d07      	cmp	r5, #7
 8009bb4:	dc04      	bgt.n	8009bc0 <__hexnan+0x64>
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff ffa8 	bl	8009b10 <L_shift>
 8009bc0:	4544      	cmp	r4, r8
 8009bc2:	d950      	bls.n	8009c66 <__hexnan+0x10a>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f1a4 0904 	sub.w	r9, r4, #4
 8009bca:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bce:	f8cd b008 	str.w	fp, [sp, #8]
 8009bd2:	464c      	mov	r4, r9
 8009bd4:	461d      	mov	r5, r3
 8009bd6:	9a03      	ldr	r2, [sp, #12]
 8009bd8:	e7d7      	b.n	8009b8a <__hexnan+0x2e>
 8009bda:	2929      	cmp	r1, #41	; 0x29
 8009bdc:	d156      	bne.n	8009c8c <__hexnan+0x130>
 8009bde:	3202      	adds	r2, #2
 8009be0:	f8ca 2000 	str.w	r2, [sl]
 8009be4:	f1bb 0f00 	cmp.w	fp, #0
 8009be8:	d050      	beq.n	8009c8c <__hexnan+0x130>
 8009bea:	454c      	cmp	r4, r9
 8009bec:	d206      	bcs.n	8009bfc <__hexnan+0xa0>
 8009bee:	2d07      	cmp	r5, #7
 8009bf0:	dc04      	bgt.n	8009bfc <__hexnan+0xa0>
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f7ff ff8a 	bl	8009b10 <L_shift>
 8009bfc:	4544      	cmp	r4, r8
 8009bfe:	d934      	bls.n	8009c6a <__hexnan+0x10e>
 8009c00:	f1a8 0204 	sub.w	r2, r8, #4
 8009c04:	4623      	mov	r3, r4
 8009c06:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c0a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c0e:	429f      	cmp	r7, r3
 8009c10:	d2f9      	bcs.n	8009c06 <__hexnan+0xaa>
 8009c12:	1b3b      	subs	r3, r7, r4
 8009c14:	f023 0303 	bic.w	r3, r3, #3
 8009c18:	3304      	adds	r3, #4
 8009c1a:	3401      	adds	r4, #1
 8009c1c:	3e03      	subs	r6, #3
 8009c1e:	42b4      	cmp	r4, r6
 8009c20:	bf88      	it	hi
 8009c22:	2304      	movhi	r3, #4
 8009c24:	4443      	add	r3, r8
 8009c26:	2200      	movs	r2, #0
 8009c28:	f843 2b04 	str.w	r2, [r3], #4
 8009c2c:	429f      	cmp	r7, r3
 8009c2e:	d2fb      	bcs.n	8009c28 <__hexnan+0xcc>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	b91b      	cbnz	r3, 8009c3c <__hexnan+0xe0>
 8009c34:	4547      	cmp	r7, r8
 8009c36:	d127      	bne.n	8009c88 <__hexnan+0x12c>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	2005      	movs	r0, #5
 8009c3e:	e026      	b.n	8009c8e <__hexnan+0x132>
 8009c40:	3501      	adds	r5, #1
 8009c42:	2d08      	cmp	r5, #8
 8009c44:	f10b 0b01 	add.w	fp, fp, #1
 8009c48:	dd06      	ble.n	8009c58 <__hexnan+0xfc>
 8009c4a:	4544      	cmp	r4, r8
 8009c4c:	d9c3      	bls.n	8009bd6 <__hexnan+0x7a>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c54:	2501      	movs	r5, #1
 8009c56:	3c04      	subs	r4, #4
 8009c58:	6822      	ldr	r2, [r4, #0]
 8009c5a:	f000 000f 	and.w	r0, r0, #15
 8009c5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	e7b7      	b.n	8009bd6 <__hexnan+0x7a>
 8009c66:	2508      	movs	r5, #8
 8009c68:	e7b5      	b.n	8009bd6 <__hexnan+0x7a>
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0df      	beq.n	8009c30 <__hexnan+0xd4>
 8009c70:	f04f 32ff 	mov.w	r2, #4294967295
 8009c74:	f1c3 0320 	rsb	r3, r3, #32
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c80:	401a      	ands	r2, r3
 8009c82:	f846 2c04 	str.w	r2, [r6, #-4]
 8009c86:	e7d3      	b.n	8009c30 <__hexnan+0xd4>
 8009c88:	3f04      	subs	r7, #4
 8009c8a:	e7d1      	b.n	8009c30 <__hexnan+0xd4>
 8009c8c:	2004      	movs	r0, #4
 8009c8e:	b007      	add	sp, #28
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c94 <_localeconv_r>:
 8009c94:	4800      	ldr	r0, [pc, #0]	; (8009c98 <_localeconv_r+0x4>)
 8009c96:	4770      	bx	lr
 8009c98:	20000164 	.word	0x20000164

08009c9c <_lseek_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d07      	ldr	r5, [pc, #28]	; (8009cbc <_lseek_r+0x20>)
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	602a      	str	r2, [r5, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f7f8 fc3a 	bl	8002524 <_lseek>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_lseek_r+0x1e>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_lseek_r+0x1e>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	20000898 	.word	0x20000898

08009cc0 <malloc>:
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <malloc+0xc>)
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f000 bd67 	b.w	800a798 <_malloc_r>
 8009cca:	bf00      	nop
 8009ccc:	2000000c 	.word	0x2000000c

08009cd0 <__ascii_mbtowc>:
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	b901      	cbnz	r1, 8009cd6 <__ascii_mbtowc+0x6>
 8009cd4:	a901      	add	r1, sp, #4
 8009cd6:	b142      	cbz	r2, 8009cea <__ascii_mbtowc+0x1a>
 8009cd8:	b14b      	cbz	r3, 8009cee <__ascii_mbtowc+0x1e>
 8009cda:	7813      	ldrb	r3, [r2, #0]
 8009cdc:	600b      	str	r3, [r1, #0]
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	1e10      	subs	r0, r2, #0
 8009ce2:	bf18      	it	ne
 8009ce4:	2001      	movne	r0, #1
 8009ce6:	b002      	add	sp, #8
 8009ce8:	4770      	bx	lr
 8009cea:	4610      	mov	r0, r2
 8009cec:	e7fb      	b.n	8009ce6 <__ascii_mbtowc+0x16>
 8009cee:	f06f 0001 	mvn.w	r0, #1
 8009cf2:	e7f8      	b.n	8009ce6 <__ascii_mbtowc+0x16>

08009cf4 <memcpy>:
 8009cf4:	440a      	add	r2, r1
 8009cf6:	4291      	cmp	r1, r2
 8009cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cfc:	d100      	bne.n	8009d00 <memcpy+0xc>
 8009cfe:	4770      	bx	lr
 8009d00:	b510      	push	{r4, lr}
 8009d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d0a:	4291      	cmp	r1, r2
 8009d0c:	d1f9      	bne.n	8009d02 <memcpy+0xe>
 8009d0e:	bd10      	pop	{r4, pc}

08009d10 <_Balloc>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	b976      	cbnz	r6, 8009d38 <_Balloc+0x28>
 8009d1a:	2010      	movs	r0, #16
 8009d1c:	f7ff ffd0 	bl	8009cc0 <malloc>
 8009d20:	4602      	mov	r2, r0
 8009d22:	6260      	str	r0, [r4, #36]	; 0x24
 8009d24:	b920      	cbnz	r0, 8009d30 <_Balloc+0x20>
 8009d26:	4b18      	ldr	r3, [pc, #96]	; (8009d88 <_Balloc+0x78>)
 8009d28:	4818      	ldr	r0, [pc, #96]	; (8009d8c <_Balloc+0x7c>)
 8009d2a:	2166      	movs	r1, #102	; 0x66
 8009d2c:	f001 fb48 	bl	800b3c0 <__assert_func>
 8009d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d34:	6006      	str	r6, [r0, #0]
 8009d36:	60c6      	str	r6, [r0, #12]
 8009d38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d3a:	68f3      	ldr	r3, [r6, #12]
 8009d3c:	b183      	cbz	r3, 8009d60 <_Balloc+0x50>
 8009d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d46:	b9b8      	cbnz	r0, 8009d78 <_Balloc+0x68>
 8009d48:	2101      	movs	r1, #1
 8009d4a:	fa01 f605 	lsl.w	r6, r1, r5
 8009d4e:	1d72      	adds	r2, r6, #5
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fc9d 	bl	800a692 <_calloc_r>
 8009d58:	b160      	cbz	r0, 8009d74 <_Balloc+0x64>
 8009d5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d5e:	e00e      	b.n	8009d7e <_Balloc+0x6e>
 8009d60:	2221      	movs	r2, #33	; 0x21
 8009d62:	2104      	movs	r1, #4
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fc94 	bl	800a692 <_calloc_r>
 8009d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6c:	60f0      	str	r0, [r6, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e4      	bne.n	8009d3e <_Balloc+0x2e>
 8009d74:	2000      	movs	r0, #0
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	6802      	ldr	r2, [r0, #0]
 8009d7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d84:	e7f7      	b.n	8009d76 <_Balloc+0x66>
 8009d86:	bf00      	nop
 8009d88:	0800c0ae 	.word	0x0800c0ae
 8009d8c:	0800c1ac 	.word	0x0800c1ac

08009d90 <_Bfree>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b976      	cbnz	r6, 8009db8 <_Bfree+0x28>
 8009d9a:	2010      	movs	r0, #16
 8009d9c:	f7ff ff90 	bl	8009cc0 <malloc>
 8009da0:	4602      	mov	r2, r0
 8009da2:	6268      	str	r0, [r5, #36]	; 0x24
 8009da4:	b920      	cbnz	r0, 8009db0 <_Bfree+0x20>
 8009da6:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <_Bfree+0x3c>)
 8009da8:	4809      	ldr	r0, [pc, #36]	; (8009dd0 <_Bfree+0x40>)
 8009daa:	218a      	movs	r1, #138	; 0x8a
 8009dac:	f001 fb08 	bl	800b3c0 <__assert_func>
 8009db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009db4:	6006      	str	r6, [r0, #0]
 8009db6:	60c6      	str	r6, [r0, #12]
 8009db8:	b13c      	cbz	r4, 8009dca <_Bfree+0x3a>
 8009dba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009dbc:	6862      	ldr	r2, [r4, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dc4:	6021      	str	r1, [r4, #0]
 8009dc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	0800c0ae 	.word	0x0800c0ae
 8009dd0:	0800c1ac 	.word	0x0800c1ac

08009dd4 <__multadd>:
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	690d      	ldr	r5, [r1, #16]
 8009dda:	4607      	mov	r7, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	461e      	mov	r6, r3
 8009de0:	f101 0c14 	add.w	ip, r1, #20
 8009de4:	2000      	movs	r0, #0
 8009de6:	f8dc 3000 	ldr.w	r3, [ip]
 8009dea:	b299      	uxth	r1, r3
 8009dec:	fb02 6101 	mla	r1, r2, r1, r6
 8009df0:	0c1e      	lsrs	r6, r3, #16
 8009df2:	0c0b      	lsrs	r3, r1, #16
 8009df4:	fb02 3306 	mla	r3, r2, r6, r3
 8009df8:	b289      	uxth	r1, r1
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e00:	4285      	cmp	r5, r0
 8009e02:	f84c 1b04 	str.w	r1, [ip], #4
 8009e06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e0a:	dcec      	bgt.n	8009de6 <__multadd+0x12>
 8009e0c:	b30e      	cbz	r6, 8009e52 <__multadd+0x7e>
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	42ab      	cmp	r3, r5
 8009e12:	dc19      	bgt.n	8009e48 <__multadd+0x74>
 8009e14:	6861      	ldr	r1, [r4, #4]
 8009e16:	4638      	mov	r0, r7
 8009e18:	3101      	adds	r1, #1
 8009e1a:	f7ff ff79 	bl	8009d10 <_Balloc>
 8009e1e:	4680      	mov	r8, r0
 8009e20:	b928      	cbnz	r0, 8009e2e <__multadd+0x5a>
 8009e22:	4602      	mov	r2, r0
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <__multadd+0x84>)
 8009e26:	480d      	ldr	r0, [pc, #52]	; (8009e5c <__multadd+0x88>)
 8009e28:	21b5      	movs	r1, #181	; 0xb5
 8009e2a:	f001 fac9 	bl	800b3c0 <__assert_func>
 8009e2e:	6922      	ldr	r2, [r4, #16]
 8009e30:	3202      	adds	r2, #2
 8009e32:	f104 010c 	add.w	r1, r4, #12
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	300c      	adds	r0, #12
 8009e3a:	f7ff ff5b 	bl	8009cf4 <memcpy>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff ffa5 	bl	8009d90 <_Bfree>
 8009e46:	4644      	mov	r4, r8
 8009e48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	615e      	str	r6, [r3, #20]
 8009e50:	6125      	str	r5, [r4, #16]
 8009e52:	4620      	mov	r0, r4
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	0800c120 	.word	0x0800c120
 8009e5c:	0800c1ac 	.word	0x0800c1ac

08009e60 <__s2b>:
 8009e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	4615      	mov	r5, r2
 8009e68:	461f      	mov	r7, r3
 8009e6a:	2209      	movs	r2, #9
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	4606      	mov	r6, r0
 8009e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e74:	2100      	movs	r1, #0
 8009e76:	2201      	movs	r2, #1
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	db09      	blt.n	8009e90 <__s2b+0x30>
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7ff ff47 	bl	8009d10 <_Balloc>
 8009e82:	b940      	cbnz	r0, 8009e96 <__s2b+0x36>
 8009e84:	4602      	mov	r2, r0
 8009e86:	4b19      	ldr	r3, [pc, #100]	; (8009eec <__s2b+0x8c>)
 8009e88:	4819      	ldr	r0, [pc, #100]	; (8009ef0 <__s2b+0x90>)
 8009e8a:	21ce      	movs	r1, #206	; 0xce
 8009e8c:	f001 fa98 	bl	800b3c0 <__assert_func>
 8009e90:	0052      	lsls	r2, r2, #1
 8009e92:	3101      	adds	r1, #1
 8009e94:	e7f0      	b.n	8009e78 <__s2b+0x18>
 8009e96:	9b08      	ldr	r3, [sp, #32]
 8009e98:	6143      	str	r3, [r0, #20]
 8009e9a:	2d09      	cmp	r5, #9
 8009e9c:	f04f 0301 	mov.w	r3, #1
 8009ea0:	6103      	str	r3, [r0, #16]
 8009ea2:	dd16      	ble.n	8009ed2 <__s2b+0x72>
 8009ea4:	f104 0909 	add.w	r9, r4, #9
 8009ea8:	46c8      	mov	r8, r9
 8009eaa:	442c      	add	r4, r5
 8009eac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009eb0:	4601      	mov	r1, r0
 8009eb2:	3b30      	subs	r3, #48	; 0x30
 8009eb4:	220a      	movs	r2, #10
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ff8c 	bl	8009dd4 <__multadd>
 8009ebc:	45a0      	cmp	r8, r4
 8009ebe:	d1f5      	bne.n	8009eac <__s2b+0x4c>
 8009ec0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ec4:	444c      	add	r4, r9
 8009ec6:	1b2d      	subs	r5, r5, r4
 8009ec8:	1963      	adds	r3, r4, r5
 8009eca:	42bb      	cmp	r3, r7
 8009ecc:	db04      	blt.n	8009ed8 <__s2b+0x78>
 8009ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	340a      	adds	r4, #10
 8009ed4:	2509      	movs	r5, #9
 8009ed6:	e7f6      	b.n	8009ec6 <__s2b+0x66>
 8009ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009edc:	4601      	mov	r1, r0
 8009ede:	3b30      	subs	r3, #48	; 0x30
 8009ee0:	220a      	movs	r2, #10
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ff76 	bl	8009dd4 <__multadd>
 8009ee8:	e7ee      	b.n	8009ec8 <__s2b+0x68>
 8009eea:	bf00      	nop
 8009eec:	0800c120 	.word	0x0800c120
 8009ef0:	0800c1ac 	.word	0x0800c1ac

08009ef4 <__hi0bits>:
 8009ef4:	0c03      	lsrs	r3, r0, #16
 8009ef6:	041b      	lsls	r3, r3, #16
 8009ef8:	b9d3      	cbnz	r3, 8009f30 <__hi0bits+0x3c>
 8009efa:	0400      	lsls	r0, r0, #16
 8009efc:	2310      	movs	r3, #16
 8009efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f02:	bf04      	itt	eq
 8009f04:	0200      	lsleq	r0, r0, #8
 8009f06:	3308      	addeq	r3, #8
 8009f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f0c:	bf04      	itt	eq
 8009f0e:	0100      	lsleq	r0, r0, #4
 8009f10:	3304      	addeq	r3, #4
 8009f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f16:	bf04      	itt	eq
 8009f18:	0080      	lsleq	r0, r0, #2
 8009f1a:	3302      	addeq	r3, #2
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	db05      	blt.n	8009f2c <__hi0bits+0x38>
 8009f20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f24:	f103 0301 	add.w	r3, r3, #1
 8009f28:	bf08      	it	eq
 8009f2a:	2320      	moveq	r3, #32
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	4770      	bx	lr
 8009f30:	2300      	movs	r3, #0
 8009f32:	e7e4      	b.n	8009efe <__hi0bits+0xa>

08009f34 <__lo0bits>:
 8009f34:	6803      	ldr	r3, [r0, #0]
 8009f36:	f013 0207 	ands.w	r2, r3, #7
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	d00b      	beq.n	8009f56 <__lo0bits+0x22>
 8009f3e:	07da      	lsls	r2, r3, #31
 8009f40:	d423      	bmi.n	8009f8a <__lo0bits+0x56>
 8009f42:	0798      	lsls	r0, r3, #30
 8009f44:	bf49      	itett	mi
 8009f46:	085b      	lsrmi	r3, r3, #1
 8009f48:	089b      	lsrpl	r3, r3, #2
 8009f4a:	2001      	movmi	r0, #1
 8009f4c:	600b      	strmi	r3, [r1, #0]
 8009f4e:	bf5c      	itt	pl
 8009f50:	600b      	strpl	r3, [r1, #0]
 8009f52:	2002      	movpl	r0, #2
 8009f54:	4770      	bx	lr
 8009f56:	b298      	uxth	r0, r3
 8009f58:	b9a8      	cbnz	r0, 8009f86 <__lo0bits+0x52>
 8009f5a:	0c1b      	lsrs	r3, r3, #16
 8009f5c:	2010      	movs	r0, #16
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	b90a      	cbnz	r2, 8009f66 <__lo0bits+0x32>
 8009f62:	3008      	adds	r0, #8
 8009f64:	0a1b      	lsrs	r3, r3, #8
 8009f66:	071a      	lsls	r2, r3, #28
 8009f68:	bf04      	itt	eq
 8009f6a:	091b      	lsreq	r3, r3, #4
 8009f6c:	3004      	addeq	r0, #4
 8009f6e:	079a      	lsls	r2, r3, #30
 8009f70:	bf04      	itt	eq
 8009f72:	089b      	lsreq	r3, r3, #2
 8009f74:	3002      	addeq	r0, #2
 8009f76:	07da      	lsls	r2, r3, #31
 8009f78:	d403      	bmi.n	8009f82 <__lo0bits+0x4e>
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	f100 0001 	add.w	r0, r0, #1
 8009f80:	d005      	beq.n	8009f8e <__lo0bits+0x5a>
 8009f82:	600b      	str	r3, [r1, #0]
 8009f84:	4770      	bx	lr
 8009f86:	4610      	mov	r0, r2
 8009f88:	e7e9      	b.n	8009f5e <__lo0bits+0x2a>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	4770      	bx	lr
 8009f8e:	2020      	movs	r0, #32
 8009f90:	4770      	bx	lr
	...

08009f94 <__i2b>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	460c      	mov	r4, r1
 8009f98:	2101      	movs	r1, #1
 8009f9a:	f7ff feb9 	bl	8009d10 <_Balloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <__i2b+0x1a>
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <__i2b+0x24>)
 8009fa4:	4805      	ldr	r0, [pc, #20]	; (8009fbc <__i2b+0x28>)
 8009fa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009faa:	f001 fa09 	bl	800b3c0 <__assert_func>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	6144      	str	r4, [r0, #20]
 8009fb2:	6103      	str	r3, [r0, #16]
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800c120 	.word	0x0800c120
 8009fbc:	0800c1ac 	.word	0x0800c1ac

08009fc0 <__multiply>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4691      	mov	r9, r2
 8009fc6:	690a      	ldr	r2, [r1, #16]
 8009fc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	bfb8      	it	lt
 8009fd0:	460b      	movlt	r3, r1
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	bfbc      	itt	lt
 8009fd6:	464c      	movlt	r4, r9
 8009fd8:	4699      	movlt	r9, r3
 8009fda:	6927      	ldr	r7, [r4, #16]
 8009fdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fe0:	68a3      	ldr	r3, [r4, #8]
 8009fe2:	6861      	ldr	r1, [r4, #4]
 8009fe4:	eb07 060a 	add.w	r6, r7, sl
 8009fe8:	42b3      	cmp	r3, r6
 8009fea:	b085      	sub	sp, #20
 8009fec:	bfb8      	it	lt
 8009fee:	3101      	addlt	r1, #1
 8009ff0:	f7ff fe8e 	bl	8009d10 <_Balloc>
 8009ff4:	b930      	cbnz	r0, 800a004 <__multiply+0x44>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	4b44      	ldr	r3, [pc, #272]	; (800a10c <__multiply+0x14c>)
 8009ffa:	4845      	ldr	r0, [pc, #276]	; (800a110 <__multiply+0x150>)
 8009ffc:	f240 115d 	movw	r1, #349	; 0x15d
 800a000:	f001 f9de 	bl	800b3c0 <__assert_func>
 800a004:	f100 0514 	add.w	r5, r0, #20
 800a008:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a00c:	462b      	mov	r3, r5
 800a00e:	2200      	movs	r2, #0
 800a010:	4543      	cmp	r3, r8
 800a012:	d321      	bcc.n	800a058 <__multiply+0x98>
 800a014:	f104 0314 	add.w	r3, r4, #20
 800a018:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a01c:	f109 0314 	add.w	r3, r9, #20
 800a020:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a024:	9202      	str	r2, [sp, #8]
 800a026:	1b3a      	subs	r2, r7, r4
 800a028:	3a15      	subs	r2, #21
 800a02a:	f022 0203 	bic.w	r2, r2, #3
 800a02e:	3204      	adds	r2, #4
 800a030:	f104 0115 	add.w	r1, r4, #21
 800a034:	428f      	cmp	r7, r1
 800a036:	bf38      	it	cc
 800a038:	2204      	movcc	r2, #4
 800a03a:	9201      	str	r2, [sp, #4]
 800a03c:	9a02      	ldr	r2, [sp, #8]
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	429a      	cmp	r2, r3
 800a042:	d80c      	bhi.n	800a05e <__multiply+0x9e>
 800a044:	2e00      	cmp	r6, #0
 800a046:	dd03      	ble.n	800a050 <__multiply+0x90>
 800a048:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d05a      	beq.n	800a106 <__multiply+0x146>
 800a050:	6106      	str	r6, [r0, #16]
 800a052:	b005      	add	sp, #20
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	f843 2b04 	str.w	r2, [r3], #4
 800a05c:	e7d8      	b.n	800a010 <__multiply+0x50>
 800a05e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a062:	f1ba 0f00 	cmp.w	sl, #0
 800a066:	d024      	beq.n	800a0b2 <__multiply+0xf2>
 800a068:	f104 0e14 	add.w	lr, r4, #20
 800a06c:	46a9      	mov	r9, r5
 800a06e:	f04f 0c00 	mov.w	ip, #0
 800a072:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a076:	f8d9 1000 	ldr.w	r1, [r9]
 800a07a:	fa1f fb82 	uxth.w	fp, r2
 800a07e:	b289      	uxth	r1, r1
 800a080:	fb0a 110b 	mla	r1, sl, fp, r1
 800a084:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a088:	f8d9 2000 	ldr.w	r2, [r9]
 800a08c:	4461      	add	r1, ip
 800a08e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a092:	fb0a c20b 	mla	r2, sl, fp, ip
 800a096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a09a:	b289      	uxth	r1, r1
 800a09c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0a0:	4577      	cmp	r7, lr
 800a0a2:	f849 1b04 	str.w	r1, [r9], #4
 800a0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0aa:	d8e2      	bhi.n	800a072 <__multiply+0xb2>
 800a0ac:	9a01      	ldr	r2, [sp, #4]
 800a0ae:	f845 c002 	str.w	ip, [r5, r2]
 800a0b2:	9a03      	ldr	r2, [sp, #12]
 800a0b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	f1b9 0f00 	cmp.w	r9, #0
 800a0be:	d020      	beq.n	800a102 <__multiply+0x142>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	f104 0c14 	add.w	ip, r4, #20
 800a0c6:	46ae      	mov	lr, r5
 800a0c8:	f04f 0a00 	mov.w	sl, #0
 800a0cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a0d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a0d8:	4492      	add	sl, r2
 800a0da:	b289      	uxth	r1, r1
 800a0dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a0e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a0ec:	0c12      	lsrs	r2, r2, #16
 800a0ee:	fb09 1102 	mla	r1, r9, r2, r1
 800a0f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0f6:	4567      	cmp	r7, ip
 800a0f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0fc:	d8e6      	bhi.n	800a0cc <__multiply+0x10c>
 800a0fe:	9a01      	ldr	r2, [sp, #4]
 800a100:	50a9      	str	r1, [r5, r2]
 800a102:	3504      	adds	r5, #4
 800a104:	e79a      	b.n	800a03c <__multiply+0x7c>
 800a106:	3e01      	subs	r6, #1
 800a108:	e79c      	b.n	800a044 <__multiply+0x84>
 800a10a:	bf00      	nop
 800a10c:	0800c120 	.word	0x0800c120
 800a110:	0800c1ac 	.word	0x0800c1ac

0800a114 <__pow5mult>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	4615      	mov	r5, r2
 800a11a:	f012 0203 	ands.w	r2, r2, #3
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	d007      	beq.n	800a134 <__pow5mult+0x20>
 800a124:	4c25      	ldr	r4, [pc, #148]	; (800a1bc <__pow5mult+0xa8>)
 800a126:	3a01      	subs	r2, #1
 800a128:	2300      	movs	r3, #0
 800a12a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a12e:	f7ff fe51 	bl	8009dd4 <__multadd>
 800a132:	4607      	mov	r7, r0
 800a134:	10ad      	asrs	r5, r5, #2
 800a136:	d03d      	beq.n	800a1b4 <__pow5mult+0xa0>
 800a138:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a13a:	b97c      	cbnz	r4, 800a15c <__pow5mult+0x48>
 800a13c:	2010      	movs	r0, #16
 800a13e:	f7ff fdbf 	bl	8009cc0 <malloc>
 800a142:	4602      	mov	r2, r0
 800a144:	6270      	str	r0, [r6, #36]	; 0x24
 800a146:	b928      	cbnz	r0, 800a154 <__pow5mult+0x40>
 800a148:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <__pow5mult+0xac>)
 800a14a:	481e      	ldr	r0, [pc, #120]	; (800a1c4 <__pow5mult+0xb0>)
 800a14c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a150:	f001 f936 	bl	800b3c0 <__assert_func>
 800a154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a158:	6004      	str	r4, [r0, #0]
 800a15a:	60c4      	str	r4, [r0, #12]
 800a15c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a164:	b94c      	cbnz	r4, 800a17a <__pow5mult+0x66>
 800a166:	f240 2171 	movw	r1, #625	; 0x271
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff12 	bl	8009f94 <__i2b>
 800a170:	2300      	movs	r3, #0
 800a172:	f8c8 0008 	str.w	r0, [r8, #8]
 800a176:	4604      	mov	r4, r0
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	f04f 0900 	mov.w	r9, #0
 800a17e:	07eb      	lsls	r3, r5, #31
 800a180:	d50a      	bpl.n	800a198 <__pow5mult+0x84>
 800a182:	4639      	mov	r1, r7
 800a184:	4622      	mov	r2, r4
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff1a 	bl	8009fc0 <__multiply>
 800a18c:	4639      	mov	r1, r7
 800a18e:	4680      	mov	r8, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f7ff fdfd 	bl	8009d90 <_Bfree>
 800a196:	4647      	mov	r7, r8
 800a198:	106d      	asrs	r5, r5, #1
 800a19a:	d00b      	beq.n	800a1b4 <__pow5mult+0xa0>
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	b938      	cbnz	r0, 800a1b0 <__pow5mult+0x9c>
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ff0b 	bl	8009fc0 <__multiply>
 800a1aa:	6020      	str	r0, [r4, #0]
 800a1ac:	f8c0 9000 	str.w	r9, [r0]
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	e7e4      	b.n	800a17e <__pow5mult+0x6a>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800c2f8 	.word	0x0800c2f8
 800a1c0:	0800c0ae 	.word	0x0800c0ae
 800a1c4:	0800c1ac 	.word	0x0800c1ac

0800a1c8 <__lshift>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	6849      	ldr	r1, [r1, #4]
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	4607      	mov	r7, r0
 800a1da:	4691      	mov	r9, r2
 800a1dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1e0:	f108 0601 	add.w	r6, r8, #1
 800a1e4:	42b3      	cmp	r3, r6
 800a1e6:	db0b      	blt.n	800a200 <__lshift+0x38>
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f7ff fd91 	bl	8009d10 <_Balloc>
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	b948      	cbnz	r0, 800a206 <__lshift+0x3e>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4b2a      	ldr	r3, [pc, #168]	; (800a2a0 <__lshift+0xd8>)
 800a1f6:	482b      	ldr	r0, [pc, #172]	; (800a2a4 <__lshift+0xdc>)
 800a1f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1fc:	f001 f8e0 	bl	800b3c0 <__assert_func>
 800a200:	3101      	adds	r1, #1
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	e7ee      	b.n	800a1e4 <__lshift+0x1c>
 800a206:	2300      	movs	r3, #0
 800a208:	f100 0114 	add.w	r1, r0, #20
 800a20c:	f100 0210 	add.w	r2, r0, #16
 800a210:	4618      	mov	r0, r3
 800a212:	4553      	cmp	r3, sl
 800a214:	db37      	blt.n	800a286 <__lshift+0xbe>
 800a216:	6920      	ldr	r0, [r4, #16]
 800a218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a21c:	f104 0314 	add.w	r3, r4, #20
 800a220:	f019 091f 	ands.w	r9, r9, #31
 800a224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a228:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a22c:	d02f      	beq.n	800a28e <__lshift+0xc6>
 800a22e:	f1c9 0e20 	rsb	lr, r9, #32
 800a232:	468a      	mov	sl, r1
 800a234:	f04f 0c00 	mov.w	ip, #0
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	fa02 f209 	lsl.w	r2, r2, r9
 800a23e:	ea42 020c 	orr.w	r2, r2, ip
 800a242:	f84a 2b04 	str.w	r2, [sl], #4
 800a246:	f853 2b04 	ldr.w	r2, [r3], #4
 800a24a:	4298      	cmp	r0, r3
 800a24c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a250:	d8f2      	bhi.n	800a238 <__lshift+0x70>
 800a252:	1b03      	subs	r3, r0, r4
 800a254:	3b15      	subs	r3, #21
 800a256:	f023 0303 	bic.w	r3, r3, #3
 800a25a:	3304      	adds	r3, #4
 800a25c:	f104 0215 	add.w	r2, r4, #21
 800a260:	4290      	cmp	r0, r2
 800a262:	bf38      	it	cc
 800a264:	2304      	movcc	r3, #4
 800a266:	f841 c003 	str.w	ip, [r1, r3]
 800a26a:	f1bc 0f00 	cmp.w	ip, #0
 800a26e:	d001      	beq.n	800a274 <__lshift+0xac>
 800a270:	f108 0602 	add.w	r6, r8, #2
 800a274:	3e01      	subs	r6, #1
 800a276:	4638      	mov	r0, r7
 800a278:	612e      	str	r6, [r5, #16]
 800a27a:	4621      	mov	r1, r4
 800a27c:	f7ff fd88 	bl	8009d90 <_Bfree>
 800a280:	4628      	mov	r0, r5
 800a282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a286:	f842 0f04 	str.w	r0, [r2, #4]!
 800a28a:	3301      	adds	r3, #1
 800a28c:	e7c1      	b.n	800a212 <__lshift+0x4a>
 800a28e:	3904      	subs	r1, #4
 800a290:	f853 2b04 	ldr.w	r2, [r3], #4
 800a294:	f841 2f04 	str.w	r2, [r1, #4]!
 800a298:	4298      	cmp	r0, r3
 800a29a:	d8f9      	bhi.n	800a290 <__lshift+0xc8>
 800a29c:	e7ea      	b.n	800a274 <__lshift+0xac>
 800a29e:	bf00      	nop
 800a2a0:	0800c120 	.word	0x0800c120
 800a2a4:	0800c1ac 	.word	0x0800c1ac

0800a2a8 <__mcmp>:
 800a2a8:	b530      	push	{r4, r5, lr}
 800a2aa:	6902      	ldr	r2, [r0, #16]
 800a2ac:	690c      	ldr	r4, [r1, #16]
 800a2ae:	1b12      	subs	r2, r2, r4
 800a2b0:	d10e      	bne.n	800a2d0 <__mcmp+0x28>
 800a2b2:	f100 0314 	add.w	r3, r0, #20
 800a2b6:	3114      	adds	r1, #20
 800a2b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2c8:	42a5      	cmp	r5, r4
 800a2ca:	d003      	beq.n	800a2d4 <__mcmp+0x2c>
 800a2cc:	d305      	bcc.n	800a2da <__mcmp+0x32>
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	bd30      	pop	{r4, r5, pc}
 800a2d4:	4283      	cmp	r3, r0
 800a2d6:	d3f3      	bcc.n	800a2c0 <__mcmp+0x18>
 800a2d8:	e7fa      	b.n	800a2d0 <__mcmp+0x28>
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	e7f7      	b.n	800a2d0 <__mcmp+0x28>

0800a2e0 <__mdiff>:
 800a2e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4690      	mov	r8, r2
 800a2ee:	f7ff ffdb 	bl	800a2a8 <__mcmp>
 800a2f2:	1e05      	subs	r5, r0, #0
 800a2f4:	d110      	bne.n	800a318 <__mdiff+0x38>
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff fd09 	bl	8009d10 <_Balloc>
 800a2fe:	b930      	cbnz	r0, 800a30e <__mdiff+0x2e>
 800a300:	4b3a      	ldr	r3, [pc, #232]	; (800a3ec <__mdiff+0x10c>)
 800a302:	4602      	mov	r2, r0
 800a304:	f240 2132 	movw	r1, #562	; 0x232
 800a308:	4839      	ldr	r0, [pc, #228]	; (800a3f0 <__mdiff+0x110>)
 800a30a:	f001 f859 	bl	800b3c0 <__assert_func>
 800a30e:	2301      	movs	r3, #1
 800a310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	bfa4      	itt	ge
 800a31a:	4643      	movge	r3, r8
 800a31c:	46a0      	movge	r8, r4
 800a31e:	4630      	mov	r0, r6
 800a320:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a324:	bfa6      	itte	ge
 800a326:	461c      	movge	r4, r3
 800a328:	2500      	movge	r5, #0
 800a32a:	2501      	movlt	r5, #1
 800a32c:	f7ff fcf0 	bl	8009d10 <_Balloc>
 800a330:	b920      	cbnz	r0, 800a33c <__mdiff+0x5c>
 800a332:	4b2e      	ldr	r3, [pc, #184]	; (800a3ec <__mdiff+0x10c>)
 800a334:	4602      	mov	r2, r0
 800a336:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a33a:	e7e5      	b.n	800a308 <__mdiff+0x28>
 800a33c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a340:	6926      	ldr	r6, [r4, #16]
 800a342:	60c5      	str	r5, [r0, #12]
 800a344:	f104 0914 	add.w	r9, r4, #20
 800a348:	f108 0514 	add.w	r5, r8, #20
 800a34c:	f100 0e14 	add.w	lr, r0, #20
 800a350:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a354:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a358:	f108 0210 	add.w	r2, r8, #16
 800a35c:	46f2      	mov	sl, lr
 800a35e:	2100      	movs	r1, #0
 800a360:	f859 3b04 	ldr.w	r3, [r9], #4
 800a364:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a368:	fa1f f883 	uxth.w	r8, r3
 800a36c:	fa11 f18b 	uxtah	r1, r1, fp
 800a370:	0c1b      	lsrs	r3, r3, #16
 800a372:	eba1 0808 	sub.w	r8, r1, r8
 800a376:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a37a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a37e:	fa1f f888 	uxth.w	r8, r8
 800a382:	1419      	asrs	r1, r3, #16
 800a384:	454e      	cmp	r6, r9
 800a386:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a38a:	f84a 3b04 	str.w	r3, [sl], #4
 800a38e:	d8e7      	bhi.n	800a360 <__mdiff+0x80>
 800a390:	1b33      	subs	r3, r6, r4
 800a392:	3b15      	subs	r3, #21
 800a394:	f023 0303 	bic.w	r3, r3, #3
 800a398:	3304      	adds	r3, #4
 800a39a:	3415      	adds	r4, #21
 800a39c:	42a6      	cmp	r6, r4
 800a39e:	bf38      	it	cc
 800a3a0:	2304      	movcc	r3, #4
 800a3a2:	441d      	add	r5, r3
 800a3a4:	4473      	add	r3, lr
 800a3a6:	469e      	mov	lr, r3
 800a3a8:	462e      	mov	r6, r5
 800a3aa:	4566      	cmp	r6, ip
 800a3ac:	d30e      	bcc.n	800a3cc <__mdiff+0xec>
 800a3ae:	f10c 0203 	add.w	r2, ip, #3
 800a3b2:	1b52      	subs	r2, r2, r5
 800a3b4:	f022 0203 	bic.w	r2, r2, #3
 800a3b8:	3d03      	subs	r5, #3
 800a3ba:	45ac      	cmp	ip, r5
 800a3bc:	bf38      	it	cc
 800a3be:	2200      	movcc	r2, #0
 800a3c0:	441a      	add	r2, r3
 800a3c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a3c6:	b17b      	cbz	r3, 800a3e8 <__mdiff+0x108>
 800a3c8:	6107      	str	r7, [r0, #16]
 800a3ca:	e7a3      	b.n	800a314 <__mdiff+0x34>
 800a3cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3d0:	fa11 f288 	uxtah	r2, r1, r8
 800a3d4:	1414      	asrs	r4, r2, #16
 800a3d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3da:	b292      	uxth	r2, r2
 800a3dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3e0:	f84e 2b04 	str.w	r2, [lr], #4
 800a3e4:	1421      	asrs	r1, r4, #16
 800a3e6:	e7e0      	b.n	800a3aa <__mdiff+0xca>
 800a3e8:	3f01      	subs	r7, #1
 800a3ea:	e7ea      	b.n	800a3c2 <__mdiff+0xe2>
 800a3ec:	0800c120 	.word	0x0800c120
 800a3f0:	0800c1ac 	.word	0x0800c1ac

0800a3f4 <__ulp>:
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	ed8d 0b00 	vstr	d0, [sp]
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	4912      	ldr	r1, [pc, #72]	; (800a448 <__ulp+0x54>)
 800a3fe:	4019      	ands	r1, r3
 800a400:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a404:	2900      	cmp	r1, #0
 800a406:	dd05      	ble.n	800a414 <__ulp+0x20>
 800a408:	2200      	movs	r2, #0
 800a40a:	460b      	mov	r3, r1
 800a40c:	ec43 2b10 	vmov	d0, r2, r3
 800a410:	b002      	add	sp, #8
 800a412:	4770      	bx	lr
 800a414:	4249      	negs	r1, r1
 800a416:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a41a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a41e:	f04f 0200 	mov.w	r2, #0
 800a422:	f04f 0300 	mov.w	r3, #0
 800a426:	da04      	bge.n	800a432 <__ulp+0x3e>
 800a428:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a42c:	fa41 f300 	asr.w	r3, r1, r0
 800a430:	e7ec      	b.n	800a40c <__ulp+0x18>
 800a432:	f1a0 0114 	sub.w	r1, r0, #20
 800a436:	291e      	cmp	r1, #30
 800a438:	bfda      	itte	le
 800a43a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a43e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a442:	2101      	movgt	r1, #1
 800a444:	460a      	mov	r2, r1
 800a446:	e7e1      	b.n	800a40c <__ulp+0x18>
 800a448:	7ff00000 	.word	0x7ff00000

0800a44c <__b2d>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	6905      	ldr	r5, [r0, #16]
 800a450:	f100 0714 	add.w	r7, r0, #20
 800a454:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a458:	1f2e      	subs	r6, r5, #4
 800a45a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff fd48 	bl	8009ef4 <__hi0bits>
 800a464:	f1c0 0320 	rsb	r3, r0, #32
 800a468:	280a      	cmp	r0, #10
 800a46a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a4e8 <__b2d+0x9c>
 800a46e:	600b      	str	r3, [r1, #0]
 800a470:	dc14      	bgt.n	800a49c <__b2d+0x50>
 800a472:	f1c0 0e0b 	rsb	lr, r0, #11
 800a476:	fa24 f10e 	lsr.w	r1, r4, lr
 800a47a:	42b7      	cmp	r7, r6
 800a47c:	ea41 030c 	orr.w	r3, r1, ip
 800a480:	bf34      	ite	cc
 800a482:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a486:	2100      	movcs	r1, #0
 800a488:	3015      	adds	r0, #21
 800a48a:	fa04 f000 	lsl.w	r0, r4, r0
 800a48e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a492:	ea40 0201 	orr.w	r2, r0, r1
 800a496:	ec43 2b10 	vmov	d0, r2, r3
 800a49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a49c:	42b7      	cmp	r7, r6
 800a49e:	bf3a      	itte	cc
 800a4a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a4a8:	2100      	movcs	r1, #0
 800a4aa:	380b      	subs	r0, #11
 800a4ac:	d017      	beq.n	800a4de <__b2d+0x92>
 800a4ae:	f1c0 0c20 	rsb	ip, r0, #32
 800a4b2:	fa04 f500 	lsl.w	r5, r4, r0
 800a4b6:	42be      	cmp	r6, r7
 800a4b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a4bc:	ea45 0504 	orr.w	r5, r5, r4
 800a4c0:	bf8c      	ite	hi
 800a4c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a4c6:	2400      	movls	r4, #0
 800a4c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a4cc:	fa01 f000 	lsl.w	r0, r1, r0
 800a4d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a4d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a4d8:	ea40 0204 	orr.w	r2, r0, r4
 800a4dc:	e7db      	b.n	800a496 <__b2d+0x4a>
 800a4de:	ea44 030c 	orr.w	r3, r4, ip
 800a4e2:	460a      	mov	r2, r1
 800a4e4:	e7d7      	b.n	800a496 <__b2d+0x4a>
 800a4e6:	bf00      	nop
 800a4e8:	3ff00000 	.word	0x3ff00000

0800a4ec <__d2b>:
 800a4ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	ec57 6b10 	vmov	r6, r7, d0
 800a4f8:	4690      	mov	r8, r2
 800a4fa:	f7ff fc09 	bl	8009d10 <_Balloc>
 800a4fe:	4604      	mov	r4, r0
 800a500:	b930      	cbnz	r0, 800a510 <__d2b+0x24>
 800a502:	4602      	mov	r2, r0
 800a504:	4b25      	ldr	r3, [pc, #148]	; (800a59c <__d2b+0xb0>)
 800a506:	4826      	ldr	r0, [pc, #152]	; (800a5a0 <__d2b+0xb4>)
 800a508:	f240 310a 	movw	r1, #778	; 0x30a
 800a50c:	f000 ff58 	bl	800b3c0 <__assert_func>
 800a510:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a514:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a518:	bb35      	cbnz	r5, 800a568 <__d2b+0x7c>
 800a51a:	2e00      	cmp	r6, #0
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	d028      	beq.n	800a572 <__d2b+0x86>
 800a520:	4668      	mov	r0, sp
 800a522:	9600      	str	r6, [sp, #0]
 800a524:	f7ff fd06 	bl	8009f34 <__lo0bits>
 800a528:	9900      	ldr	r1, [sp, #0]
 800a52a:	b300      	cbz	r0, 800a56e <__d2b+0x82>
 800a52c:	9a01      	ldr	r2, [sp, #4]
 800a52e:	f1c0 0320 	rsb	r3, r0, #32
 800a532:	fa02 f303 	lsl.w	r3, r2, r3
 800a536:	430b      	orrs	r3, r1
 800a538:	40c2      	lsrs	r2, r0
 800a53a:	6163      	str	r3, [r4, #20]
 800a53c:	9201      	str	r2, [sp, #4]
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	61a3      	str	r3, [r4, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bf14      	ite	ne
 800a546:	2202      	movne	r2, #2
 800a548:	2201      	moveq	r2, #1
 800a54a:	6122      	str	r2, [r4, #16]
 800a54c:	b1d5      	cbz	r5, 800a584 <__d2b+0x98>
 800a54e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a552:	4405      	add	r5, r0
 800a554:	f8c9 5000 	str.w	r5, [r9]
 800a558:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a55c:	f8c8 0000 	str.w	r0, [r8]
 800a560:	4620      	mov	r0, r4
 800a562:	b003      	add	sp, #12
 800a564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a56c:	e7d5      	b.n	800a51a <__d2b+0x2e>
 800a56e:	6161      	str	r1, [r4, #20]
 800a570:	e7e5      	b.n	800a53e <__d2b+0x52>
 800a572:	a801      	add	r0, sp, #4
 800a574:	f7ff fcde 	bl	8009f34 <__lo0bits>
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	6163      	str	r3, [r4, #20]
 800a57c:	2201      	movs	r2, #1
 800a57e:	6122      	str	r2, [r4, #16]
 800a580:	3020      	adds	r0, #32
 800a582:	e7e3      	b.n	800a54c <__d2b+0x60>
 800a584:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a588:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a58c:	f8c9 0000 	str.w	r0, [r9]
 800a590:	6918      	ldr	r0, [r3, #16]
 800a592:	f7ff fcaf 	bl	8009ef4 <__hi0bits>
 800a596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a59a:	e7df      	b.n	800a55c <__d2b+0x70>
 800a59c:	0800c120 	.word	0x0800c120
 800a5a0:	0800c1ac 	.word	0x0800c1ac

0800a5a4 <__ratio>:
 800a5a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a8:	4688      	mov	r8, r1
 800a5aa:	4669      	mov	r1, sp
 800a5ac:	4681      	mov	r9, r0
 800a5ae:	f7ff ff4d 	bl	800a44c <__b2d>
 800a5b2:	a901      	add	r1, sp, #4
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	ec55 4b10 	vmov	r4, r5, d0
 800a5ba:	f7ff ff47 	bl	800a44c <__b2d>
 800a5be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a5c6:	eba3 0c02 	sub.w	ip, r3, r2
 800a5ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5ce:	1a9b      	subs	r3, r3, r2
 800a5d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a5d4:	ec51 0b10 	vmov	r0, r1, d0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bfd6      	itet	le
 800a5dc:	460a      	movle	r2, r1
 800a5de:	462a      	movgt	r2, r5
 800a5e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5e4:	468b      	mov	fp, r1
 800a5e6:	462f      	mov	r7, r5
 800a5e8:	bfd4      	ite	le
 800a5ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a5ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	ee10 2a10 	vmov	r2, s0
 800a5f8:	465b      	mov	r3, fp
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f6 f946 	bl	800088c <__aeabi_ddiv>
 800a600:	ec41 0b10 	vmov	d0, r0, r1
 800a604:	b003      	add	sp, #12
 800a606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a60a <__copybits>:
 800a60a:	3901      	subs	r1, #1
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	1149      	asrs	r1, r1, #5
 800a610:	6914      	ldr	r4, [r2, #16]
 800a612:	3101      	adds	r1, #1
 800a614:	f102 0314 	add.w	r3, r2, #20
 800a618:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a61c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a620:	1f05      	subs	r5, r0, #4
 800a622:	42a3      	cmp	r3, r4
 800a624:	d30c      	bcc.n	800a640 <__copybits+0x36>
 800a626:	1aa3      	subs	r3, r4, r2
 800a628:	3b11      	subs	r3, #17
 800a62a:	f023 0303 	bic.w	r3, r3, #3
 800a62e:	3211      	adds	r2, #17
 800a630:	42a2      	cmp	r2, r4
 800a632:	bf88      	it	hi
 800a634:	2300      	movhi	r3, #0
 800a636:	4418      	add	r0, r3
 800a638:	2300      	movs	r3, #0
 800a63a:	4288      	cmp	r0, r1
 800a63c:	d305      	bcc.n	800a64a <__copybits+0x40>
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	f853 6b04 	ldr.w	r6, [r3], #4
 800a644:	f845 6f04 	str.w	r6, [r5, #4]!
 800a648:	e7eb      	b.n	800a622 <__copybits+0x18>
 800a64a:	f840 3b04 	str.w	r3, [r0], #4
 800a64e:	e7f4      	b.n	800a63a <__copybits+0x30>

0800a650 <__any_on>:
 800a650:	f100 0214 	add.w	r2, r0, #20
 800a654:	6900      	ldr	r0, [r0, #16]
 800a656:	114b      	asrs	r3, r1, #5
 800a658:	4298      	cmp	r0, r3
 800a65a:	b510      	push	{r4, lr}
 800a65c:	db11      	blt.n	800a682 <__any_on+0x32>
 800a65e:	dd0a      	ble.n	800a676 <__any_on+0x26>
 800a660:	f011 011f 	ands.w	r1, r1, #31
 800a664:	d007      	beq.n	800a676 <__any_on+0x26>
 800a666:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a66a:	fa24 f001 	lsr.w	r0, r4, r1
 800a66e:	fa00 f101 	lsl.w	r1, r0, r1
 800a672:	428c      	cmp	r4, r1
 800a674:	d10b      	bne.n	800a68e <__any_on+0x3e>
 800a676:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d803      	bhi.n	800a686 <__any_on+0x36>
 800a67e:	2000      	movs	r0, #0
 800a680:	bd10      	pop	{r4, pc}
 800a682:	4603      	mov	r3, r0
 800a684:	e7f7      	b.n	800a676 <__any_on+0x26>
 800a686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a68a:	2900      	cmp	r1, #0
 800a68c:	d0f5      	beq.n	800a67a <__any_on+0x2a>
 800a68e:	2001      	movs	r0, #1
 800a690:	e7f6      	b.n	800a680 <__any_on+0x30>

0800a692 <_calloc_r>:
 800a692:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a694:	fba1 2402 	umull	r2, r4, r1, r2
 800a698:	b94c      	cbnz	r4, 800a6ae <_calloc_r+0x1c>
 800a69a:	4611      	mov	r1, r2
 800a69c:	9201      	str	r2, [sp, #4]
 800a69e:	f000 f87b 	bl	800a798 <_malloc_r>
 800a6a2:	9a01      	ldr	r2, [sp, #4]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	b930      	cbnz	r0, 800a6b6 <_calloc_r+0x24>
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	b003      	add	sp, #12
 800a6ac:	bd30      	pop	{r4, r5, pc}
 800a6ae:	220c      	movs	r2, #12
 800a6b0:	6002      	str	r2, [r0, #0]
 800a6b2:	2500      	movs	r5, #0
 800a6b4:	e7f8      	b.n	800a6a8 <_calloc_r+0x16>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	f7fc fb02 	bl	8006cc0 <memset>
 800a6bc:	e7f4      	b.n	800a6a8 <_calloc_r+0x16>
	...

0800a6c0 <_free_r>:
 800a6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6c2:	2900      	cmp	r1, #0
 800a6c4:	d044      	beq.n	800a750 <_free_r+0x90>
 800a6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ca:	9001      	str	r0, [sp, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a6d2:	bfb8      	it	lt
 800a6d4:	18e4      	addlt	r4, r4, r3
 800a6d6:	f001 f877 	bl	800b7c8 <__malloc_lock>
 800a6da:	4a1e      	ldr	r2, [pc, #120]	; (800a754 <_free_r+0x94>)
 800a6dc:	9801      	ldr	r0, [sp, #4]
 800a6de:	6813      	ldr	r3, [r2, #0]
 800a6e0:	b933      	cbnz	r3, 800a6f0 <_free_r+0x30>
 800a6e2:	6063      	str	r3, [r4, #4]
 800a6e4:	6014      	str	r4, [r2, #0]
 800a6e6:	b003      	add	sp, #12
 800a6e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6ec:	f001 b872 	b.w	800b7d4 <__malloc_unlock>
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	d908      	bls.n	800a706 <_free_r+0x46>
 800a6f4:	6825      	ldr	r5, [r4, #0]
 800a6f6:	1961      	adds	r1, r4, r5
 800a6f8:	428b      	cmp	r3, r1
 800a6fa:	bf01      	itttt	eq
 800a6fc:	6819      	ldreq	r1, [r3, #0]
 800a6fe:	685b      	ldreq	r3, [r3, #4]
 800a700:	1949      	addeq	r1, r1, r5
 800a702:	6021      	streq	r1, [r4, #0]
 800a704:	e7ed      	b.n	800a6e2 <_free_r+0x22>
 800a706:	461a      	mov	r2, r3
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	b10b      	cbz	r3, 800a710 <_free_r+0x50>
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	d9fa      	bls.n	800a706 <_free_r+0x46>
 800a710:	6811      	ldr	r1, [r2, #0]
 800a712:	1855      	adds	r5, r2, r1
 800a714:	42a5      	cmp	r5, r4
 800a716:	d10b      	bne.n	800a730 <_free_r+0x70>
 800a718:	6824      	ldr	r4, [r4, #0]
 800a71a:	4421      	add	r1, r4
 800a71c:	1854      	adds	r4, r2, r1
 800a71e:	42a3      	cmp	r3, r4
 800a720:	6011      	str	r1, [r2, #0]
 800a722:	d1e0      	bne.n	800a6e6 <_free_r+0x26>
 800a724:	681c      	ldr	r4, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	6053      	str	r3, [r2, #4]
 800a72a:	4421      	add	r1, r4
 800a72c:	6011      	str	r1, [r2, #0]
 800a72e:	e7da      	b.n	800a6e6 <_free_r+0x26>
 800a730:	d902      	bls.n	800a738 <_free_r+0x78>
 800a732:	230c      	movs	r3, #12
 800a734:	6003      	str	r3, [r0, #0]
 800a736:	e7d6      	b.n	800a6e6 <_free_r+0x26>
 800a738:	6825      	ldr	r5, [r4, #0]
 800a73a:	1961      	adds	r1, r4, r5
 800a73c:	428b      	cmp	r3, r1
 800a73e:	bf04      	itt	eq
 800a740:	6819      	ldreq	r1, [r3, #0]
 800a742:	685b      	ldreq	r3, [r3, #4]
 800a744:	6063      	str	r3, [r4, #4]
 800a746:	bf04      	itt	eq
 800a748:	1949      	addeq	r1, r1, r5
 800a74a:	6021      	streq	r1, [r4, #0]
 800a74c:	6054      	str	r4, [r2, #4]
 800a74e:	e7ca      	b.n	800a6e6 <_free_r+0x26>
 800a750:	b003      	add	sp, #12
 800a752:	bd30      	pop	{r4, r5, pc}
 800a754:	20000890 	.word	0x20000890

0800a758 <sbrk_aligned>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	4e0e      	ldr	r6, [pc, #56]	; (800a794 <sbrk_aligned+0x3c>)
 800a75c:	460c      	mov	r4, r1
 800a75e:	6831      	ldr	r1, [r6, #0]
 800a760:	4605      	mov	r5, r0
 800a762:	b911      	cbnz	r1, 800a76a <sbrk_aligned+0x12>
 800a764:	f000 fd28 	bl	800b1b8 <_sbrk_r>
 800a768:	6030      	str	r0, [r6, #0]
 800a76a:	4621      	mov	r1, r4
 800a76c:	4628      	mov	r0, r5
 800a76e:	f000 fd23 	bl	800b1b8 <_sbrk_r>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	d00a      	beq.n	800a78c <sbrk_aligned+0x34>
 800a776:	1cc4      	adds	r4, r0, #3
 800a778:	f024 0403 	bic.w	r4, r4, #3
 800a77c:	42a0      	cmp	r0, r4
 800a77e:	d007      	beq.n	800a790 <sbrk_aligned+0x38>
 800a780:	1a21      	subs	r1, r4, r0
 800a782:	4628      	mov	r0, r5
 800a784:	f000 fd18 	bl	800b1b8 <_sbrk_r>
 800a788:	3001      	adds	r0, #1
 800a78a:	d101      	bne.n	800a790 <sbrk_aligned+0x38>
 800a78c:	f04f 34ff 	mov.w	r4, #4294967295
 800a790:	4620      	mov	r0, r4
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	20000894 	.word	0x20000894

0800a798 <_malloc_r>:
 800a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79c:	1ccd      	adds	r5, r1, #3
 800a79e:	f025 0503 	bic.w	r5, r5, #3
 800a7a2:	3508      	adds	r5, #8
 800a7a4:	2d0c      	cmp	r5, #12
 800a7a6:	bf38      	it	cc
 800a7a8:	250c      	movcc	r5, #12
 800a7aa:	2d00      	cmp	r5, #0
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	db01      	blt.n	800a7b4 <_malloc_r+0x1c>
 800a7b0:	42a9      	cmp	r1, r5
 800a7b2:	d905      	bls.n	800a7c0 <_malloc_r+0x28>
 800a7b4:	230c      	movs	r3, #12
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	2600      	movs	r6, #0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	4e2e      	ldr	r6, [pc, #184]	; (800a87c <_malloc_r+0xe4>)
 800a7c2:	f001 f801 	bl	800b7c8 <__malloc_lock>
 800a7c6:	6833      	ldr	r3, [r6, #0]
 800a7c8:	461c      	mov	r4, r3
 800a7ca:	bb34      	cbnz	r4, 800a81a <_malloc_r+0x82>
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f7ff ffc2 	bl	800a758 <sbrk_aligned>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	d14d      	bne.n	800a876 <_malloc_r+0xde>
 800a7da:	6834      	ldr	r4, [r6, #0]
 800a7dc:	4626      	mov	r6, r4
 800a7de:	2e00      	cmp	r6, #0
 800a7e0:	d140      	bne.n	800a864 <_malloc_r+0xcc>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	eb04 0803 	add.w	r8, r4, r3
 800a7ec:	f000 fce4 	bl	800b1b8 <_sbrk_r>
 800a7f0:	4580      	cmp	r8, r0
 800a7f2:	d13a      	bne.n	800a86a <_malloc_r+0xd2>
 800a7f4:	6821      	ldr	r1, [r4, #0]
 800a7f6:	3503      	adds	r5, #3
 800a7f8:	1a6d      	subs	r5, r5, r1
 800a7fa:	f025 0503 	bic.w	r5, r5, #3
 800a7fe:	3508      	adds	r5, #8
 800a800:	2d0c      	cmp	r5, #12
 800a802:	bf38      	it	cc
 800a804:	250c      	movcc	r5, #12
 800a806:	4629      	mov	r1, r5
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff ffa5 	bl	800a758 <sbrk_aligned>
 800a80e:	3001      	adds	r0, #1
 800a810:	d02b      	beq.n	800a86a <_malloc_r+0xd2>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	442b      	add	r3, r5
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	e00e      	b.n	800a838 <_malloc_r+0xa0>
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	1b52      	subs	r2, r2, r5
 800a81e:	d41e      	bmi.n	800a85e <_malloc_r+0xc6>
 800a820:	2a0b      	cmp	r2, #11
 800a822:	d916      	bls.n	800a852 <_malloc_r+0xba>
 800a824:	1961      	adds	r1, r4, r5
 800a826:	42a3      	cmp	r3, r4
 800a828:	6025      	str	r5, [r4, #0]
 800a82a:	bf18      	it	ne
 800a82c:	6059      	strne	r1, [r3, #4]
 800a82e:	6863      	ldr	r3, [r4, #4]
 800a830:	bf08      	it	eq
 800a832:	6031      	streq	r1, [r6, #0]
 800a834:	5162      	str	r2, [r4, r5]
 800a836:	604b      	str	r3, [r1, #4]
 800a838:	4638      	mov	r0, r7
 800a83a:	f104 060b 	add.w	r6, r4, #11
 800a83e:	f000 ffc9 	bl	800b7d4 <__malloc_unlock>
 800a842:	f026 0607 	bic.w	r6, r6, #7
 800a846:	1d23      	adds	r3, r4, #4
 800a848:	1af2      	subs	r2, r6, r3
 800a84a:	d0b6      	beq.n	800a7ba <_malloc_r+0x22>
 800a84c:	1b9b      	subs	r3, r3, r6
 800a84e:	50a3      	str	r3, [r4, r2]
 800a850:	e7b3      	b.n	800a7ba <_malloc_r+0x22>
 800a852:	6862      	ldr	r2, [r4, #4]
 800a854:	42a3      	cmp	r3, r4
 800a856:	bf0c      	ite	eq
 800a858:	6032      	streq	r2, [r6, #0]
 800a85a:	605a      	strne	r2, [r3, #4]
 800a85c:	e7ec      	b.n	800a838 <_malloc_r+0xa0>
 800a85e:	4623      	mov	r3, r4
 800a860:	6864      	ldr	r4, [r4, #4]
 800a862:	e7b2      	b.n	800a7ca <_malloc_r+0x32>
 800a864:	4634      	mov	r4, r6
 800a866:	6876      	ldr	r6, [r6, #4]
 800a868:	e7b9      	b.n	800a7de <_malloc_r+0x46>
 800a86a:	230c      	movs	r3, #12
 800a86c:	603b      	str	r3, [r7, #0]
 800a86e:	4638      	mov	r0, r7
 800a870:	f000 ffb0 	bl	800b7d4 <__malloc_unlock>
 800a874:	e7a1      	b.n	800a7ba <_malloc_r+0x22>
 800a876:	6025      	str	r5, [r4, #0]
 800a878:	e7de      	b.n	800a838 <_malloc_r+0xa0>
 800a87a:	bf00      	nop
 800a87c:	20000890 	.word	0x20000890

0800a880 <__ssputs_r>:
 800a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	688e      	ldr	r6, [r1, #8]
 800a886:	429e      	cmp	r6, r3
 800a888:	4682      	mov	sl, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4690      	mov	r8, r2
 800a88e:	461f      	mov	r7, r3
 800a890:	d838      	bhi.n	800a904 <__ssputs_r+0x84>
 800a892:	898a      	ldrh	r2, [r1, #12]
 800a894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a898:	d032      	beq.n	800a900 <__ssputs_r+0x80>
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	6909      	ldr	r1, [r1, #16]
 800a89e:	eba5 0901 	sub.w	r9, r5, r1
 800a8a2:	6965      	ldr	r5, [r4, #20]
 800a8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	444b      	add	r3, r9
 800a8b0:	106d      	asrs	r5, r5, #1
 800a8b2:	429d      	cmp	r5, r3
 800a8b4:	bf38      	it	cc
 800a8b6:	461d      	movcc	r5, r3
 800a8b8:	0553      	lsls	r3, r2, #21
 800a8ba:	d531      	bpl.n	800a920 <__ssputs_r+0xa0>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7ff ff6b 	bl	800a798 <_malloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	b950      	cbnz	r0, 800a8dc <__ssputs_r+0x5c>
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	f8ca 3000 	str.w	r3, [sl]
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8dc:	6921      	ldr	r1, [r4, #16]
 800a8de:	464a      	mov	r2, r9
 800a8e0:	f7ff fa08 	bl	8009cf4 <memcpy>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	6126      	str	r6, [r4, #16]
 800a8f2:	6165      	str	r5, [r4, #20]
 800a8f4:	444e      	add	r6, r9
 800a8f6:	eba5 0509 	sub.w	r5, r5, r9
 800a8fa:	6026      	str	r6, [r4, #0]
 800a8fc:	60a5      	str	r5, [r4, #8]
 800a8fe:	463e      	mov	r6, r7
 800a900:	42be      	cmp	r6, r7
 800a902:	d900      	bls.n	800a906 <__ssputs_r+0x86>
 800a904:	463e      	mov	r6, r7
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	4632      	mov	r2, r6
 800a90a:	4641      	mov	r1, r8
 800a90c:	f000 ff42 	bl	800b794 <memmove>
 800a910:	68a3      	ldr	r3, [r4, #8]
 800a912:	1b9b      	subs	r3, r3, r6
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	4433      	add	r3, r6
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	2000      	movs	r0, #0
 800a91e:	e7db      	b.n	800a8d8 <__ssputs_r+0x58>
 800a920:	462a      	mov	r2, r5
 800a922:	f000 ff5d 	bl	800b7e0 <_realloc_r>
 800a926:	4606      	mov	r6, r0
 800a928:	2800      	cmp	r0, #0
 800a92a:	d1e1      	bne.n	800a8f0 <__ssputs_r+0x70>
 800a92c:	6921      	ldr	r1, [r4, #16]
 800a92e:	4650      	mov	r0, sl
 800a930:	f7ff fec6 	bl	800a6c0 <_free_r>
 800a934:	e7c7      	b.n	800a8c6 <__ssputs_r+0x46>
	...

0800a938 <_svfiprintf_r>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	4698      	mov	r8, r3
 800a93e:	898b      	ldrh	r3, [r1, #12]
 800a940:	061b      	lsls	r3, r3, #24
 800a942:	b09d      	sub	sp, #116	; 0x74
 800a944:	4607      	mov	r7, r0
 800a946:	460d      	mov	r5, r1
 800a948:	4614      	mov	r4, r2
 800a94a:	d50e      	bpl.n	800a96a <_svfiprintf_r+0x32>
 800a94c:	690b      	ldr	r3, [r1, #16]
 800a94e:	b963      	cbnz	r3, 800a96a <_svfiprintf_r+0x32>
 800a950:	2140      	movs	r1, #64	; 0x40
 800a952:	f7ff ff21 	bl	800a798 <_malloc_r>
 800a956:	6028      	str	r0, [r5, #0]
 800a958:	6128      	str	r0, [r5, #16]
 800a95a:	b920      	cbnz	r0, 800a966 <_svfiprintf_r+0x2e>
 800a95c:	230c      	movs	r3, #12
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	e0d1      	b.n	800ab0a <_svfiprintf_r+0x1d2>
 800a966:	2340      	movs	r3, #64	; 0x40
 800a968:	616b      	str	r3, [r5, #20]
 800a96a:	2300      	movs	r3, #0
 800a96c:	9309      	str	r3, [sp, #36]	; 0x24
 800a96e:	2320      	movs	r3, #32
 800a970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a974:	f8cd 800c 	str.w	r8, [sp, #12]
 800a978:	2330      	movs	r3, #48	; 0x30
 800a97a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab24 <_svfiprintf_r+0x1ec>
 800a97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a982:	f04f 0901 	mov.w	r9, #1
 800a986:	4623      	mov	r3, r4
 800a988:	469a      	mov	sl, r3
 800a98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98e:	b10a      	cbz	r2, 800a994 <_svfiprintf_r+0x5c>
 800a990:	2a25      	cmp	r2, #37	; 0x25
 800a992:	d1f9      	bne.n	800a988 <_svfiprintf_r+0x50>
 800a994:	ebba 0b04 	subs.w	fp, sl, r4
 800a998:	d00b      	beq.n	800a9b2 <_svfiprintf_r+0x7a>
 800a99a:	465b      	mov	r3, fp
 800a99c:	4622      	mov	r2, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f7ff ff6d 	bl	800a880 <__ssputs_r>
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f000 80aa 	beq.w	800ab00 <_svfiprintf_r+0x1c8>
 800a9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ae:	445a      	add	r2, fp
 800a9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 80a2 	beq.w	800ab00 <_svfiprintf_r+0x1c8>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c6:	f10a 0a01 	add.w	sl, sl, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	9307      	str	r3, [sp, #28]
 800a9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d4:	4654      	mov	r4, sl
 800a9d6:	2205      	movs	r2, #5
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	4851      	ldr	r0, [pc, #324]	; (800ab24 <_svfiprintf_r+0x1ec>)
 800a9de:	f7f5 fc1f 	bl	8000220 <memchr>
 800a9e2:	9a04      	ldr	r2, [sp, #16]
 800a9e4:	b9d8      	cbnz	r0, 800aa1e <_svfiprintf_r+0xe6>
 800a9e6:	06d0      	lsls	r0, r2, #27
 800a9e8:	bf44      	itt	mi
 800a9ea:	2320      	movmi	r3, #32
 800a9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f0:	0711      	lsls	r1, r2, #28
 800a9f2:	bf44      	itt	mi
 800a9f4:	232b      	movmi	r3, #43	; 0x2b
 800a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800aa00:	d015      	beq.n	800aa2e <_svfiprintf_r+0xf6>
 800aa02:	9a07      	ldr	r2, [sp, #28]
 800aa04:	4654      	mov	r4, sl
 800aa06:	2000      	movs	r0, #0
 800aa08:	f04f 0c0a 	mov.w	ip, #10
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa12:	3b30      	subs	r3, #48	; 0x30
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d94e      	bls.n	800aab6 <_svfiprintf_r+0x17e>
 800aa18:	b1b0      	cbz	r0, 800aa48 <_svfiprintf_r+0x110>
 800aa1a:	9207      	str	r2, [sp, #28]
 800aa1c:	e014      	b.n	800aa48 <_svfiprintf_r+0x110>
 800aa1e:	eba0 0308 	sub.w	r3, r0, r8
 800aa22:	fa09 f303 	lsl.w	r3, r9, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	46a2      	mov	sl, r4
 800aa2c:	e7d2      	b.n	800a9d4 <_svfiprintf_r+0x9c>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	1d19      	adds	r1, r3, #4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	9103      	str	r1, [sp, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	bfbb      	ittet	lt
 800aa3a:	425b      	neglt	r3, r3
 800aa3c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa40:	9307      	strge	r3, [sp, #28]
 800aa42:	9307      	strlt	r3, [sp, #28]
 800aa44:	bfb8      	it	lt
 800aa46:	9204      	strlt	r2, [sp, #16]
 800aa48:	7823      	ldrb	r3, [r4, #0]
 800aa4a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa4c:	d10c      	bne.n	800aa68 <_svfiprintf_r+0x130>
 800aa4e:	7863      	ldrb	r3, [r4, #1]
 800aa50:	2b2a      	cmp	r3, #42	; 0x2a
 800aa52:	d135      	bne.n	800aac0 <_svfiprintf_r+0x188>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	9203      	str	r2, [sp, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfb8      	it	lt
 800aa60:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa64:	3402      	adds	r4, #2
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab34 <_svfiprintf_r+0x1fc>
 800aa6c:	7821      	ldrb	r1, [r4, #0]
 800aa6e:	2203      	movs	r2, #3
 800aa70:	4650      	mov	r0, sl
 800aa72:	f7f5 fbd5 	bl	8000220 <memchr>
 800aa76:	b140      	cbz	r0, 800aa8a <_svfiprintf_r+0x152>
 800aa78:	2340      	movs	r3, #64	; 0x40
 800aa7a:	eba0 000a 	sub.w	r0, r0, sl
 800aa7e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	4303      	orrs	r3, r0
 800aa86:	3401      	adds	r4, #1
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8e:	4826      	ldr	r0, [pc, #152]	; (800ab28 <_svfiprintf_r+0x1f0>)
 800aa90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa94:	2206      	movs	r2, #6
 800aa96:	f7f5 fbc3 	bl	8000220 <memchr>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d038      	beq.n	800ab10 <_svfiprintf_r+0x1d8>
 800aa9e:	4b23      	ldr	r3, [pc, #140]	; (800ab2c <_svfiprintf_r+0x1f4>)
 800aaa0:	bb1b      	cbnz	r3, 800aaea <_svfiprintf_r+0x1b2>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	f023 0307 	bic.w	r3, r3, #7
 800aaaa:	3308      	adds	r3, #8
 800aaac:	9303      	str	r3, [sp, #12]
 800aaae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab0:	4433      	add	r3, r6
 800aab2:	9309      	str	r3, [sp, #36]	; 0x24
 800aab4:	e767      	b.n	800a986 <_svfiprintf_r+0x4e>
 800aab6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaba:	460c      	mov	r4, r1
 800aabc:	2001      	movs	r0, #1
 800aabe:	e7a5      	b.n	800aa0c <_svfiprintf_r+0xd4>
 800aac0:	2300      	movs	r3, #0
 800aac2:	3401      	adds	r4, #1
 800aac4:	9305      	str	r3, [sp, #20]
 800aac6:	4619      	mov	r1, r3
 800aac8:	f04f 0c0a 	mov.w	ip, #10
 800aacc:	4620      	mov	r0, r4
 800aace:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad2:	3a30      	subs	r2, #48	; 0x30
 800aad4:	2a09      	cmp	r2, #9
 800aad6:	d903      	bls.n	800aae0 <_svfiprintf_r+0x1a8>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0c5      	beq.n	800aa68 <_svfiprintf_r+0x130>
 800aadc:	9105      	str	r1, [sp, #20]
 800aade:	e7c3      	b.n	800aa68 <_svfiprintf_r+0x130>
 800aae0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae4:	4604      	mov	r4, r0
 800aae6:	2301      	movs	r3, #1
 800aae8:	e7f0      	b.n	800aacc <_svfiprintf_r+0x194>
 800aaea:	ab03      	add	r3, sp, #12
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	462a      	mov	r2, r5
 800aaf0:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <_svfiprintf_r+0x1f8>)
 800aaf2:	a904      	add	r1, sp, #16
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7fc f98b 	bl	8006e10 <_printf_float>
 800aafa:	1c42      	adds	r2, r0, #1
 800aafc:	4606      	mov	r6, r0
 800aafe:	d1d6      	bne.n	800aaae <_svfiprintf_r+0x176>
 800ab00:	89ab      	ldrh	r3, [r5, #12]
 800ab02:	065b      	lsls	r3, r3, #25
 800ab04:	f53f af2c 	bmi.w	800a960 <_svfiprintf_r+0x28>
 800ab08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab0a:	b01d      	add	sp, #116	; 0x74
 800ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab10:	ab03      	add	r3, sp, #12
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	462a      	mov	r2, r5
 800ab16:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <_svfiprintf_r+0x1f8>)
 800ab18:	a904      	add	r1, sp, #16
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	f7fc fc1c 	bl	8007358 <_printf_i>
 800ab20:	e7eb      	b.n	800aafa <_svfiprintf_r+0x1c2>
 800ab22:	bf00      	nop
 800ab24:	0800c304 	.word	0x0800c304
 800ab28:	0800c30e 	.word	0x0800c30e
 800ab2c:	08006e11 	.word	0x08006e11
 800ab30:	0800a881 	.word	0x0800a881
 800ab34:	0800c30a 	.word	0x0800c30a

0800ab38 <_sungetc_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	1c4b      	adds	r3, r1, #1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	d103      	bne.n	800ab48 <_sungetc_r+0x10>
 800ab40:	f04f 35ff 	mov.w	r5, #4294967295
 800ab44:	4628      	mov	r0, r5
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	8993      	ldrh	r3, [r2, #12]
 800ab4a:	f023 0320 	bic.w	r3, r3, #32
 800ab4e:	8193      	strh	r3, [r2, #12]
 800ab50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab52:	6852      	ldr	r2, [r2, #4]
 800ab54:	b2cd      	uxtb	r5, r1
 800ab56:	b18b      	cbz	r3, 800ab7c <_sungetc_r+0x44>
 800ab58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	dd08      	ble.n	800ab70 <_sungetc_r+0x38>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	1e5a      	subs	r2, r3, #1
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ab68:	6863      	ldr	r3, [r4, #4]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	e7e9      	b.n	800ab44 <_sungetc_r+0xc>
 800ab70:	4621      	mov	r1, r4
 800ab72:	f000 fbdd 	bl	800b330 <__submore>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d0f1      	beq.n	800ab5e <_sungetc_r+0x26>
 800ab7a:	e7e1      	b.n	800ab40 <_sungetc_r+0x8>
 800ab7c:	6921      	ldr	r1, [r4, #16]
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	b151      	cbz	r1, 800ab98 <_sungetc_r+0x60>
 800ab82:	4299      	cmp	r1, r3
 800ab84:	d208      	bcs.n	800ab98 <_sungetc_r+0x60>
 800ab86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ab8a:	42a9      	cmp	r1, r5
 800ab8c:	d104      	bne.n	800ab98 <_sungetc_r+0x60>
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	3201      	adds	r2, #1
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	6062      	str	r2, [r4, #4]
 800ab96:	e7d5      	b.n	800ab44 <_sungetc_r+0xc>
 800ab98:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ab9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aba0:	6363      	str	r3, [r4, #52]	; 0x34
 800aba2:	2303      	movs	r3, #3
 800aba4:	63a3      	str	r3, [r4, #56]	; 0x38
 800aba6:	4623      	mov	r3, r4
 800aba8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	2301      	movs	r3, #1
 800abb0:	e7dc      	b.n	800ab6c <_sungetc_r+0x34>

0800abb2 <__ssrefill_r>:
 800abb2:	b510      	push	{r4, lr}
 800abb4:	460c      	mov	r4, r1
 800abb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800abb8:	b169      	cbz	r1, 800abd6 <__ssrefill_r+0x24>
 800abba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d001      	beq.n	800abc6 <__ssrefill_r+0x14>
 800abc2:	f7ff fd7d 	bl	800a6c0 <_free_r>
 800abc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abc8:	6063      	str	r3, [r4, #4]
 800abca:	2000      	movs	r0, #0
 800abcc:	6360      	str	r0, [r4, #52]	; 0x34
 800abce:	b113      	cbz	r3, 800abd6 <__ssrefill_r+0x24>
 800abd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	bd10      	pop	{r4, pc}
 800abd6:	6923      	ldr	r3, [r4, #16]
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	2300      	movs	r3, #0
 800abdc:	6063      	str	r3, [r4, #4]
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f043 0320 	orr.w	r3, r3, #32
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	f04f 30ff 	mov.w	r0, #4294967295
 800abea:	e7f3      	b.n	800abd4 <__ssrefill_r+0x22>

0800abec <__ssvfiscanf_r>:
 800abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf0:	460c      	mov	r4, r1
 800abf2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800abf6:	2100      	movs	r1, #0
 800abf8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800abfc:	49a6      	ldr	r1, [pc, #664]	; (800ae98 <__ssvfiscanf_r+0x2ac>)
 800abfe:	91a0      	str	r1, [sp, #640]	; 0x280
 800ac00:	f10d 0804 	add.w	r8, sp, #4
 800ac04:	49a5      	ldr	r1, [pc, #660]	; (800ae9c <__ssvfiscanf_r+0x2b0>)
 800ac06:	4fa6      	ldr	r7, [pc, #664]	; (800aea0 <__ssvfiscanf_r+0x2b4>)
 800ac08:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800aea4 <__ssvfiscanf_r+0x2b8>
 800ac0c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ac10:	4606      	mov	r6, r0
 800ac12:	91a1      	str	r1, [sp, #644]	; 0x284
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	7813      	ldrb	r3, [r2, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 815a 	beq.w	800aed2 <__ssvfiscanf_r+0x2e6>
 800ac1e:	5dd9      	ldrb	r1, [r3, r7]
 800ac20:	f011 0108 	ands.w	r1, r1, #8
 800ac24:	f102 0501 	add.w	r5, r2, #1
 800ac28:	d019      	beq.n	800ac5e <__ssvfiscanf_r+0x72>
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd0f      	ble.n	800ac50 <__ssvfiscanf_r+0x64>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	781a      	ldrb	r2, [r3, #0]
 800ac34:	5cba      	ldrb	r2, [r7, r2]
 800ac36:	0712      	lsls	r2, r2, #28
 800ac38:	d401      	bmi.n	800ac3e <__ssvfiscanf_r+0x52>
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	e7eb      	b.n	800ac16 <__ssvfiscanf_r+0x2a>
 800ac3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac40:	3201      	adds	r2, #1
 800ac42:	9245      	str	r2, [sp, #276]	; 0x114
 800ac44:	6862      	ldr	r2, [r4, #4]
 800ac46:	3301      	adds	r3, #1
 800ac48:	3a01      	subs	r2, #1
 800ac4a:	6062      	str	r2, [r4, #4]
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	e7ec      	b.n	800ac2a <__ssvfiscanf_r+0x3e>
 800ac50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac52:	4621      	mov	r1, r4
 800ac54:	4630      	mov	r0, r6
 800ac56:	4798      	blx	r3
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d0e9      	beq.n	800ac30 <__ssvfiscanf_r+0x44>
 800ac5c:	e7ed      	b.n	800ac3a <__ssvfiscanf_r+0x4e>
 800ac5e:	2b25      	cmp	r3, #37	; 0x25
 800ac60:	d012      	beq.n	800ac88 <__ssvfiscanf_r+0x9c>
 800ac62:	469a      	mov	sl, r3
 800ac64:	6863      	ldr	r3, [r4, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f340 8091 	ble.w	800ad8e <__ssvfiscanf_r+0x1a2>
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	7813      	ldrb	r3, [r2, #0]
 800ac70:	4553      	cmp	r3, sl
 800ac72:	f040 812e 	bne.w	800aed2 <__ssvfiscanf_r+0x2e6>
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	6063      	str	r3, [r4, #4]
 800ac7c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ac7e:	3201      	adds	r2, #1
 800ac80:	3301      	adds	r3, #1
 800ac82:	6022      	str	r2, [r4, #0]
 800ac84:	9345      	str	r3, [sp, #276]	; 0x114
 800ac86:	e7d8      	b.n	800ac3a <__ssvfiscanf_r+0x4e>
 800ac88:	9141      	str	r1, [sp, #260]	; 0x104
 800ac8a:	9143      	str	r1, [sp, #268]	; 0x10c
 800ac8c:	7853      	ldrb	r3, [r2, #1]
 800ac8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac90:	bf02      	ittt	eq
 800ac92:	2310      	moveq	r3, #16
 800ac94:	1c95      	addeq	r5, r2, #2
 800ac96:	9341      	streq	r3, [sp, #260]	; 0x104
 800ac98:	220a      	movs	r2, #10
 800ac9a:	46aa      	mov	sl, r5
 800ac9c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800aca0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aca4:	2b09      	cmp	r3, #9
 800aca6:	d91d      	bls.n	800ace4 <__ssvfiscanf_r+0xf8>
 800aca8:	487e      	ldr	r0, [pc, #504]	; (800aea4 <__ssvfiscanf_r+0x2b8>)
 800acaa:	2203      	movs	r2, #3
 800acac:	f7f5 fab8 	bl	8000220 <memchr>
 800acb0:	b140      	cbz	r0, 800acc4 <__ssvfiscanf_r+0xd8>
 800acb2:	2301      	movs	r3, #1
 800acb4:	eba0 0009 	sub.w	r0, r0, r9
 800acb8:	fa03 f000 	lsl.w	r0, r3, r0
 800acbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acbe:	4318      	orrs	r0, r3
 800acc0:	9041      	str	r0, [sp, #260]	; 0x104
 800acc2:	4655      	mov	r5, sl
 800acc4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800acc8:	2b78      	cmp	r3, #120	; 0x78
 800acca:	d806      	bhi.n	800acda <__ssvfiscanf_r+0xee>
 800accc:	2b57      	cmp	r3, #87	; 0x57
 800acce:	d810      	bhi.n	800acf2 <__ssvfiscanf_r+0x106>
 800acd0:	2b25      	cmp	r3, #37	; 0x25
 800acd2:	d0c6      	beq.n	800ac62 <__ssvfiscanf_r+0x76>
 800acd4:	d856      	bhi.n	800ad84 <__ssvfiscanf_r+0x198>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d064      	beq.n	800ada4 <__ssvfiscanf_r+0x1b8>
 800acda:	2303      	movs	r3, #3
 800acdc:	9347      	str	r3, [sp, #284]	; 0x11c
 800acde:	230a      	movs	r3, #10
 800ace0:	9342      	str	r3, [sp, #264]	; 0x108
 800ace2:	e071      	b.n	800adc8 <__ssvfiscanf_r+0x1dc>
 800ace4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ace6:	fb02 1103 	mla	r1, r2, r3, r1
 800acea:	3930      	subs	r1, #48	; 0x30
 800acec:	9143      	str	r1, [sp, #268]	; 0x10c
 800acee:	4655      	mov	r5, sl
 800acf0:	e7d3      	b.n	800ac9a <__ssvfiscanf_r+0xae>
 800acf2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800acf6:	2a20      	cmp	r2, #32
 800acf8:	d8ef      	bhi.n	800acda <__ssvfiscanf_r+0xee>
 800acfa:	a101      	add	r1, pc, #4	; (adr r1, 800ad00 <__ssvfiscanf_r+0x114>)
 800acfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad00:	0800adb3 	.word	0x0800adb3
 800ad04:	0800acdb 	.word	0x0800acdb
 800ad08:	0800acdb 	.word	0x0800acdb
 800ad0c:	0800ae11 	.word	0x0800ae11
 800ad10:	0800acdb 	.word	0x0800acdb
 800ad14:	0800acdb 	.word	0x0800acdb
 800ad18:	0800acdb 	.word	0x0800acdb
 800ad1c:	0800acdb 	.word	0x0800acdb
 800ad20:	0800acdb 	.word	0x0800acdb
 800ad24:	0800acdb 	.word	0x0800acdb
 800ad28:	0800acdb 	.word	0x0800acdb
 800ad2c:	0800ae27 	.word	0x0800ae27
 800ad30:	0800adfd 	.word	0x0800adfd
 800ad34:	0800ad8b 	.word	0x0800ad8b
 800ad38:	0800ad8b 	.word	0x0800ad8b
 800ad3c:	0800ad8b 	.word	0x0800ad8b
 800ad40:	0800acdb 	.word	0x0800acdb
 800ad44:	0800ae01 	.word	0x0800ae01
 800ad48:	0800acdb 	.word	0x0800acdb
 800ad4c:	0800acdb 	.word	0x0800acdb
 800ad50:	0800acdb 	.word	0x0800acdb
 800ad54:	0800acdb 	.word	0x0800acdb
 800ad58:	0800ae37 	.word	0x0800ae37
 800ad5c:	0800ae09 	.word	0x0800ae09
 800ad60:	0800adab 	.word	0x0800adab
 800ad64:	0800acdb 	.word	0x0800acdb
 800ad68:	0800acdb 	.word	0x0800acdb
 800ad6c:	0800ae33 	.word	0x0800ae33
 800ad70:	0800acdb 	.word	0x0800acdb
 800ad74:	0800adfd 	.word	0x0800adfd
 800ad78:	0800acdb 	.word	0x0800acdb
 800ad7c:	0800acdb 	.word	0x0800acdb
 800ad80:	0800adb3 	.word	0x0800adb3
 800ad84:	3b45      	subs	r3, #69	; 0x45
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d8a7      	bhi.n	800acda <__ssvfiscanf_r+0xee>
 800ad8a:	2305      	movs	r3, #5
 800ad8c:	e01b      	b.n	800adc6 <__ssvfiscanf_r+0x1da>
 800ad8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad90:	4621      	mov	r1, r4
 800ad92:	4630      	mov	r0, r6
 800ad94:	4798      	blx	r3
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f43f af68 	beq.w	800ac6c <__ssvfiscanf_r+0x80>
 800ad9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f040 808d 	bne.w	800aebe <__ssvfiscanf_r+0x2d2>
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295
 800ada8:	e08f      	b.n	800aeca <__ssvfiscanf_r+0x2de>
 800adaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800adac:	f042 0220 	orr.w	r2, r2, #32
 800adb0:	9241      	str	r2, [sp, #260]	; 0x104
 800adb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800adb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adb8:	9241      	str	r2, [sp, #260]	; 0x104
 800adba:	2210      	movs	r2, #16
 800adbc:	2b6f      	cmp	r3, #111	; 0x6f
 800adbe:	9242      	str	r2, [sp, #264]	; 0x108
 800adc0:	bf34      	ite	cc
 800adc2:	2303      	movcc	r3, #3
 800adc4:	2304      	movcs	r3, #4
 800adc6:	9347      	str	r3, [sp, #284]	; 0x11c
 800adc8:	6863      	ldr	r3, [r4, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd42      	ble.n	800ae54 <__ssvfiscanf_r+0x268>
 800adce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800add0:	0659      	lsls	r1, r3, #25
 800add2:	d404      	bmi.n	800adde <__ssvfiscanf_r+0x1f2>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	5cba      	ldrb	r2, [r7, r2]
 800adda:	0712      	lsls	r2, r2, #28
 800addc:	d441      	bmi.n	800ae62 <__ssvfiscanf_r+0x276>
 800adde:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	dc50      	bgt.n	800ae86 <__ssvfiscanf_r+0x29a>
 800ade4:	466b      	mov	r3, sp
 800ade6:	4622      	mov	r2, r4
 800ade8:	a941      	add	r1, sp, #260	; 0x104
 800adea:	4630      	mov	r0, r6
 800adec:	f000 f876 	bl	800aedc <_scanf_chars>
 800adf0:	2801      	cmp	r0, #1
 800adf2:	d06e      	beq.n	800aed2 <__ssvfiscanf_r+0x2e6>
 800adf4:	2802      	cmp	r0, #2
 800adf6:	f47f af20 	bne.w	800ac3a <__ssvfiscanf_r+0x4e>
 800adfa:	e7cf      	b.n	800ad9c <__ssvfiscanf_r+0x1b0>
 800adfc:	220a      	movs	r2, #10
 800adfe:	e7dd      	b.n	800adbc <__ssvfiscanf_r+0x1d0>
 800ae00:	2300      	movs	r3, #0
 800ae02:	9342      	str	r3, [sp, #264]	; 0x108
 800ae04:	2303      	movs	r3, #3
 800ae06:	e7de      	b.n	800adc6 <__ssvfiscanf_r+0x1da>
 800ae08:	2308      	movs	r3, #8
 800ae0a:	9342      	str	r3, [sp, #264]	; 0x108
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	e7da      	b.n	800adc6 <__ssvfiscanf_r+0x1da>
 800ae10:	4629      	mov	r1, r5
 800ae12:	4640      	mov	r0, r8
 800ae14:	f000 f9e0 	bl	800b1d8 <__sccl>
 800ae18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1e:	9341      	str	r3, [sp, #260]	; 0x104
 800ae20:	4605      	mov	r5, r0
 800ae22:	2301      	movs	r3, #1
 800ae24:	e7cf      	b.n	800adc6 <__ssvfiscanf_r+0x1da>
 800ae26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2c:	9341      	str	r3, [sp, #260]	; 0x104
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e7c9      	b.n	800adc6 <__ssvfiscanf_r+0x1da>
 800ae32:	2302      	movs	r3, #2
 800ae34:	e7c7      	b.n	800adc6 <__ssvfiscanf_r+0x1da>
 800ae36:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ae38:	06c3      	lsls	r3, r0, #27
 800ae3a:	f53f aefe 	bmi.w	800ac3a <__ssvfiscanf_r+0x4e>
 800ae3e:	9b00      	ldr	r3, [sp, #0]
 800ae40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae42:	1d19      	adds	r1, r3, #4
 800ae44:	9100      	str	r1, [sp, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f010 0f01 	tst.w	r0, #1
 800ae4c:	bf14      	ite	ne
 800ae4e:	801a      	strhne	r2, [r3, #0]
 800ae50:	601a      	streq	r2, [r3, #0]
 800ae52:	e6f2      	b.n	800ac3a <__ssvfiscanf_r+0x4e>
 800ae54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae56:	4621      	mov	r1, r4
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4798      	blx	r3
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0b6      	beq.n	800adce <__ssvfiscanf_r+0x1e2>
 800ae60:	e79c      	b.n	800ad9c <__ssvfiscanf_r+0x1b0>
 800ae62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae64:	3201      	adds	r2, #1
 800ae66:	9245      	str	r2, [sp, #276]	; 0x114
 800ae68:	6862      	ldr	r2, [r4, #4]
 800ae6a:	3a01      	subs	r2, #1
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	6062      	str	r2, [r4, #4]
 800ae70:	dd02      	ble.n	800ae78 <__ssvfiscanf_r+0x28c>
 800ae72:	3301      	adds	r3, #1
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	e7ad      	b.n	800add4 <__ssvfiscanf_r+0x1e8>
 800ae78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	4798      	blx	r3
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d0a7      	beq.n	800add4 <__ssvfiscanf_r+0x1e8>
 800ae84:	e78a      	b.n	800ad9c <__ssvfiscanf_r+0x1b0>
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	dc0e      	bgt.n	800aea8 <__ssvfiscanf_r+0x2bc>
 800ae8a:	466b      	mov	r3, sp
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	a941      	add	r1, sp, #260	; 0x104
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 f87d 	bl	800af90 <_scanf_i>
 800ae96:	e7ab      	b.n	800adf0 <__ssvfiscanf_r+0x204>
 800ae98:	0800ab39 	.word	0x0800ab39
 800ae9c:	0800abb3 	.word	0x0800abb3
 800aea0:	0800bfa1 	.word	0x0800bfa1
 800aea4:	0800c30a 	.word	0x0800c30a
 800aea8:	4b0b      	ldr	r3, [pc, #44]	; (800aed8 <__ssvfiscanf_r+0x2ec>)
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f43f aec5 	beq.w	800ac3a <__ssvfiscanf_r+0x4e>
 800aeb0:	466b      	mov	r3, sp
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	a941      	add	r1, sp, #260	; 0x104
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7fc fb74 	bl	80075a4 <_scanf_float>
 800aebc:	e798      	b.n	800adf0 <__ssvfiscanf_r+0x204>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aec4:	bf18      	it	ne
 800aec6:	f04f 30ff 	movne.w	r0, #4294967295
 800aeca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aed4:	e7f9      	b.n	800aeca <__ssvfiscanf_r+0x2de>
 800aed6:	bf00      	nop
 800aed8:	080075a5 	.word	0x080075a5

0800aedc <_scanf_chars>:
 800aedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee0:	4615      	mov	r5, r2
 800aee2:	688a      	ldr	r2, [r1, #8]
 800aee4:	4680      	mov	r8, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	b932      	cbnz	r2, 800aef8 <_scanf_chars+0x1c>
 800aeea:	698a      	ldr	r2, [r1, #24]
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	bf0c      	ite	eq
 800aef0:	2201      	moveq	r2, #1
 800aef2:	f04f 32ff 	movne.w	r2, #4294967295
 800aef6:	608a      	str	r2, [r1, #8]
 800aef8:	6822      	ldr	r2, [r4, #0]
 800aefa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800af8c <_scanf_chars+0xb0>
 800aefe:	06d1      	lsls	r1, r2, #27
 800af00:	bf5f      	itttt	pl
 800af02:	681a      	ldrpl	r2, [r3, #0]
 800af04:	1d11      	addpl	r1, r2, #4
 800af06:	6019      	strpl	r1, [r3, #0]
 800af08:	6816      	ldrpl	r6, [r2, #0]
 800af0a:	2700      	movs	r7, #0
 800af0c:	69a0      	ldr	r0, [r4, #24]
 800af0e:	b188      	cbz	r0, 800af34 <_scanf_chars+0x58>
 800af10:	2801      	cmp	r0, #1
 800af12:	d107      	bne.n	800af24 <_scanf_chars+0x48>
 800af14:	682a      	ldr	r2, [r5, #0]
 800af16:	7811      	ldrb	r1, [r2, #0]
 800af18:	6962      	ldr	r2, [r4, #20]
 800af1a:	5c52      	ldrb	r2, [r2, r1]
 800af1c:	b952      	cbnz	r2, 800af34 <_scanf_chars+0x58>
 800af1e:	2f00      	cmp	r7, #0
 800af20:	d031      	beq.n	800af86 <_scanf_chars+0xaa>
 800af22:	e022      	b.n	800af6a <_scanf_chars+0x8e>
 800af24:	2802      	cmp	r0, #2
 800af26:	d120      	bne.n	800af6a <_scanf_chars+0x8e>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800af30:	071b      	lsls	r3, r3, #28
 800af32:	d41a      	bmi.n	800af6a <_scanf_chars+0x8e>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	06da      	lsls	r2, r3, #27
 800af38:	bf5e      	ittt	pl
 800af3a:	682b      	ldrpl	r3, [r5, #0]
 800af3c:	781b      	ldrbpl	r3, [r3, #0]
 800af3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800af42:	682a      	ldr	r2, [r5, #0]
 800af44:	686b      	ldr	r3, [r5, #4]
 800af46:	3201      	adds	r2, #1
 800af48:	602a      	str	r2, [r5, #0]
 800af4a:	68a2      	ldr	r2, [r4, #8]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	3a01      	subs	r2, #1
 800af50:	606b      	str	r3, [r5, #4]
 800af52:	3701      	adds	r7, #1
 800af54:	60a2      	str	r2, [r4, #8]
 800af56:	b142      	cbz	r2, 800af6a <_scanf_chars+0x8e>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dcd7      	bgt.n	800af0c <_scanf_chars+0x30>
 800af5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af60:	4629      	mov	r1, r5
 800af62:	4640      	mov	r0, r8
 800af64:	4798      	blx	r3
 800af66:	2800      	cmp	r0, #0
 800af68:	d0d0      	beq.n	800af0c <_scanf_chars+0x30>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	f013 0310 	ands.w	r3, r3, #16
 800af70:	d105      	bne.n	800af7e <_scanf_chars+0xa2>
 800af72:	68e2      	ldr	r2, [r4, #12]
 800af74:	3201      	adds	r2, #1
 800af76:	60e2      	str	r2, [r4, #12]
 800af78:	69a2      	ldr	r2, [r4, #24]
 800af7a:	b102      	cbz	r2, 800af7e <_scanf_chars+0xa2>
 800af7c:	7033      	strb	r3, [r6, #0]
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	443b      	add	r3, r7
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	2000      	movs	r0, #0
 800af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8a:	bf00      	nop
 800af8c:	0800bfa1 	.word	0x0800bfa1

0800af90 <_scanf_i>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	4698      	mov	r8, r3
 800af96:	4b76      	ldr	r3, [pc, #472]	; (800b170 <_scanf_i+0x1e0>)
 800af98:	460c      	mov	r4, r1
 800af9a:	4682      	mov	sl, r0
 800af9c:	4616      	mov	r6, r2
 800af9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800afa2:	b087      	sub	sp, #28
 800afa4:	ab03      	add	r3, sp, #12
 800afa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800afaa:	4b72      	ldr	r3, [pc, #456]	; (800b174 <_scanf_i+0x1e4>)
 800afac:	69a1      	ldr	r1, [r4, #24]
 800afae:	4a72      	ldr	r2, [pc, #456]	; (800b178 <_scanf_i+0x1e8>)
 800afb0:	2903      	cmp	r1, #3
 800afb2:	bf18      	it	ne
 800afb4:	461a      	movne	r2, r3
 800afb6:	68a3      	ldr	r3, [r4, #8]
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	1e5a      	subs	r2, r3, #1
 800afbc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afc0:	bf88      	it	hi
 800afc2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afc6:	4627      	mov	r7, r4
 800afc8:	bf82      	ittt	hi
 800afca:	eb03 0905 	addhi.w	r9, r3, r5
 800afce:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afd2:	60a3      	strhi	r3, [r4, #8]
 800afd4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800afd8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800afdc:	bf98      	it	ls
 800afde:	f04f 0900 	movls.w	r9, #0
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	463d      	mov	r5, r7
 800afe6:	f04f 0b00 	mov.w	fp, #0
 800afea:	6831      	ldr	r1, [r6, #0]
 800afec:	ab03      	add	r3, sp, #12
 800afee:	7809      	ldrb	r1, [r1, #0]
 800aff0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aff4:	2202      	movs	r2, #2
 800aff6:	f7f5 f913 	bl	8000220 <memchr>
 800affa:	b328      	cbz	r0, 800b048 <_scanf_i+0xb8>
 800affc:	f1bb 0f01 	cmp.w	fp, #1
 800b000:	d159      	bne.n	800b0b6 <_scanf_i+0x126>
 800b002:	6862      	ldr	r2, [r4, #4]
 800b004:	b92a      	cbnz	r2, 800b012 <_scanf_i+0x82>
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	2308      	movs	r3, #8
 800b00a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b00e:	6063      	str	r3, [r4, #4]
 800b010:	6022      	str	r2, [r4, #0]
 800b012:	6822      	ldr	r2, [r4, #0]
 800b014:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	68a2      	ldr	r2, [r4, #8]
 800b01c:	1e51      	subs	r1, r2, #1
 800b01e:	60a1      	str	r1, [r4, #8]
 800b020:	b192      	cbz	r2, 800b048 <_scanf_i+0xb8>
 800b022:	6832      	ldr	r2, [r6, #0]
 800b024:	1c51      	adds	r1, r2, #1
 800b026:	6031      	str	r1, [r6, #0]
 800b028:	7812      	ldrb	r2, [r2, #0]
 800b02a:	f805 2b01 	strb.w	r2, [r5], #1
 800b02e:	6872      	ldr	r2, [r6, #4]
 800b030:	3a01      	subs	r2, #1
 800b032:	2a00      	cmp	r2, #0
 800b034:	6072      	str	r2, [r6, #4]
 800b036:	dc07      	bgt.n	800b048 <_scanf_i+0xb8>
 800b038:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b03c:	4631      	mov	r1, r6
 800b03e:	4650      	mov	r0, sl
 800b040:	4790      	blx	r2
 800b042:	2800      	cmp	r0, #0
 800b044:	f040 8085 	bne.w	800b152 <_scanf_i+0x1c2>
 800b048:	f10b 0b01 	add.w	fp, fp, #1
 800b04c:	f1bb 0f03 	cmp.w	fp, #3
 800b050:	d1cb      	bne.n	800afea <_scanf_i+0x5a>
 800b052:	6863      	ldr	r3, [r4, #4]
 800b054:	b90b      	cbnz	r3, 800b05a <_scanf_i+0xca>
 800b056:	230a      	movs	r3, #10
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	4947      	ldr	r1, [pc, #284]	; (800b17c <_scanf_i+0x1ec>)
 800b05e:	6960      	ldr	r0, [r4, #20]
 800b060:	1ac9      	subs	r1, r1, r3
 800b062:	f000 f8b9 	bl	800b1d8 <__sccl>
 800b066:	f04f 0b00 	mov.w	fp, #0
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d03d      	beq.n	800b0ee <_scanf_i+0x15e>
 800b072:	6831      	ldr	r1, [r6, #0]
 800b074:	6960      	ldr	r0, [r4, #20]
 800b076:	f891 c000 	ldrb.w	ip, [r1]
 800b07a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b07e:	2800      	cmp	r0, #0
 800b080:	d035      	beq.n	800b0ee <_scanf_i+0x15e>
 800b082:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b086:	d124      	bne.n	800b0d2 <_scanf_i+0x142>
 800b088:	0510      	lsls	r0, r2, #20
 800b08a:	d522      	bpl.n	800b0d2 <_scanf_i+0x142>
 800b08c:	f10b 0b01 	add.w	fp, fp, #1
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	d003      	beq.n	800b09e <_scanf_i+0x10e>
 800b096:	3301      	adds	r3, #1
 800b098:	f109 39ff 	add.w	r9, r9, #4294967295
 800b09c:	60a3      	str	r3, [r4, #8]
 800b09e:	6873      	ldr	r3, [r6, #4]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	6073      	str	r3, [r6, #4]
 800b0a6:	dd1b      	ble.n	800b0e0 <_scanf_i+0x150>
 800b0a8:	6833      	ldr	r3, [r6, #0]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	68a3      	ldr	r3, [r4, #8]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	60a3      	str	r3, [r4, #8]
 800b0b4:	e7d9      	b.n	800b06a <_scanf_i+0xda>
 800b0b6:	f1bb 0f02 	cmp.w	fp, #2
 800b0ba:	d1ae      	bne.n	800b01a <_scanf_i+0x8a>
 800b0bc:	6822      	ldr	r2, [r4, #0]
 800b0be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b0c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b0c6:	d1bf      	bne.n	800b048 <_scanf_i+0xb8>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	6063      	str	r3, [r4, #4]
 800b0cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0d0:	e7a2      	b.n	800b018 <_scanf_i+0x88>
 800b0d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b0d6:	6022      	str	r2, [r4, #0]
 800b0d8:	780b      	ldrb	r3, [r1, #0]
 800b0da:	f805 3b01 	strb.w	r3, [r5], #1
 800b0de:	e7de      	b.n	800b09e <_scanf_i+0x10e>
 800b0e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4650      	mov	r0, sl
 800b0e8:	4798      	blx	r3
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d0df      	beq.n	800b0ae <_scanf_i+0x11e>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	05db      	lsls	r3, r3, #23
 800b0f2:	d50d      	bpl.n	800b110 <_scanf_i+0x180>
 800b0f4:	42bd      	cmp	r5, r7
 800b0f6:	d909      	bls.n	800b10c <_scanf_i+0x17c>
 800b0f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b0fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b100:	4632      	mov	r2, r6
 800b102:	4650      	mov	r0, sl
 800b104:	4798      	blx	r3
 800b106:	f105 39ff 	add.w	r9, r5, #4294967295
 800b10a:	464d      	mov	r5, r9
 800b10c:	42bd      	cmp	r5, r7
 800b10e:	d02d      	beq.n	800b16c <_scanf_i+0x1dc>
 800b110:	6822      	ldr	r2, [r4, #0]
 800b112:	f012 0210 	ands.w	r2, r2, #16
 800b116:	d113      	bne.n	800b140 <_scanf_i+0x1b0>
 800b118:	702a      	strb	r2, [r5, #0]
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	9e01      	ldr	r6, [sp, #4]
 800b11e:	4639      	mov	r1, r7
 800b120:	4650      	mov	r0, sl
 800b122:	47b0      	blx	r6
 800b124:	6821      	ldr	r1, [r4, #0]
 800b126:	f8d8 3000 	ldr.w	r3, [r8]
 800b12a:	f011 0f20 	tst.w	r1, #32
 800b12e:	d013      	beq.n	800b158 <_scanf_i+0x1c8>
 800b130:	1d1a      	adds	r2, r3, #4
 800b132:	f8c8 2000 	str.w	r2, [r8]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6018      	str	r0, [r3, #0]
 800b13a:	68e3      	ldr	r3, [r4, #12]
 800b13c:	3301      	adds	r3, #1
 800b13e:	60e3      	str	r3, [r4, #12]
 800b140:	1bed      	subs	r5, r5, r7
 800b142:	44ab      	add	fp, r5
 800b144:	6925      	ldr	r5, [r4, #16]
 800b146:	445d      	add	r5, fp
 800b148:	6125      	str	r5, [r4, #16]
 800b14a:	2000      	movs	r0, #0
 800b14c:	b007      	add	sp, #28
 800b14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b152:	f04f 0b00 	mov.w	fp, #0
 800b156:	e7ca      	b.n	800b0ee <_scanf_i+0x15e>
 800b158:	1d1a      	adds	r2, r3, #4
 800b15a:	f8c8 2000 	str.w	r2, [r8]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f011 0f01 	tst.w	r1, #1
 800b164:	bf14      	ite	ne
 800b166:	8018      	strhne	r0, [r3, #0]
 800b168:	6018      	streq	r0, [r3, #0]
 800b16a:	e7e6      	b.n	800b13a <_scanf_i+0x1aa>
 800b16c:	2001      	movs	r0, #1
 800b16e:	e7ed      	b.n	800b14c <_scanf_i+0x1bc>
 800b170:	0800beec 	.word	0x0800beec
 800b174:	0800b32d 	.word	0x0800b32d
 800b178:	08008875 	.word	0x08008875
 800b17c:	0800c32e 	.word	0x0800c32e

0800b180 <_read_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	; (800b1a0 <_read_r+0x20>)
 800b184:	4604      	mov	r4, r0
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f7f7 f968 	bl	8002464 <_read>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_read_r+0x1e>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_read_r+0x1e>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	20000898 	.word	0x20000898
 800b1a4:	00000000 	.word	0x00000000

0800b1a8 <nan>:
 800b1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b1b0 <nan+0x8>
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	00000000 	.word	0x00000000
 800b1b4:	7ff80000 	.word	0x7ff80000

0800b1b8 <_sbrk_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d06      	ldr	r5, [pc, #24]	; (800b1d4 <_sbrk_r+0x1c>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	f7f7 f9bc 	bl	8002540 <_sbrk>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_sbrk_r+0x1a>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_sbrk_r+0x1a>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	20000898 	.word	0x20000898

0800b1d8 <__sccl>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	780b      	ldrb	r3, [r1, #0]
 800b1dc:	4604      	mov	r4, r0
 800b1de:	2b5e      	cmp	r3, #94	; 0x5e
 800b1e0:	bf0b      	itete	eq
 800b1e2:	784b      	ldrbeq	r3, [r1, #1]
 800b1e4:	1c48      	addne	r0, r1, #1
 800b1e6:	1c88      	addeq	r0, r1, #2
 800b1e8:	2200      	movne	r2, #0
 800b1ea:	bf08      	it	eq
 800b1ec:	2201      	moveq	r2, #1
 800b1ee:	1e61      	subs	r1, r4, #1
 800b1f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b1f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b1f8:	42a9      	cmp	r1, r5
 800b1fa:	d1fb      	bne.n	800b1f4 <__sccl+0x1c>
 800b1fc:	b90b      	cbnz	r3, 800b202 <__sccl+0x2a>
 800b1fe:	3801      	subs	r0, #1
 800b200:	bd70      	pop	{r4, r5, r6, pc}
 800b202:	f082 0201 	eor.w	r2, r2, #1
 800b206:	54e2      	strb	r2, [r4, r3]
 800b208:	4605      	mov	r5, r0
 800b20a:	4628      	mov	r0, r5
 800b20c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b210:	292d      	cmp	r1, #45	; 0x2d
 800b212:	d006      	beq.n	800b222 <__sccl+0x4a>
 800b214:	295d      	cmp	r1, #93	; 0x5d
 800b216:	d0f3      	beq.n	800b200 <__sccl+0x28>
 800b218:	b909      	cbnz	r1, 800b21e <__sccl+0x46>
 800b21a:	4628      	mov	r0, r5
 800b21c:	e7f0      	b.n	800b200 <__sccl+0x28>
 800b21e:	460b      	mov	r3, r1
 800b220:	e7f1      	b.n	800b206 <__sccl+0x2e>
 800b222:	786e      	ldrb	r6, [r5, #1]
 800b224:	2e5d      	cmp	r6, #93	; 0x5d
 800b226:	d0fa      	beq.n	800b21e <__sccl+0x46>
 800b228:	42b3      	cmp	r3, r6
 800b22a:	dcf8      	bgt.n	800b21e <__sccl+0x46>
 800b22c:	3502      	adds	r5, #2
 800b22e:	4619      	mov	r1, r3
 800b230:	3101      	adds	r1, #1
 800b232:	428e      	cmp	r6, r1
 800b234:	5462      	strb	r2, [r4, r1]
 800b236:	dcfb      	bgt.n	800b230 <__sccl+0x58>
 800b238:	1af1      	subs	r1, r6, r3
 800b23a:	3901      	subs	r1, #1
 800b23c:	1c58      	adds	r0, r3, #1
 800b23e:	42b3      	cmp	r3, r6
 800b240:	bfa8      	it	ge
 800b242:	2100      	movge	r1, #0
 800b244:	1843      	adds	r3, r0, r1
 800b246:	e7e0      	b.n	800b20a <__sccl+0x32>

0800b248 <_strtoul_l.constprop.0>:
 800b248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b24c:	4f36      	ldr	r7, [pc, #216]	; (800b328 <_strtoul_l.constprop.0+0xe0>)
 800b24e:	4686      	mov	lr, r0
 800b250:	460d      	mov	r5, r1
 800b252:	4628      	mov	r0, r5
 800b254:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b258:	5de6      	ldrb	r6, [r4, r7]
 800b25a:	f016 0608 	ands.w	r6, r6, #8
 800b25e:	d1f8      	bne.n	800b252 <_strtoul_l.constprop.0+0xa>
 800b260:	2c2d      	cmp	r4, #45	; 0x2d
 800b262:	d12f      	bne.n	800b2c4 <_strtoul_l.constprop.0+0x7c>
 800b264:	782c      	ldrb	r4, [r5, #0]
 800b266:	2601      	movs	r6, #1
 800b268:	1c85      	adds	r5, r0, #2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d057      	beq.n	800b31e <_strtoul_l.constprop.0+0xd6>
 800b26e:	2b10      	cmp	r3, #16
 800b270:	d109      	bne.n	800b286 <_strtoul_l.constprop.0+0x3e>
 800b272:	2c30      	cmp	r4, #48	; 0x30
 800b274:	d107      	bne.n	800b286 <_strtoul_l.constprop.0+0x3e>
 800b276:	7828      	ldrb	r0, [r5, #0]
 800b278:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b27c:	2858      	cmp	r0, #88	; 0x58
 800b27e:	d149      	bne.n	800b314 <_strtoul_l.constprop.0+0xcc>
 800b280:	786c      	ldrb	r4, [r5, #1]
 800b282:	2310      	movs	r3, #16
 800b284:	3502      	adds	r5, #2
 800b286:	f04f 38ff 	mov.w	r8, #4294967295
 800b28a:	2700      	movs	r7, #0
 800b28c:	fbb8 f8f3 	udiv	r8, r8, r3
 800b290:	fb03 f908 	mul.w	r9, r3, r8
 800b294:	ea6f 0909 	mvn.w	r9, r9
 800b298:	4638      	mov	r0, r7
 800b29a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b29e:	f1bc 0f09 	cmp.w	ip, #9
 800b2a2:	d814      	bhi.n	800b2ce <_strtoul_l.constprop.0+0x86>
 800b2a4:	4664      	mov	r4, ip
 800b2a6:	42a3      	cmp	r3, r4
 800b2a8:	dd22      	ble.n	800b2f0 <_strtoul_l.constprop.0+0xa8>
 800b2aa:	2f00      	cmp	r7, #0
 800b2ac:	db1d      	blt.n	800b2ea <_strtoul_l.constprop.0+0xa2>
 800b2ae:	4580      	cmp	r8, r0
 800b2b0:	d31b      	bcc.n	800b2ea <_strtoul_l.constprop.0+0xa2>
 800b2b2:	d101      	bne.n	800b2b8 <_strtoul_l.constprop.0+0x70>
 800b2b4:	45a1      	cmp	r9, r4
 800b2b6:	db18      	blt.n	800b2ea <_strtoul_l.constprop.0+0xa2>
 800b2b8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2bc:	2701      	movs	r7, #1
 800b2be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2c2:	e7ea      	b.n	800b29a <_strtoul_l.constprop.0+0x52>
 800b2c4:	2c2b      	cmp	r4, #43	; 0x2b
 800b2c6:	bf04      	itt	eq
 800b2c8:	782c      	ldrbeq	r4, [r5, #0]
 800b2ca:	1c85      	addeq	r5, r0, #2
 800b2cc:	e7cd      	b.n	800b26a <_strtoul_l.constprop.0+0x22>
 800b2ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b2d2:	f1bc 0f19 	cmp.w	ip, #25
 800b2d6:	d801      	bhi.n	800b2dc <_strtoul_l.constprop.0+0x94>
 800b2d8:	3c37      	subs	r4, #55	; 0x37
 800b2da:	e7e4      	b.n	800b2a6 <_strtoul_l.constprop.0+0x5e>
 800b2dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b2e0:	f1bc 0f19 	cmp.w	ip, #25
 800b2e4:	d804      	bhi.n	800b2f0 <_strtoul_l.constprop.0+0xa8>
 800b2e6:	3c57      	subs	r4, #87	; 0x57
 800b2e8:	e7dd      	b.n	800b2a6 <_strtoul_l.constprop.0+0x5e>
 800b2ea:	f04f 37ff 	mov.w	r7, #4294967295
 800b2ee:	e7e6      	b.n	800b2be <_strtoul_l.constprop.0+0x76>
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	da07      	bge.n	800b304 <_strtoul_l.constprop.0+0xbc>
 800b2f4:	2322      	movs	r3, #34	; 0x22
 800b2f6:	f8ce 3000 	str.w	r3, [lr]
 800b2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fe:	b932      	cbnz	r2, 800b30e <_strtoul_l.constprop.0+0xc6>
 800b300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b304:	b106      	cbz	r6, 800b308 <_strtoul_l.constprop.0+0xc0>
 800b306:	4240      	negs	r0, r0
 800b308:	2a00      	cmp	r2, #0
 800b30a:	d0f9      	beq.n	800b300 <_strtoul_l.constprop.0+0xb8>
 800b30c:	b107      	cbz	r7, 800b310 <_strtoul_l.constprop.0+0xc8>
 800b30e:	1e69      	subs	r1, r5, #1
 800b310:	6011      	str	r1, [r2, #0]
 800b312:	e7f5      	b.n	800b300 <_strtoul_l.constprop.0+0xb8>
 800b314:	2430      	movs	r4, #48	; 0x30
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1b5      	bne.n	800b286 <_strtoul_l.constprop.0+0x3e>
 800b31a:	2308      	movs	r3, #8
 800b31c:	e7b3      	b.n	800b286 <_strtoul_l.constprop.0+0x3e>
 800b31e:	2c30      	cmp	r4, #48	; 0x30
 800b320:	d0a9      	beq.n	800b276 <_strtoul_l.constprop.0+0x2e>
 800b322:	230a      	movs	r3, #10
 800b324:	e7af      	b.n	800b286 <_strtoul_l.constprop.0+0x3e>
 800b326:	bf00      	nop
 800b328:	0800bfa1 	.word	0x0800bfa1

0800b32c <_strtoul_r>:
 800b32c:	f7ff bf8c 	b.w	800b248 <_strtoul_l.constprop.0>

0800b330 <__submore>:
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	460c      	mov	r4, r1
 800b336:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b33c:	4299      	cmp	r1, r3
 800b33e:	d11d      	bne.n	800b37c <__submore+0x4c>
 800b340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b344:	f7ff fa28 	bl	800a798 <_malloc_r>
 800b348:	b918      	cbnz	r0, 800b352 <__submore+0x22>
 800b34a:	f04f 30ff 	mov.w	r0, #4294967295
 800b34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b356:	63a3      	str	r3, [r4, #56]	; 0x38
 800b358:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b35c:	6360      	str	r0, [r4, #52]	; 0x34
 800b35e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b362:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b366:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b36a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b36e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b372:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b376:	6020      	str	r0, [r4, #0]
 800b378:	2000      	movs	r0, #0
 800b37a:	e7e8      	b.n	800b34e <__submore+0x1e>
 800b37c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b37e:	0077      	lsls	r7, r6, #1
 800b380:	463a      	mov	r2, r7
 800b382:	f000 fa2d 	bl	800b7e0 <_realloc_r>
 800b386:	4605      	mov	r5, r0
 800b388:	2800      	cmp	r0, #0
 800b38a:	d0de      	beq.n	800b34a <__submore+0x1a>
 800b38c:	eb00 0806 	add.w	r8, r0, r6
 800b390:	4601      	mov	r1, r0
 800b392:	4632      	mov	r2, r6
 800b394:	4640      	mov	r0, r8
 800b396:	f7fe fcad 	bl	8009cf4 <memcpy>
 800b39a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b39e:	f8c4 8000 	str.w	r8, [r4]
 800b3a2:	e7e9      	b.n	800b378 <__submore+0x48>

0800b3a4 <__ascii_wctomb>:
 800b3a4:	b149      	cbz	r1, 800b3ba <__ascii_wctomb+0x16>
 800b3a6:	2aff      	cmp	r2, #255	; 0xff
 800b3a8:	bf85      	ittet	hi
 800b3aa:	238a      	movhi	r3, #138	; 0x8a
 800b3ac:	6003      	strhi	r3, [r0, #0]
 800b3ae:	700a      	strbls	r2, [r1, #0]
 800b3b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3b4:	bf98      	it	ls
 800b3b6:	2001      	movls	r0, #1
 800b3b8:	4770      	bx	lr
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <__assert_func>:
 800b3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <__assert_func+0x2c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	68d8      	ldr	r0, [r3, #12]
 800b3ce:	b14c      	cbz	r4, 800b3e4 <__assert_func+0x24>
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <__assert_func+0x30>)
 800b3d2:	9100      	str	r1, [sp, #0]
 800b3d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3d8:	4906      	ldr	r1, [pc, #24]	; (800b3f4 <__assert_func+0x34>)
 800b3da:	462b      	mov	r3, r5
 800b3dc:	f000 f9a6 	bl	800b72c <fiprintf>
 800b3e0:	f000 fc46 	bl	800bc70 <abort>
 800b3e4:	4b04      	ldr	r3, [pc, #16]	; (800b3f8 <__assert_func+0x38>)
 800b3e6:	461c      	mov	r4, r3
 800b3e8:	e7f3      	b.n	800b3d2 <__assert_func+0x12>
 800b3ea:	bf00      	nop
 800b3ec:	2000000c 	.word	0x2000000c
 800b3f0:	0800c330 	.word	0x0800c330
 800b3f4:	0800c33d 	.word	0x0800c33d
 800b3f8:	0800c36b 	.word	0x0800c36b

0800b3fc <__sflush_r>:
 800b3fc:	898a      	ldrh	r2, [r1, #12]
 800b3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b402:	4605      	mov	r5, r0
 800b404:	0710      	lsls	r0, r2, #28
 800b406:	460c      	mov	r4, r1
 800b408:	d458      	bmi.n	800b4bc <__sflush_r+0xc0>
 800b40a:	684b      	ldr	r3, [r1, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dc05      	bgt.n	800b41c <__sflush_r+0x20>
 800b410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b412:	2b00      	cmp	r3, #0
 800b414:	dc02      	bgt.n	800b41c <__sflush_r+0x20>
 800b416:	2000      	movs	r0, #0
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b41e:	2e00      	cmp	r6, #0
 800b420:	d0f9      	beq.n	800b416 <__sflush_r+0x1a>
 800b422:	2300      	movs	r3, #0
 800b424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b428:	682f      	ldr	r7, [r5, #0]
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	d032      	beq.n	800b494 <__sflush_r+0x98>
 800b42e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	075a      	lsls	r2, r3, #29
 800b434:	d505      	bpl.n	800b442 <__sflush_r+0x46>
 800b436:	6863      	ldr	r3, [r4, #4]
 800b438:	1ac0      	subs	r0, r0, r3
 800b43a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b43c:	b10b      	cbz	r3, 800b442 <__sflush_r+0x46>
 800b43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b440:	1ac0      	subs	r0, r0, r3
 800b442:	2300      	movs	r3, #0
 800b444:	4602      	mov	r2, r0
 800b446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b448:	6a21      	ldr	r1, [r4, #32]
 800b44a:	4628      	mov	r0, r5
 800b44c:	47b0      	blx	r6
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	d106      	bne.n	800b462 <__sflush_r+0x66>
 800b454:	6829      	ldr	r1, [r5, #0]
 800b456:	291d      	cmp	r1, #29
 800b458:	d82c      	bhi.n	800b4b4 <__sflush_r+0xb8>
 800b45a:	4a2a      	ldr	r2, [pc, #168]	; (800b504 <__sflush_r+0x108>)
 800b45c:	40ca      	lsrs	r2, r1
 800b45e:	07d6      	lsls	r6, r2, #31
 800b460:	d528      	bpl.n	800b4b4 <__sflush_r+0xb8>
 800b462:	2200      	movs	r2, #0
 800b464:	6062      	str	r2, [r4, #4]
 800b466:	04d9      	lsls	r1, r3, #19
 800b468:	6922      	ldr	r2, [r4, #16]
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	d504      	bpl.n	800b478 <__sflush_r+0x7c>
 800b46e:	1c42      	adds	r2, r0, #1
 800b470:	d101      	bne.n	800b476 <__sflush_r+0x7a>
 800b472:	682b      	ldr	r3, [r5, #0]
 800b474:	b903      	cbnz	r3, 800b478 <__sflush_r+0x7c>
 800b476:	6560      	str	r0, [r4, #84]	; 0x54
 800b478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47a:	602f      	str	r7, [r5, #0]
 800b47c:	2900      	cmp	r1, #0
 800b47e:	d0ca      	beq.n	800b416 <__sflush_r+0x1a>
 800b480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__sflush_r+0x92>
 800b488:	4628      	mov	r0, r5
 800b48a:	f7ff f919 	bl	800a6c0 <_free_r>
 800b48e:	2000      	movs	r0, #0
 800b490:	6360      	str	r0, [r4, #52]	; 0x34
 800b492:	e7c1      	b.n	800b418 <__sflush_r+0x1c>
 800b494:	6a21      	ldr	r1, [r4, #32]
 800b496:	2301      	movs	r3, #1
 800b498:	4628      	mov	r0, r5
 800b49a:	47b0      	blx	r6
 800b49c:	1c41      	adds	r1, r0, #1
 800b49e:	d1c7      	bne.n	800b430 <__sflush_r+0x34>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0c4      	beq.n	800b430 <__sflush_r+0x34>
 800b4a6:	2b1d      	cmp	r3, #29
 800b4a8:	d001      	beq.n	800b4ae <__sflush_r+0xb2>
 800b4aa:	2b16      	cmp	r3, #22
 800b4ac:	d101      	bne.n	800b4b2 <__sflush_r+0xb6>
 800b4ae:	602f      	str	r7, [r5, #0]
 800b4b0:	e7b1      	b.n	800b416 <__sflush_r+0x1a>
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	e7ad      	b.n	800b418 <__sflush_r+0x1c>
 800b4bc:	690f      	ldr	r7, [r1, #16]
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	d0a9      	beq.n	800b416 <__sflush_r+0x1a>
 800b4c2:	0793      	lsls	r3, r2, #30
 800b4c4:	680e      	ldr	r6, [r1, #0]
 800b4c6:	bf08      	it	eq
 800b4c8:	694b      	ldreq	r3, [r1, #20]
 800b4ca:	600f      	str	r7, [r1, #0]
 800b4cc:	bf18      	it	ne
 800b4ce:	2300      	movne	r3, #0
 800b4d0:	eba6 0807 	sub.w	r8, r6, r7
 800b4d4:	608b      	str	r3, [r1, #8]
 800b4d6:	f1b8 0f00 	cmp.w	r8, #0
 800b4da:	dd9c      	ble.n	800b416 <__sflush_r+0x1a>
 800b4dc:	6a21      	ldr	r1, [r4, #32]
 800b4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4e0:	4643      	mov	r3, r8
 800b4e2:	463a      	mov	r2, r7
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b0      	blx	r6
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	dc06      	bgt.n	800b4fa <__sflush_r+0xfe>
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f8:	e78e      	b.n	800b418 <__sflush_r+0x1c>
 800b4fa:	4407      	add	r7, r0
 800b4fc:	eba8 0800 	sub.w	r8, r8, r0
 800b500:	e7e9      	b.n	800b4d6 <__sflush_r+0xda>
 800b502:	bf00      	nop
 800b504:	20400001 	.word	0x20400001

0800b508 <_fflush_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	690b      	ldr	r3, [r1, #16]
 800b50c:	4605      	mov	r5, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	b913      	cbnz	r3, 800b518 <_fflush_r+0x10>
 800b512:	2500      	movs	r5, #0
 800b514:	4628      	mov	r0, r5
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	b118      	cbz	r0, 800b522 <_fflush_r+0x1a>
 800b51a:	6983      	ldr	r3, [r0, #24]
 800b51c:	b90b      	cbnz	r3, 800b522 <_fflush_r+0x1a>
 800b51e:	f000 f887 	bl	800b630 <__sinit>
 800b522:	4b14      	ldr	r3, [pc, #80]	; (800b574 <_fflush_r+0x6c>)
 800b524:	429c      	cmp	r4, r3
 800b526:	d11b      	bne.n	800b560 <_fflush_r+0x58>
 800b528:	686c      	ldr	r4, [r5, #4]
 800b52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0ef      	beq.n	800b512 <_fflush_r+0xa>
 800b532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b534:	07d0      	lsls	r0, r2, #31
 800b536:	d404      	bmi.n	800b542 <_fflush_r+0x3a>
 800b538:	0599      	lsls	r1, r3, #22
 800b53a:	d402      	bmi.n	800b542 <_fflush_r+0x3a>
 800b53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b53e:	f000 f927 	bl	800b790 <__retarget_lock_acquire_recursive>
 800b542:	4628      	mov	r0, r5
 800b544:	4621      	mov	r1, r4
 800b546:	f7ff ff59 	bl	800b3fc <__sflush_r>
 800b54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b54c:	07da      	lsls	r2, r3, #31
 800b54e:	4605      	mov	r5, r0
 800b550:	d4e0      	bmi.n	800b514 <_fflush_r+0xc>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	059b      	lsls	r3, r3, #22
 800b556:	d4dd      	bmi.n	800b514 <_fflush_r+0xc>
 800b558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55a:	f000 f91a 	bl	800b792 <__retarget_lock_release_recursive>
 800b55e:	e7d9      	b.n	800b514 <_fflush_r+0xc>
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <_fflush_r+0x70>)
 800b562:	429c      	cmp	r4, r3
 800b564:	d101      	bne.n	800b56a <_fflush_r+0x62>
 800b566:	68ac      	ldr	r4, [r5, #8]
 800b568:	e7df      	b.n	800b52a <_fflush_r+0x22>
 800b56a:	4b04      	ldr	r3, [pc, #16]	; (800b57c <_fflush_r+0x74>)
 800b56c:	429c      	cmp	r4, r3
 800b56e:	bf08      	it	eq
 800b570:	68ec      	ldreq	r4, [r5, #12]
 800b572:	e7da      	b.n	800b52a <_fflush_r+0x22>
 800b574:	0800c38c 	.word	0x0800c38c
 800b578:	0800c3ac 	.word	0x0800c3ac
 800b57c:	0800c36c 	.word	0x0800c36c

0800b580 <std>:
 800b580:	2300      	movs	r3, #0
 800b582:	b510      	push	{r4, lr}
 800b584:	4604      	mov	r4, r0
 800b586:	e9c0 3300 	strd	r3, r3, [r0]
 800b58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b58e:	6083      	str	r3, [r0, #8]
 800b590:	8181      	strh	r1, [r0, #12]
 800b592:	6643      	str	r3, [r0, #100]	; 0x64
 800b594:	81c2      	strh	r2, [r0, #14]
 800b596:	6183      	str	r3, [r0, #24]
 800b598:	4619      	mov	r1, r3
 800b59a:	2208      	movs	r2, #8
 800b59c:	305c      	adds	r0, #92	; 0x5c
 800b59e:	f7fb fb8f 	bl	8006cc0 <memset>
 800b5a2:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <std+0x38>)
 800b5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <std+0x3c>)
 800b5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5aa:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <std+0x40>)
 800b5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <std+0x44>)
 800b5b0:	6224      	str	r4, [r4, #32]
 800b5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	bf00      	nop
 800b5b8:	08007a69 	.word	0x08007a69
 800b5bc:	08007a8f 	.word	0x08007a8f
 800b5c0:	08007ac7 	.word	0x08007ac7
 800b5c4:	08007aeb 	.word	0x08007aeb

0800b5c8 <_cleanup_r>:
 800b5c8:	4901      	ldr	r1, [pc, #4]	; (800b5d0 <_cleanup_r+0x8>)
 800b5ca:	f000 b8c1 	b.w	800b750 <_fwalk_reent>
 800b5ce:	bf00      	nop
 800b5d0:	0800b509 	.word	0x0800b509

0800b5d4 <__sfmoreglue>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	2268      	movs	r2, #104	; 0x68
 800b5d8:	1e4d      	subs	r5, r1, #1
 800b5da:	4355      	muls	r5, r2
 800b5dc:	460e      	mov	r6, r1
 800b5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5e2:	f7ff f8d9 	bl	800a798 <_malloc_r>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b140      	cbz	r0, 800b5fc <__sfmoreglue+0x28>
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b5f0:	300c      	adds	r0, #12
 800b5f2:	60a0      	str	r0, [r4, #8]
 800b5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5f8:	f7fb fb62 	bl	8006cc0 <memset>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}

0800b600 <__sfp_lock_acquire>:
 800b600:	4801      	ldr	r0, [pc, #4]	; (800b608 <__sfp_lock_acquire+0x8>)
 800b602:	f000 b8c5 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b606:	bf00      	nop
 800b608:	2000089d 	.word	0x2000089d

0800b60c <__sfp_lock_release>:
 800b60c:	4801      	ldr	r0, [pc, #4]	; (800b614 <__sfp_lock_release+0x8>)
 800b60e:	f000 b8c0 	b.w	800b792 <__retarget_lock_release_recursive>
 800b612:	bf00      	nop
 800b614:	2000089d 	.word	0x2000089d

0800b618 <__sinit_lock_acquire>:
 800b618:	4801      	ldr	r0, [pc, #4]	; (800b620 <__sinit_lock_acquire+0x8>)
 800b61a:	f000 b8b9 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b61e:	bf00      	nop
 800b620:	2000089e 	.word	0x2000089e

0800b624 <__sinit_lock_release>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__sinit_lock_release+0x8>)
 800b626:	f000 b8b4 	b.w	800b792 <__retarget_lock_release_recursive>
 800b62a:	bf00      	nop
 800b62c:	2000089e 	.word	0x2000089e

0800b630 <__sinit>:
 800b630:	b510      	push	{r4, lr}
 800b632:	4604      	mov	r4, r0
 800b634:	f7ff fff0 	bl	800b618 <__sinit_lock_acquire>
 800b638:	69a3      	ldr	r3, [r4, #24]
 800b63a:	b11b      	cbz	r3, 800b644 <__sinit+0x14>
 800b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b640:	f7ff bff0 	b.w	800b624 <__sinit_lock_release>
 800b644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b648:	6523      	str	r3, [r4, #80]	; 0x50
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <__sinit+0x68>)
 800b64c:	4a13      	ldr	r2, [pc, #76]	; (800b69c <__sinit+0x6c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	62a2      	str	r2, [r4, #40]	; 0x28
 800b652:	42a3      	cmp	r3, r4
 800b654:	bf04      	itt	eq
 800b656:	2301      	moveq	r3, #1
 800b658:	61a3      	streq	r3, [r4, #24]
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 f820 	bl	800b6a0 <__sfp>
 800b660:	6060      	str	r0, [r4, #4]
 800b662:	4620      	mov	r0, r4
 800b664:	f000 f81c 	bl	800b6a0 <__sfp>
 800b668:	60a0      	str	r0, [r4, #8]
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 f818 	bl	800b6a0 <__sfp>
 800b670:	2200      	movs	r2, #0
 800b672:	60e0      	str	r0, [r4, #12]
 800b674:	2104      	movs	r1, #4
 800b676:	6860      	ldr	r0, [r4, #4]
 800b678:	f7ff ff82 	bl	800b580 <std>
 800b67c:	68a0      	ldr	r0, [r4, #8]
 800b67e:	2201      	movs	r2, #1
 800b680:	2109      	movs	r1, #9
 800b682:	f7ff ff7d 	bl	800b580 <std>
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	2202      	movs	r2, #2
 800b68a:	2112      	movs	r1, #18
 800b68c:	f7ff ff78 	bl	800b580 <std>
 800b690:	2301      	movs	r3, #1
 800b692:	61a3      	str	r3, [r4, #24]
 800b694:	e7d2      	b.n	800b63c <__sinit+0xc>
 800b696:	bf00      	nop
 800b698:	0800bf10 	.word	0x0800bf10
 800b69c:	0800b5c9 	.word	0x0800b5c9

0800b6a0 <__sfp>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	f7ff ffac 	bl	800b600 <__sfp_lock_acquire>
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <__sfp+0x84>)
 800b6aa:	681e      	ldr	r6, [r3, #0]
 800b6ac:	69b3      	ldr	r3, [r6, #24]
 800b6ae:	b913      	cbnz	r3, 800b6b6 <__sfp+0x16>
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7ff ffbd 	bl	800b630 <__sinit>
 800b6b6:	3648      	adds	r6, #72	; 0x48
 800b6b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	d503      	bpl.n	800b6c8 <__sfp+0x28>
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	b30b      	cbz	r3, 800b708 <__sfp+0x68>
 800b6c4:	6836      	ldr	r6, [r6, #0]
 800b6c6:	e7f7      	b.n	800b6b8 <__sfp+0x18>
 800b6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6cc:	b9d5      	cbnz	r5, 800b704 <__sfp+0x64>
 800b6ce:	4b16      	ldr	r3, [pc, #88]	; (800b728 <__sfp+0x88>)
 800b6d0:	60e3      	str	r3, [r4, #12]
 800b6d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b6d8:	f000 f859 	bl	800b78e <__retarget_lock_init_recursive>
 800b6dc:	f7ff ff96 	bl	800b60c <__sfp_lock_release>
 800b6e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6e8:	6025      	str	r5, [r4, #0]
 800b6ea:	61a5      	str	r5, [r4, #24]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6f4:	f7fb fae4 	bl	8006cc0 <memset>
 800b6f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b700:	4620      	mov	r0, r4
 800b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b704:	3468      	adds	r4, #104	; 0x68
 800b706:	e7d9      	b.n	800b6bc <__sfp+0x1c>
 800b708:	2104      	movs	r1, #4
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7ff ff62 	bl	800b5d4 <__sfmoreglue>
 800b710:	4604      	mov	r4, r0
 800b712:	6030      	str	r0, [r6, #0]
 800b714:	2800      	cmp	r0, #0
 800b716:	d1d5      	bne.n	800b6c4 <__sfp+0x24>
 800b718:	f7ff ff78 	bl	800b60c <__sfp_lock_release>
 800b71c:	230c      	movs	r3, #12
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	e7ee      	b.n	800b700 <__sfp+0x60>
 800b722:	bf00      	nop
 800b724:	0800bf10 	.word	0x0800bf10
 800b728:	ffff0001 	.word	0xffff0001

0800b72c <fiprintf>:
 800b72c:	b40e      	push	{r1, r2, r3}
 800b72e:	b503      	push	{r0, r1, lr}
 800b730:	4601      	mov	r1, r0
 800b732:	ab03      	add	r3, sp, #12
 800b734:	4805      	ldr	r0, [pc, #20]	; (800b74c <fiprintf+0x20>)
 800b736:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73a:	6800      	ldr	r0, [r0, #0]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	f000 f8a7 	bl	800b890 <_vfiprintf_r>
 800b742:	b002      	add	sp, #8
 800b744:	f85d eb04 	ldr.w	lr, [sp], #4
 800b748:	b003      	add	sp, #12
 800b74a:	4770      	bx	lr
 800b74c:	2000000c 	.word	0x2000000c

0800b750 <_fwalk_reent>:
 800b750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b754:	4606      	mov	r6, r0
 800b756:	4688      	mov	r8, r1
 800b758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b75c:	2700      	movs	r7, #0
 800b75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b762:	f1b9 0901 	subs.w	r9, r9, #1
 800b766:	d505      	bpl.n	800b774 <_fwalk_reent+0x24>
 800b768:	6824      	ldr	r4, [r4, #0]
 800b76a:	2c00      	cmp	r4, #0
 800b76c:	d1f7      	bne.n	800b75e <_fwalk_reent+0xe>
 800b76e:	4638      	mov	r0, r7
 800b770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b774:	89ab      	ldrh	r3, [r5, #12]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d907      	bls.n	800b78a <_fwalk_reent+0x3a>
 800b77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b77e:	3301      	adds	r3, #1
 800b780:	d003      	beq.n	800b78a <_fwalk_reent+0x3a>
 800b782:	4629      	mov	r1, r5
 800b784:	4630      	mov	r0, r6
 800b786:	47c0      	blx	r8
 800b788:	4307      	orrs	r7, r0
 800b78a:	3568      	adds	r5, #104	; 0x68
 800b78c:	e7e9      	b.n	800b762 <_fwalk_reent+0x12>

0800b78e <__retarget_lock_init_recursive>:
 800b78e:	4770      	bx	lr

0800b790 <__retarget_lock_acquire_recursive>:
 800b790:	4770      	bx	lr

0800b792 <__retarget_lock_release_recursive>:
 800b792:	4770      	bx	lr

0800b794 <memmove>:
 800b794:	4288      	cmp	r0, r1
 800b796:	b510      	push	{r4, lr}
 800b798:	eb01 0402 	add.w	r4, r1, r2
 800b79c:	d902      	bls.n	800b7a4 <memmove+0x10>
 800b79e:	4284      	cmp	r4, r0
 800b7a0:	4623      	mov	r3, r4
 800b7a2:	d807      	bhi.n	800b7b4 <memmove+0x20>
 800b7a4:	1e43      	subs	r3, r0, #1
 800b7a6:	42a1      	cmp	r1, r4
 800b7a8:	d008      	beq.n	800b7bc <memmove+0x28>
 800b7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7b2:	e7f8      	b.n	800b7a6 <memmove+0x12>
 800b7b4:	4402      	add	r2, r0
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	428a      	cmp	r2, r1
 800b7ba:	d100      	bne.n	800b7be <memmove+0x2a>
 800b7bc:	bd10      	pop	{r4, pc}
 800b7be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7c6:	e7f7      	b.n	800b7b8 <memmove+0x24>

0800b7c8 <__malloc_lock>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	; (800b7d0 <__malloc_lock+0x8>)
 800b7ca:	f7ff bfe1 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	2000089c 	.word	0x2000089c

0800b7d4 <__malloc_unlock>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <__malloc_unlock+0x8>)
 800b7d6:	f7ff bfdc 	b.w	800b792 <__retarget_lock_release_recursive>
 800b7da:	bf00      	nop
 800b7dc:	2000089c 	.word	0x2000089c

0800b7e0 <_realloc_r>:
 800b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e4:	4680      	mov	r8, r0
 800b7e6:	4614      	mov	r4, r2
 800b7e8:	460e      	mov	r6, r1
 800b7ea:	b921      	cbnz	r1, 800b7f6 <_realloc_r+0x16>
 800b7ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	f7fe bfd1 	b.w	800a798 <_malloc_r>
 800b7f6:	b92a      	cbnz	r2, 800b804 <_realloc_r+0x24>
 800b7f8:	f7fe ff62 	bl	800a6c0 <_free_r>
 800b7fc:	4625      	mov	r5, r4
 800b7fe:	4628      	mov	r0, r5
 800b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b804:	f000 faa0 	bl	800bd48 <_malloc_usable_size_r>
 800b808:	4284      	cmp	r4, r0
 800b80a:	4607      	mov	r7, r0
 800b80c:	d802      	bhi.n	800b814 <_realloc_r+0x34>
 800b80e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b812:	d812      	bhi.n	800b83a <_realloc_r+0x5a>
 800b814:	4621      	mov	r1, r4
 800b816:	4640      	mov	r0, r8
 800b818:	f7fe ffbe 	bl	800a798 <_malloc_r>
 800b81c:	4605      	mov	r5, r0
 800b81e:	2800      	cmp	r0, #0
 800b820:	d0ed      	beq.n	800b7fe <_realloc_r+0x1e>
 800b822:	42bc      	cmp	r4, r7
 800b824:	4622      	mov	r2, r4
 800b826:	4631      	mov	r1, r6
 800b828:	bf28      	it	cs
 800b82a:	463a      	movcs	r2, r7
 800b82c:	f7fe fa62 	bl	8009cf4 <memcpy>
 800b830:	4631      	mov	r1, r6
 800b832:	4640      	mov	r0, r8
 800b834:	f7fe ff44 	bl	800a6c0 <_free_r>
 800b838:	e7e1      	b.n	800b7fe <_realloc_r+0x1e>
 800b83a:	4635      	mov	r5, r6
 800b83c:	e7df      	b.n	800b7fe <_realloc_r+0x1e>

0800b83e <__sfputc_r>:
 800b83e:	6893      	ldr	r3, [r2, #8]
 800b840:	3b01      	subs	r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	b410      	push	{r4}
 800b846:	6093      	str	r3, [r2, #8]
 800b848:	da08      	bge.n	800b85c <__sfputc_r+0x1e>
 800b84a:	6994      	ldr	r4, [r2, #24]
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	db01      	blt.n	800b854 <__sfputc_r+0x16>
 800b850:	290a      	cmp	r1, #10
 800b852:	d103      	bne.n	800b85c <__sfputc_r+0x1e>
 800b854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b858:	f000 b94a 	b.w	800baf0 <__swbuf_r>
 800b85c:	6813      	ldr	r3, [r2, #0]
 800b85e:	1c58      	adds	r0, r3, #1
 800b860:	6010      	str	r0, [r2, #0]
 800b862:	7019      	strb	r1, [r3, #0]
 800b864:	4608      	mov	r0, r1
 800b866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <__sfputs_r>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	4606      	mov	r6, r0
 800b870:	460f      	mov	r7, r1
 800b872:	4614      	mov	r4, r2
 800b874:	18d5      	adds	r5, r2, r3
 800b876:	42ac      	cmp	r4, r5
 800b878:	d101      	bne.n	800b87e <__sfputs_r+0x12>
 800b87a:	2000      	movs	r0, #0
 800b87c:	e007      	b.n	800b88e <__sfputs_r+0x22>
 800b87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b882:	463a      	mov	r2, r7
 800b884:	4630      	mov	r0, r6
 800b886:	f7ff ffda 	bl	800b83e <__sfputc_r>
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	d1f3      	bne.n	800b876 <__sfputs_r+0xa>
 800b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b890 <_vfiprintf_r>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	460d      	mov	r5, r1
 800b896:	b09d      	sub	sp, #116	; 0x74
 800b898:	4614      	mov	r4, r2
 800b89a:	4698      	mov	r8, r3
 800b89c:	4606      	mov	r6, r0
 800b89e:	b118      	cbz	r0, 800b8a8 <_vfiprintf_r+0x18>
 800b8a0:	6983      	ldr	r3, [r0, #24]
 800b8a2:	b90b      	cbnz	r3, 800b8a8 <_vfiprintf_r+0x18>
 800b8a4:	f7ff fec4 	bl	800b630 <__sinit>
 800b8a8:	4b89      	ldr	r3, [pc, #548]	; (800bad0 <_vfiprintf_r+0x240>)
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	d11b      	bne.n	800b8e6 <_vfiprintf_r+0x56>
 800b8ae:	6875      	ldr	r5, [r6, #4]
 800b8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b2:	07d9      	lsls	r1, r3, #31
 800b8b4:	d405      	bmi.n	800b8c2 <_vfiprintf_r+0x32>
 800b8b6:	89ab      	ldrh	r3, [r5, #12]
 800b8b8:	059a      	lsls	r2, r3, #22
 800b8ba:	d402      	bmi.n	800b8c2 <_vfiprintf_r+0x32>
 800b8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8be:	f7ff ff67 	bl	800b790 <__retarget_lock_acquire_recursive>
 800b8c2:	89ab      	ldrh	r3, [r5, #12]
 800b8c4:	071b      	lsls	r3, r3, #28
 800b8c6:	d501      	bpl.n	800b8cc <_vfiprintf_r+0x3c>
 800b8c8:	692b      	ldr	r3, [r5, #16]
 800b8ca:	b9eb      	cbnz	r3, 800b908 <_vfiprintf_r+0x78>
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f000 f960 	bl	800bb94 <__swsetup_r>
 800b8d4:	b1c0      	cbz	r0, 800b908 <_vfiprintf_r+0x78>
 800b8d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8d8:	07dc      	lsls	r4, r3, #31
 800b8da:	d50e      	bpl.n	800b8fa <_vfiprintf_r+0x6a>
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	b01d      	add	sp, #116	; 0x74
 800b8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e6:	4b7b      	ldr	r3, [pc, #492]	; (800bad4 <_vfiprintf_r+0x244>)
 800b8e8:	429d      	cmp	r5, r3
 800b8ea:	d101      	bne.n	800b8f0 <_vfiprintf_r+0x60>
 800b8ec:	68b5      	ldr	r5, [r6, #8]
 800b8ee:	e7df      	b.n	800b8b0 <_vfiprintf_r+0x20>
 800b8f0:	4b79      	ldr	r3, [pc, #484]	; (800bad8 <_vfiprintf_r+0x248>)
 800b8f2:	429d      	cmp	r5, r3
 800b8f4:	bf08      	it	eq
 800b8f6:	68f5      	ldreq	r5, [r6, #12]
 800b8f8:	e7da      	b.n	800b8b0 <_vfiprintf_r+0x20>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	0598      	lsls	r0, r3, #22
 800b8fe:	d4ed      	bmi.n	800b8dc <_vfiprintf_r+0x4c>
 800b900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b902:	f7ff ff46 	bl	800b792 <__retarget_lock_release_recursive>
 800b906:	e7e9      	b.n	800b8dc <_vfiprintf_r+0x4c>
 800b908:	2300      	movs	r3, #0
 800b90a:	9309      	str	r3, [sp, #36]	; 0x24
 800b90c:	2320      	movs	r3, #32
 800b90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b912:	f8cd 800c 	str.w	r8, [sp, #12]
 800b916:	2330      	movs	r3, #48	; 0x30
 800b918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800badc <_vfiprintf_r+0x24c>
 800b91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b920:	f04f 0901 	mov.w	r9, #1
 800b924:	4623      	mov	r3, r4
 800b926:	469a      	mov	sl, r3
 800b928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b92c:	b10a      	cbz	r2, 800b932 <_vfiprintf_r+0xa2>
 800b92e:	2a25      	cmp	r2, #37	; 0x25
 800b930:	d1f9      	bne.n	800b926 <_vfiprintf_r+0x96>
 800b932:	ebba 0b04 	subs.w	fp, sl, r4
 800b936:	d00b      	beq.n	800b950 <_vfiprintf_r+0xc0>
 800b938:	465b      	mov	r3, fp
 800b93a:	4622      	mov	r2, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	4630      	mov	r0, r6
 800b940:	f7ff ff94 	bl	800b86c <__sfputs_r>
 800b944:	3001      	adds	r0, #1
 800b946:	f000 80aa 	beq.w	800ba9e <_vfiprintf_r+0x20e>
 800b94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b94c:	445a      	add	r2, fp
 800b94e:	9209      	str	r2, [sp, #36]	; 0x24
 800b950:	f89a 3000 	ldrb.w	r3, [sl]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 80a2 	beq.w	800ba9e <_vfiprintf_r+0x20e>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f04f 32ff 	mov.w	r2, #4294967295
 800b960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b964:	f10a 0a01 	add.w	sl, sl, #1
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	9307      	str	r3, [sp, #28]
 800b96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b970:	931a      	str	r3, [sp, #104]	; 0x68
 800b972:	4654      	mov	r4, sl
 800b974:	2205      	movs	r2, #5
 800b976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97a:	4858      	ldr	r0, [pc, #352]	; (800badc <_vfiprintf_r+0x24c>)
 800b97c:	f7f4 fc50 	bl	8000220 <memchr>
 800b980:	9a04      	ldr	r2, [sp, #16]
 800b982:	b9d8      	cbnz	r0, 800b9bc <_vfiprintf_r+0x12c>
 800b984:	06d1      	lsls	r1, r2, #27
 800b986:	bf44      	itt	mi
 800b988:	2320      	movmi	r3, #32
 800b98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b98e:	0713      	lsls	r3, r2, #28
 800b990:	bf44      	itt	mi
 800b992:	232b      	movmi	r3, #43	; 0x2b
 800b994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b998:	f89a 3000 	ldrb.w	r3, [sl]
 800b99c:	2b2a      	cmp	r3, #42	; 0x2a
 800b99e:	d015      	beq.n	800b9cc <_vfiprintf_r+0x13c>
 800b9a0:	9a07      	ldr	r2, [sp, #28]
 800b9a2:	4654      	mov	r4, sl
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	f04f 0c0a 	mov.w	ip, #10
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9b0:	3b30      	subs	r3, #48	; 0x30
 800b9b2:	2b09      	cmp	r3, #9
 800b9b4:	d94e      	bls.n	800ba54 <_vfiprintf_r+0x1c4>
 800b9b6:	b1b0      	cbz	r0, 800b9e6 <_vfiprintf_r+0x156>
 800b9b8:	9207      	str	r2, [sp, #28]
 800b9ba:	e014      	b.n	800b9e6 <_vfiprintf_r+0x156>
 800b9bc:	eba0 0308 	sub.w	r3, r0, r8
 800b9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	9304      	str	r3, [sp, #16]
 800b9c8:	46a2      	mov	sl, r4
 800b9ca:	e7d2      	b.n	800b972 <_vfiprintf_r+0xe2>
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	1d19      	adds	r1, r3, #4
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	9103      	str	r1, [sp, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bfbb      	ittet	lt
 800b9d8:	425b      	neglt	r3, r3
 800b9da:	f042 0202 	orrlt.w	r2, r2, #2
 800b9de:	9307      	strge	r3, [sp, #28]
 800b9e0:	9307      	strlt	r3, [sp, #28]
 800b9e2:	bfb8      	it	lt
 800b9e4:	9204      	strlt	r2, [sp, #16]
 800b9e6:	7823      	ldrb	r3, [r4, #0]
 800b9e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b9ea:	d10c      	bne.n	800ba06 <_vfiprintf_r+0x176>
 800b9ec:	7863      	ldrb	r3, [r4, #1]
 800b9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f0:	d135      	bne.n	800ba5e <_vfiprintf_r+0x1ce>
 800b9f2:	9b03      	ldr	r3, [sp, #12]
 800b9f4:	1d1a      	adds	r2, r3, #4
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	9203      	str	r2, [sp, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	bfb8      	it	lt
 800b9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba02:	3402      	adds	r4, #2
 800ba04:	9305      	str	r3, [sp, #20]
 800ba06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800baec <_vfiprintf_r+0x25c>
 800ba0a:	7821      	ldrb	r1, [r4, #0]
 800ba0c:	2203      	movs	r2, #3
 800ba0e:	4650      	mov	r0, sl
 800ba10:	f7f4 fc06 	bl	8000220 <memchr>
 800ba14:	b140      	cbz	r0, 800ba28 <_vfiprintf_r+0x198>
 800ba16:	2340      	movs	r3, #64	; 0x40
 800ba18:	eba0 000a 	sub.w	r0, r0, sl
 800ba1c:	fa03 f000 	lsl.w	r0, r3, r0
 800ba20:	9b04      	ldr	r3, [sp, #16]
 800ba22:	4303      	orrs	r3, r0
 800ba24:	3401      	adds	r4, #1
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba2c:	482c      	ldr	r0, [pc, #176]	; (800bae0 <_vfiprintf_r+0x250>)
 800ba2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba32:	2206      	movs	r2, #6
 800ba34:	f7f4 fbf4 	bl	8000220 <memchr>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d03f      	beq.n	800babc <_vfiprintf_r+0x22c>
 800ba3c:	4b29      	ldr	r3, [pc, #164]	; (800bae4 <_vfiprintf_r+0x254>)
 800ba3e:	bb1b      	cbnz	r3, 800ba88 <_vfiprintf_r+0x1f8>
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	3307      	adds	r3, #7
 800ba44:	f023 0307 	bic.w	r3, r3, #7
 800ba48:	3308      	adds	r3, #8
 800ba4a:	9303      	str	r3, [sp, #12]
 800ba4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4e:	443b      	add	r3, r7
 800ba50:	9309      	str	r3, [sp, #36]	; 0x24
 800ba52:	e767      	b.n	800b924 <_vfiprintf_r+0x94>
 800ba54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba58:	460c      	mov	r4, r1
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	e7a5      	b.n	800b9aa <_vfiprintf_r+0x11a>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	3401      	adds	r4, #1
 800ba62:	9305      	str	r3, [sp, #20]
 800ba64:	4619      	mov	r1, r3
 800ba66:	f04f 0c0a 	mov.w	ip, #10
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba70:	3a30      	subs	r2, #48	; 0x30
 800ba72:	2a09      	cmp	r2, #9
 800ba74:	d903      	bls.n	800ba7e <_vfiprintf_r+0x1ee>
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0c5      	beq.n	800ba06 <_vfiprintf_r+0x176>
 800ba7a:	9105      	str	r1, [sp, #20]
 800ba7c:	e7c3      	b.n	800ba06 <_vfiprintf_r+0x176>
 800ba7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba82:	4604      	mov	r4, r0
 800ba84:	2301      	movs	r3, #1
 800ba86:	e7f0      	b.n	800ba6a <_vfiprintf_r+0x1da>
 800ba88:	ab03      	add	r3, sp, #12
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	462a      	mov	r2, r5
 800ba8e:	4b16      	ldr	r3, [pc, #88]	; (800bae8 <_vfiprintf_r+0x258>)
 800ba90:	a904      	add	r1, sp, #16
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7fb f9bc 	bl	8006e10 <_printf_float>
 800ba98:	4607      	mov	r7, r0
 800ba9a:	1c78      	adds	r0, r7, #1
 800ba9c:	d1d6      	bne.n	800ba4c <_vfiprintf_r+0x1bc>
 800ba9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baa0:	07d9      	lsls	r1, r3, #31
 800baa2:	d405      	bmi.n	800bab0 <_vfiprintf_r+0x220>
 800baa4:	89ab      	ldrh	r3, [r5, #12]
 800baa6:	059a      	lsls	r2, r3, #22
 800baa8:	d402      	bmi.n	800bab0 <_vfiprintf_r+0x220>
 800baaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baac:	f7ff fe71 	bl	800b792 <__retarget_lock_release_recursive>
 800bab0:	89ab      	ldrh	r3, [r5, #12]
 800bab2:	065b      	lsls	r3, r3, #25
 800bab4:	f53f af12 	bmi.w	800b8dc <_vfiprintf_r+0x4c>
 800bab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baba:	e711      	b.n	800b8e0 <_vfiprintf_r+0x50>
 800babc:	ab03      	add	r3, sp, #12
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	462a      	mov	r2, r5
 800bac2:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <_vfiprintf_r+0x258>)
 800bac4:	a904      	add	r1, sp, #16
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7fb fc46 	bl	8007358 <_printf_i>
 800bacc:	e7e4      	b.n	800ba98 <_vfiprintf_r+0x208>
 800bace:	bf00      	nop
 800bad0:	0800c38c 	.word	0x0800c38c
 800bad4:	0800c3ac 	.word	0x0800c3ac
 800bad8:	0800c36c 	.word	0x0800c36c
 800badc:	0800c304 	.word	0x0800c304
 800bae0:	0800c30e 	.word	0x0800c30e
 800bae4:	08006e11 	.word	0x08006e11
 800bae8:	0800b86d 	.word	0x0800b86d
 800baec:	0800c30a 	.word	0x0800c30a

0800baf0 <__swbuf_r>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	460e      	mov	r6, r1
 800baf4:	4614      	mov	r4, r2
 800baf6:	4605      	mov	r5, r0
 800baf8:	b118      	cbz	r0, 800bb02 <__swbuf_r+0x12>
 800bafa:	6983      	ldr	r3, [r0, #24]
 800bafc:	b90b      	cbnz	r3, 800bb02 <__swbuf_r+0x12>
 800bafe:	f7ff fd97 	bl	800b630 <__sinit>
 800bb02:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <__swbuf_r+0x98>)
 800bb04:	429c      	cmp	r4, r3
 800bb06:	d12b      	bne.n	800bb60 <__swbuf_r+0x70>
 800bb08:	686c      	ldr	r4, [r5, #4]
 800bb0a:	69a3      	ldr	r3, [r4, #24]
 800bb0c:	60a3      	str	r3, [r4, #8]
 800bb0e:	89a3      	ldrh	r3, [r4, #12]
 800bb10:	071a      	lsls	r2, r3, #28
 800bb12:	d52f      	bpl.n	800bb74 <__swbuf_r+0x84>
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	b36b      	cbz	r3, 800bb74 <__swbuf_r+0x84>
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	6820      	ldr	r0, [r4, #0]
 800bb1c:	1ac0      	subs	r0, r0, r3
 800bb1e:	6963      	ldr	r3, [r4, #20]
 800bb20:	b2f6      	uxtb	r6, r6
 800bb22:	4283      	cmp	r3, r0
 800bb24:	4637      	mov	r7, r6
 800bb26:	dc04      	bgt.n	800bb32 <__swbuf_r+0x42>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f7ff fcec 	bl	800b508 <_fflush_r>
 800bb30:	bb30      	cbnz	r0, 800bb80 <__swbuf_r+0x90>
 800bb32:	68a3      	ldr	r3, [r4, #8]
 800bb34:	3b01      	subs	r3, #1
 800bb36:	60a3      	str	r3, [r4, #8]
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	6022      	str	r2, [r4, #0]
 800bb3e:	701e      	strb	r6, [r3, #0]
 800bb40:	6963      	ldr	r3, [r4, #20]
 800bb42:	3001      	adds	r0, #1
 800bb44:	4283      	cmp	r3, r0
 800bb46:	d004      	beq.n	800bb52 <__swbuf_r+0x62>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	07db      	lsls	r3, r3, #31
 800bb4c:	d506      	bpl.n	800bb5c <__swbuf_r+0x6c>
 800bb4e:	2e0a      	cmp	r6, #10
 800bb50:	d104      	bne.n	800bb5c <__swbuf_r+0x6c>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7ff fcd7 	bl	800b508 <_fflush_r>
 800bb5a:	b988      	cbnz	r0, 800bb80 <__swbuf_r+0x90>
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <__swbuf_r+0x9c>)
 800bb62:	429c      	cmp	r4, r3
 800bb64:	d101      	bne.n	800bb6a <__swbuf_r+0x7a>
 800bb66:	68ac      	ldr	r4, [r5, #8]
 800bb68:	e7cf      	b.n	800bb0a <__swbuf_r+0x1a>
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <__swbuf_r+0xa0>)
 800bb6c:	429c      	cmp	r4, r3
 800bb6e:	bf08      	it	eq
 800bb70:	68ec      	ldreq	r4, [r5, #12]
 800bb72:	e7ca      	b.n	800bb0a <__swbuf_r+0x1a>
 800bb74:	4621      	mov	r1, r4
 800bb76:	4628      	mov	r0, r5
 800bb78:	f000 f80c 	bl	800bb94 <__swsetup_r>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d0cb      	beq.n	800bb18 <__swbuf_r+0x28>
 800bb80:	f04f 37ff 	mov.w	r7, #4294967295
 800bb84:	e7ea      	b.n	800bb5c <__swbuf_r+0x6c>
 800bb86:	bf00      	nop
 800bb88:	0800c38c 	.word	0x0800c38c
 800bb8c:	0800c3ac 	.word	0x0800c3ac
 800bb90:	0800c36c 	.word	0x0800c36c

0800bb94 <__swsetup_r>:
 800bb94:	4b32      	ldr	r3, [pc, #200]	; (800bc60 <__swsetup_r+0xcc>)
 800bb96:	b570      	push	{r4, r5, r6, lr}
 800bb98:	681d      	ldr	r5, [r3, #0]
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	b125      	cbz	r5, 800bbaa <__swsetup_r+0x16>
 800bba0:	69ab      	ldr	r3, [r5, #24]
 800bba2:	b913      	cbnz	r3, 800bbaa <__swsetup_r+0x16>
 800bba4:	4628      	mov	r0, r5
 800bba6:	f7ff fd43 	bl	800b630 <__sinit>
 800bbaa:	4b2e      	ldr	r3, [pc, #184]	; (800bc64 <__swsetup_r+0xd0>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	d10f      	bne.n	800bbd0 <__swsetup_r+0x3c>
 800bbb0:	686c      	ldr	r4, [r5, #4]
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb8:	0719      	lsls	r1, r3, #28
 800bbba:	d42c      	bmi.n	800bc16 <__swsetup_r+0x82>
 800bbbc:	06dd      	lsls	r5, r3, #27
 800bbbe:	d411      	bmi.n	800bbe4 <__swsetup_r+0x50>
 800bbc0:	2309      	movs	r3, #9
 800bbc2:	6033      	str	r3, [r6, #0]
 800bbc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295
 800bbce:	e03e      	b.n	800bc4e <__swsetup_r+0xba>
 800bbd0:	4b25      	ldr	r3, [pc, #148]	; (800bc68 <__swsetup_r+0xd4>)
 800bbd2:	429c      	cmp	r4, r3
 800bbd4:	d101      	bne.n	800bbda <__swsetup_r+0x46>
 800bbd6:	68ac      	ldr	r4, [r5, #8]
 800bbd8:	e7eb      	b.n	800bbb2 <__swsetup_r+0x1e>
 800bbda:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <__swsetup_r+0xd8>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	bf08      	it	eq
 800bbe0:	68ec      	ldreq	r4, [r5, #12]
 800bbe2:	e7e6      	b.n	800bbb2 <__swsetup_r+0x1e>
 800bbe4:	0758      	lsls	r0, r3, #29
 800bbe6:	d512      	bpl.n	800bc0e <__swsetup_r+0x7a>
 800bbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbea:	b141      	cbz	r1, 800bbfe <__swsetup_r+0x6a>
 800bbec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbf0:	4299      	cmp	r1, r3
 800bbf2:	d002      	beq.n	800bbfa <__swsetup_r+0x66>
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7fe fd63 	bl	800a6c0 <_free_r>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	6363      	str	r3, [r4, #52]	; 0x34
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	2300      	movs	r3, #0
 800bc08:	6063      	str	r3, [r4, #4]
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f043 0308 	orr.w	r3, r3, #8
 800bc14:	81a3      	strh	r3, [r4, #12]
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	b94b      	cbnz	r3, 800bc2e <__swsetup_r+0x9a>
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc24:	d003      	beq.n	800bc2e <__swsetup_r+0x9a>
 800bc26:	4621      	mov	r1, r4
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f000 f84d 	bl	800bcc8 <__smakebuf_r>
 800bc2e:	89a0      	ldrh	r0, [r4, #12]
 800bc30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc34:	f010 0301 	ands.w	r3, r0, #1
 800bc38:	d00a      	beq.n	800bc50 <__swsetup_r+0xbc>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60a3      	str	r3, [r4, #8]
 800bc3e:	6963      	ldr	r3, [r4, #20]
 800bc40:	425b      	negs	r3, r3
 800bc42:	61a3      	str	r3, [r4, #24]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	b943      	cbnz	r3, 800bc5a <__swsetup_r+0xc6>
 800bc48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc4c:	d1ba      	bne.n	800bbc4 <__swsetup_r+0x30>
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	0781      	lsls	r1, r0, #30
 800bc52:	bf58      	it	pl
 800bc54:	6963      	ldrpl	r3, [r4, #20]
 800bc56:	60a3      	str	r3, [r4, #8]
 800bc58:	e7f4      	b.n	800bc44 <__swsetup_r+0xb0>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e7f7      	b.n	800bc4e <__swsetup_r+0xba>
 800bc5e:	bf00      	nop
 800bc60:	2000000c 	.word	0x2000000c
 800bc64:	0800c38c 	.word	0x0800c38c
 800bc68:	0800c3ac 	.word	0x0800c3ac
 800bc6c:	0800c36c 	.word	0x0800c36c

0800bc70 <abort>:
 800bc70:	b508      	push	{r3, lr}
 800bc72:	2006      	movs	r0, #6
 800bc74:	f000 f898 	bl	800bda8 <raise>
 800bc78:	2001      	movs	r0, #1
 800bc7a:	f7f6 fbe9 	bl	8002450 <_exit>

0800bc7e <__swhatbuf_r>:
 800bc7e:	b570      	push	{r4, r5, r6, lr}
 800bc80:	460e      	mov	r6, r1
 800bc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc86:	2900      	cmp	r1, #0
 800bc88:	b096      	sub	sp, #88	; 0x58
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	461d      	mov	r5, r3
 800bc8e:	da08      	bge.n	800bca2 <__swhatbuf_r+0x24>
 800bc90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	602a      	str	r2, [r5, #0]
 800bc98:	061a      	lsls	r2, r3, #24
 800bc9a:	d410      	bmi.n	800bcbe <__swhatbuf_r+0x40>
 800bc9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bca0:	e00e      	b.n	800bcc0 <__swhatbuf_r+0x42>
 800bca2:	466a      	mov	r2, sp
 800bca4:	f000 f89c 	bl	800bde0 <_fstat_r>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	dbf1      	blt.n	800bc90 <__swhatbuf_r+0x12>
 800bcac:	9a01      	ldr	r2, [sp, #4]
 800bcae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcb6:	425a      	negs	r2, r3
 800bcb8:	415a      	adcs	r2, r3
 800bcba:	602a      	str	r2, [r5, #0]
 800bcbc:	e7ee      	b.n	800bc9c <__swhatbuf_r+0x1e>
 800bcbe:	2340      	movs	r3, #64	; 0x40
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	b016      	add	sp, #88	; 0x58
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}

0800bcc8 <__smakebuf_r>:
 800bcc8:	898b      	ldrh	r3, [r1, #12]
 800bcca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bccc:	079d      	lsls	r5, r3, #30
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	d507      	bpl.n	800bce4 <__smakebuf_r+0x1c>
 800bcd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	6123      	str	r3, [r4, #16]
 800bcdc:	2301      	movs	r3, #1
 800bcde:	6163      	str	r3, [r4, #20]
 800bce0:	b002      	add	sp, #8
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
 800bce4:	ab01      	add	r3, sp, #4
 800bce6:	466a      	mov	r2, sp
 800bce8:	f7ff ffc9 	bl	800bc7e <__swhatbuf_r>
 800bcec:	9900      	ldr	r1, [sp, #0]
 800bcee:	4605      	mov	r5, r0
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7fe fd51 	bl	800a798 <_malloc_r>
 800bcf6:	b948      	cbnz	r0, 800bd0c <__smakebuf_r+0x44>
 800bcf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcfc:	059a      	lsls	r2, r3, #22
 800bcfe:	d4ef      	bmi.n	800bce0 <__smakebuf_r+0x18>
 800bd00:	f023 0303 	bic.w	r3, r3, #3
 800bd04:	f043 0302 	orr.w	r3, r3, #2
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	e7e3      	b.n	800bcd4 <__smakebuf_r+0xc>
 800bd0c:	4b0d      	ldr	r3, [pc, #52]	; (800bd44 <__smakebuf_r+0x7c>)
 800bd0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	6020      	str	r0, [r4, #0]
 800bd14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd18:	81a3      	strh	r3, [r4, #12]
 800bd1a:	9b00      	ldr	r3, [sp, #0]
 800bd1c:	6163      	str	r3, [r4, #20]
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	6120      	str	r0, [r4, #16]
 800bd22:	b15b      	cbz	r3, 800bd3c <__smakebuf_r+0x74>
 800bd24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f000 f86b 	bl	800be04 <_isatty_r>
 800bd2e:	b128      	cbz	r0, 800bd3c <__smakebuf_r+0x74>
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	f023 0303 	bic.w	r3, r3, #3
 800bd36:	f043 0301 	orr.w	r3, r3, #1
 800bd3a:	81a3      	strh	r3, [r4, #12]
 800bd3c:	89a0      	ldrh	r0, [r4, #12]
 800bd3e:	4305      	orrs	r5, r0
 800bd40:	81a5      	strh	r5, [r4, #12]
 800bd42:	e7cd      	b.n	800bce0 <__smakebuf_r+0x18>
 800bd44:	0800b5c9 	.word	0x0800b5c9

0800bd48 <_malloc_usable_size_r>:
 800bd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd4c:	1f18      	subs	r0, r3, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bfbc      	itt	lt
 800bd52:	580b      	ldrlt	r3, [r1, r0]
 800bd54:	18c0      	addlt	r0, r0, r3
 800bd56:	4770      	bx	lr

0800bd58 <_raise_r>:
 800bd58:	291f      	cmp	r1, #31
 800bd5a:	b538      	push	{r3, r4, r5, lr}
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	460d      	mov	r5, r1
 800bd60:	d904      	bls.n	800bd6c <_raise_r+0x14>
 800bd62:	2316      	movs	r3, #22
 800bd64:	6003      	str	r3, [r0, #0]
 800bd66:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd6e:	b112      	cbz	r2, 800bd76 <_raise_r+0x1e>
 800bd70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd74:	b94b      	cbnz	r3, 800bd8a <_raise_r+0x32>
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 f830 	bl	800bddc <_getpid_r>
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4601      	mov	r1, r0
 800bd80:	4620      	mov	r0, r4
 800bd82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd86:	f000 b817 	b.w	800bdb8 <_kill_r>
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d00a      	beq.n	800bda4 <_raise_r+0x4c>
 800bd8e:	1c59      	adds	r1, r3, #1
 800bd90:	d103      	bne.n	800bd9a <_raise_r+0x42>
 800bd92:	2316      	movs	r3, #22
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	2001      	movs	r0, #1
 800bd98:	e7e7      	b.n	800bd6a <_raise_r+0x12>
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bda0:	4628      	mov	r0, r5
 800bda2:	4798      	blx	r3
 800bda4:	2000      	movs	r0, #0
 800bda6:	e7e0      	b.n	800bd6a <_raise_r+0x12>

0800bda8 <raise>:
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <raise+0xc>)
 800bdaa:	4601      	mov	r1, r0
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	f7ff bfd3 	b.w	800bd58 <_raise_r>
 800bdb2:	bf00      	nop
 800bdb4:	2000000c 	.word	0x2000000c

0800bdb8 <_kill_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d07      	ldr	r5, [pc, #28]	; (800bdd8 <_kill_r+0x20>)
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	602b      	str	r3, [r5, #0]
 800bdc6:	f7f6 fb33 	bl	8002430 <_kill>
 800bdca:	1c43      	adds	r3, r0, #1
 800bdcc:	d102      	bne.n	800bdd4 <_kill_r+0x1c>
 800bdce:	682b      	ldr	r3, [r5, #0]
 800bdd0:	b103      	cbz	r3, 800bdd4 <_kill_r+0x1c>
 800bdd2:	6023      	str	r3, [r4, #0]
 800bdd4:	bd38      	pop	{r3, r4, r5, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000898 	.word	0x20000898

0800bddc <_getpid_r>:
 800bddc:	f7f6 bb20 	b.w	8002420 <_getpid>

0800bde0 <_fstat_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	4d07      	ldr	r5, [pc, #28]	; (800be00 <_fstat_r+0x20>)
 800bde4:	2300      	movs	r3, #0
 800bde6:	4604      	mov	r4, r0
 800bde8:	4608      	mov	r0, r1
 800bdea:	4611      	mov	r1, r2
 800bdec:	602b      	str	r3, [r5, #0]
 800bdee:	f7f6 fb7e 	bl	80024ee <_fstat>
 800bdf2:	1c43      	adds	r3, r0, #1
 800bdf4:	d102      	bne.n	800bdfc <_fstat_r+0x1c>
 800bdf6:	682b      	ldr	r3, [r5, #0]
 800bdf8:	b103      	cbz	r3, 800bdfc <_fstat_r+0x1c>
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	bd38      	pop	{r3, r4, r5, pc}
 800bdfe:	bf00      	nop
 800be00:	20000898 	.word	0x20000898

0800be04 <_isatty_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	4d06      	ldr	r5, [pc, #24]	; (800be20 <_isatty_r+0x1c>)
 800be08:	2300      	movs	r3, #0
 800be0a:	4604      	mov	r4, r0
 800be0c:	4608      	mov	r0, r1
 800be0e:	602b      	str	r3, [r5, #0]
 800be10:	f7f6 fb7d 	bl	800250e <_isatty>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d102      	bne.n	800be1e <_isatty_r+0x1a>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	b103      	cbz	r3, 800be1e <_isatty_r+0x1a>
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	20000898 	.word	0x20000898

0800be24 <_init>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	bf00      	nop
 800be28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2a:	bc08      	pop	{r3}
 800be2c:	469e      	mov	lr, r3
 800be2e:	4770      	bx	lr

0800be30 <_fini>:
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be32:	bf00      	nop
 800be34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be36:	bc08      	pop	{r3}
 800be38:	469e      	mov	lr, r3
 800be3a:	4770      	bx	lr
