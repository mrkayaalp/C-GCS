
C-GCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800b788  0800b788  0001b788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb4  0800bcb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb4  0800bcb4  0001bcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcbc  0800bcbc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcbc  0800bcbc  0001bcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcc0  0800bcc0  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bcc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  200001e0  0800bea4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  0800bea4  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001403c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca4  00000000  00000000  0003424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00036ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00037dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ce7  00000000  00000000  00038b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014964  00000000  00000000  0005f82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec1f4  00000000  00000000  00074193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  001603d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b770 	.word	0x0800b770

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b770 	.word	0x0800b770

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001042:	2101      	movs	r1, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f9c2 	bl	80013ce <LoRa_read>
 800104a:	4603      	mov	r3, r0
 800104c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d107      	bne.n	8001068 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f023 0307 	bic.w	r3, r3, #7
 800105e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
 8001066:	e03e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10c      	bne.n	8001088 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800106e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	b25b      	sxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
 8001086:	e02e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d10c      	bne.n	80010a8 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800108e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001092:	f023 0307 	bic.w	r3, r3, #7
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f043 0303 	orr.w	r3, r3, #3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	e01e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d10c      	bne.n	80010c8 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80010ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010b2:	f023 0307 	bic.w	r3, r3, #7
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	f043 0305 	orr.w	r3, r3, #5
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2205      	movs	r2, #5
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	e00e      	b.n	80010e6 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d10b      	bne.n	80010e6 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80010ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010d2:	f023 0307 	bic.w	r3, r3, #7
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	f043 0306 	orr.w	r3, r3, #6
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2206      	movs	r2, #6
 80010e4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	461a      	mov	r2, r3
 80010ea:	2101      	movs	r1, #1
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f988 	bl	8001402 <LoRa_write>
	//HAL_Delay(10);
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	f002 fb27 	bl	8003768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6998      	ldr	r0, [r3, #24]
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	f003 fd9e 	bl	8004c66 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)1
 800112a:	bf00      	nop
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4618      	mov	r0, r3
 8001132:	f004 fb53 	bl	80057dc <HAL_SPI_GetState>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d1f7      	bne.n	800112c <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6998      	ldr	r0, [r3, #24]
 8001140:	8b3a      	ldrh	r2, [r7, #24]
 8001142:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	f003 fefb 	bl	8004f42 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800114c:	bf00      	nop
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fb42 	bl	80057dc <HAL_SPI_GetState>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d1f7      	bne.n	800114e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f002 fafd 	bl	8003768 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4613      	mov	r3, r2
 8001184:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	f002 fae9 	bl	8003768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6998      	ldr	r0, [r3, #24]
 800119a:	88fa      	ldrh	r2, [r7, #6]
 800119c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	f003 fd60 	bl	8004c66 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011a6:	bf00      	nop
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fb15 	bl	80057dc <HAL_SPI_GetState>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1f7      	bne.n	80011a8 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6998      	ldr	r0, [r3, #24]
 80011bc:	8b3a      	ldrh	r2, [r7, #24]
 80011be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	f003 fd4f 	bl	8004c66 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011c8:	bf00      	nop
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb04 	bl	80057dc <HAL_SPI_GetState>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d1f7      	bne.n	80011ca <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f002 fabf 	bl	8003768 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	0000      	movs	r0, r0
 80011f4:	0000      	movs	r0, r0
	...

080011f8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, float freq){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	ed87 0a00 	vstr	s0, [r7]
	uint8_t  data;
	uint32_t F;
	//F = (freq * 524288)>>5;
	// F = (uint32_t)(freq * 1000000 / 61.03515625f);
	F = (uint32_t)(freq * 1e6 / 61.03515625f);
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f7ff f9bf 	bl	8000588 <__aeabi_f2d>
 800120a:	a31f      	add	r3, pc, #124	; (adr r3, 8001288 <LoRa_setFrequency+0x90>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff fa12 	bl	8000638 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a31c      	add	r3, pc, #112	; (adr r3, 8001290 <LoRa_setFrequency+0x98>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fb33 	bl	800088c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcdb 	bl	8000be8 <__aeabi_d2uiz>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	0c1b      	lsrs	r3, r3, #16
 800123a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	461a      	mov	r2, r3
 8001240:	2106      	movs	r1, #6
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f8dd 	bl	8001402 <LoRa_write>
	HAL_Delay(5);
 8001248:	2005      	movs	r0, #5
 800124a:	f001 ff19 	bl	8003080 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	461a      	mov	r2, r3
 8001258:	2107      	movs	r1, #7
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f8d1 	bl	8001402 <LoRa_write>
	HAL_Delay(5);
 8001260:	2005      	movs	r0, #5
 8001262:	f001 ff0d 	bl	8003080 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	461a      	mov	r2, r3
 800126e:	2108      	movs	r1, #8
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f8c6 	bl	8001402 <LoRa_write>
	HAL_Delay(5);
 8001276:	2005      	movs	r0, #5
 8001278:	f001 ff02 	bl	8003080 <HAL_Delay>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	412e8480 	.word	0x412e8480
 8001290:	00000000 	.word	0x00000000
 8001294:	404e8480 	.word	0x404e8480

08001298 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	dd01      	ble.n	80012ac <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80012a8:	230c      	movs	r3, #12
 80012aa:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	dc01      	bgt.n	80012b6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012b6:	211e      	movs	r1, #30
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f888 	bl	80013ce <LoRa_read>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f001 fedc 	bl	8003080 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	461a      	mov	r2, r3
 80012e0:	211e      	movs	r1, #30
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f88d 	bl	8001402 <LoRa_write>
	HAL_Delay(10);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f001 fec9 	bl	8003080 <HAL_Delay>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	461a      	mov	r2, r3
 8001306:	2109      	movs	r1, #9
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f87a 	bl	8001402 <LoRa_write>
	HAL_Delay(10);
 800130e:	200a      	movs	r0, #10
 8001310:	f001 feb6 	bl	8003080 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b2c      	cmp	r3, #44	; 0x2c
 8001330:	d801      	bhi.n	8001336 <LoRa_setOCP+0x1a>
		current = 45;
 8001332:	232d      	movs	r3, #45	; 0x2d
 8001334:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	2bf0      	cmp	r3, #240	; 0xf0
 800133a:	d901      	bls.n	8001340 <LoRa_setOCP+0x24>
		current = 240;
 800133c:	23f0      	movs	r3, #240	; 0xf0
 800133e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b78      	cmp	r3, #120	; 0x78
 8001344:	d809      	bhi.n	800135a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	3b2d      	subs	r3, #45	; 0x2d
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <LoRa_setOCP+0x78>)
 800134c:	fb82 1203 	smull	r1, r2, r2, r3
 8001350:	1052      	asrs	r2, r2, #1
 8001352:	17db      	asrs	r3, r3, #31
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e00b      	b.n	8001372 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2bf0      	cmp	r3, #240	; 0xf0
 800135e:	d808      	bhi.n	8001372 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	331e      	adds	r3, #30
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <LoRa_setOCP+0x78>)
 8001366:	fb82 1203 	smull	r1, r2, r2, r3
 800136a:	1092      	asrs	r2, r2, #2
 800136c:	17db      	asrs	r3, r3, #31
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3320      	adds	r3, #32
 8001376:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	461a      	mov	r2, r3
 800137c:	210b      	movs	r1, #11
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f83f 	bl	8001402 <LoRa_write>
	HAL_Delay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f001 fe7b 	bl	8003080 <HAL_Delay>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	66666667 	.word	0x66666667

08001398 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013a0:	211e      	movs	r1, #30
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f813 	bl	80013ce <LoRa_read>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f043 0307 	orr.w	r3, r3, #7
 80013b2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	461a      	mov	r2, r3
 80013b8:	211e      	movs	r1, #30
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f821 	bl	8001402 <LoRa_write>
	HAL_Delay(10);
 80013c0:	200a      	movs	r0, #10
 80013c2:	f001 fe5d 	bl	8003080 <HAL_Delay>
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af02      	add	r7, sp, #8
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80013e4:	f107 030f 	add.w	r3, r7, #15
 80013e8:	f107 010e 	add.w	r1, r7, #14
 80013ec:	2201      	movs	r2, #1
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fe81 	bl	80010fa <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af02      	add	r7, sp, #8
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	70fb      	strb	r3, [r7, #3]
 800140e:	4613      	mov	r3, r2
 8001410:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001418:	b2db      	uxtb	r3, r3
 800141a:	73bb      	strb	r3, [r7, #14]
	data = value;
 800141c:	78bb      	ldrb	r3, [r7, #2]
 800141e:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001420:	f107 030f 	add.w	r3, r7, #15
 8001424:	f107 010e 	add.w	r1, r7, #14
 8001428:	2201      	movs	r2, #1
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fea1 	bl	8001176 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

	return 1;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800145a:	2105      	movs	r1, #5
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fdeb 	bl	8001038 <LoRa_gotoMode>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b089      	sub	sp, #36	; 0x24
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	4613      	mov	r3, r2
 8001476:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	e007      	b.n	8001492 <LoRa_receive+0x28>
		data[i]=0;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	3301      	adds	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf3      	blt.n	8001482 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800149a:	2101      	movs	r1, #1
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff fdcb 	bl	8001038 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80014a2:	2112      	movs	r1, #18
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ff92 	bl	80013ce <LoRa_read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80014ae:	7cfb      	ldrb	r3, [r7, #19]
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02f      	beq.n	8001518 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80014b8:	22ff      	movs	r2, #255	; 0xff
 80014ba:	2112      	movs	r1, #18
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f7ff ffa0 	bl	8001402 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80014c2:	2113      	movs	r1, #19
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff ff82 	bl	80013ce <LoRa_read>
 80014ca:	4603      	mov	r3, r0
 80014cc:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80014ce:	2110      	movs	r1, #16
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ff7c 	bl	80013ce <LoRa_read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	461a      	mov	r2, r3
 80014de:	210d      	movs	r1, #13
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff ff8e 	bl	8001402 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80014e6:	7cba      	ldrb	r2, [r7, #18]
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4293      	cmp	r3, r2
 80014ec:	bf28      	it	cs
 80014ee:	4613      	movcs	r3, r2
 80014f0:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e00b      	b.n	8001510 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	18d4      	adds	r4, r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff ff64 	bl	80013ce <LoRa_read>
 8001506:	4603      	mov	r3, r0
 8001508:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbef      	blt.n	80014f8 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001518:	2105      	movs	r1, #5
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fd8c 	bl	8001038 <LoRa_gotoMode>
    return min;
 8001520:	7ffb      	ldrb	r3, [r7, #31]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 8001532:	211a      	movs	r1, #26
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff4a 	bl	80013ce <LoRa_read>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	3ba4      	subs	r3, #164	; 0xa4
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff72 	bl	800143c <LoRa_isvalid>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8095 	beq.w	800168a <LoRa_init+0x140>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fd68 	bl	8001038 <LoRa_gotoMode>
			HAL_Delay(10);
 8001568:	200a      	movs	r0, #10
 800156a:	f001 fd89 	bl	8003080 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800156e:	2101      	movs	r1, #1
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff2c 	bl	80013ce <LoRa_read>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800157a:	200a      	movs	r0, #10
 800157c:	f001 fd80 	bl	8003080 <HAL_Delay>
			data = read | 0x80;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001586:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	461a      	mov	r2, r3
 800158c:	2101      	movs	r1, #1
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff37 	bl	8001402 <LoRa_write>
			HAL_Delay(100);
 8001594:	2064      	movs	r0, #100	; 0x64
 8001596:	f001 fd73 	bl	8003080 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edd3 7a08 	vldr	s15, [r3, #32]
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fe27 	bl	80011f8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe9f 	bl	80012f6 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff feab 	bl	800131c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80015c6:	2223      	movs	r2, #35	; 0x23
 80015c8:	210c      	movs	r1, #12
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff19 	bl	8001402 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fee1 	bl	8001398 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe5a 	bl	8001298 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	211f      	movs	r1, #31
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff0a 	bl	8001402 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800160a:	7bbb      	ldrb	r3, [r7, #14]
 800160c:	461a      	mov	r2, r3
 800160e:	211d      	movs	r1, #29
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fef6 	bl	8001402 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	2120      	movs	r1, #32
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff feec 	bl	8001402 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	2121      	movs	r1, #33	; 0x21
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fee4 	bl	8001402 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fec6 	bl	80013ce <LoRa_read>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800164c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	461a      	mov	r2, r3
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fed4 	bl	8001402 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800165a:	2101      	movs	r1, #1
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fceb 	bl	8001038 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001668:	200a      	movs	r0, #10
 800166a:	f001 fd09 	bl	8003080 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800166e:	2142      	movs	r1, #66	; 0x42
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff feac 	bl	80013ce <LoRa_read>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d101      	bne.n	8001684 <LoRa_init+0x13a>
				return LORA_OK;
 8001680:	23c8      	movs	r3, #200	; 0xc8
 8001682:	e004      	b.n	800168e <LoRa_init+0x144>
			else
				return LORA_NOT_FOUND;
 8001684:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001688:	e001      	b.n	800168e <LoRa_init+0x144>
	}
	else {
		return LORA_UNAVAILABLE;
 800168a:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <CRCCalculator>:
#include "crc.h"



uint16_t CRCCalculator(const unsigned char *buf, unsigned int len) {
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80016a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a4:	81fb      	strh	r3, [r7, #14]
    char i = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	737b      	strb	r3, [r7, #13]

    while (len--) {
 80016aa:	e023      	b.n	80016f4 <CRCCalculator+0x5e>
        crc ^= (*buf++);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	4053      	eors	r3, r2
 80016ba:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	737b      	strb	r3, [r7, #13]
 80016c0:	e015      	b.n	80016ee <CRCCalculator+0x58>
            if (crc & 1) {
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00a      	beq.n	80016e2 <CRCCalculator+0x4c>
                crc >>= 1;
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80016d8:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80016dc:	43db      	mvns	r3, r3
 80016de:	81fb      	strh	r3, [r7, #14]
 80016e0:	e002      	b.n	80016e8 <CRCCalculator+0x52>
            } else {
                crc >>= 1;
 80016e2:	89fb      	ldrh	r3, [r7, #14]
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++) {
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	3301      	adds	r3, #1
 80016ec:	737b      	strb	r3, [r7, #13]
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	2b07      	cmp	r3, #7
 80016f2:	d9e6      	bls.n	80016c2 <CRCCalculator+0x2c>
    while (len--) {
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	603a      	str	r2, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1d6      	bne.n	80016ac <CRCCalculator+0x16>
            }
        }
    }

    return crc;
 80016fe:	89fb      	ldrh	r3, [r7, #14]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <MX_GPIO_Init>:
        * EXTI
     PD5   ------> USART2_TX
     PD6   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001722:	4bb2      	ldr	r3, [pc, #712]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4ab1      	ldr	r2, [pc, #708]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4baf      	ldr	r3, [pc, #700]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4bac      	ldr	r3, [pc, #688]	; (80019ec <MX_GPIO_Init+0x2e0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4aab      	ldr	r2, [pc, #684]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4ba9      	ldr	r3, [pc, #676]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001752:	4ba6      	ldr	r3, [pc, #664]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4aa5      	ldr	r2, [pc, #660]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4ba3      	ldr	r3, [pc, #652]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	4ba0      	ldr	r3, [pc, #640]	; (80019ec <MX_GPIO_Init+0x2e0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a9f      	ldr	r2, [pc, #636]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b9d      	ldr	r3, [pc, #628]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b9a      	ldr	r3, [pc, #616]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a99      	ldr	r2, [pc, #612]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b97      	ldr	r3, [pc, #604]	; (80019ec <MX_GPIO_Init+0x2e0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <MX_GPIO_Init+0x2e0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a93      	ldr	r2, [pc, #588]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b91      	ldr	r3, [pc, #580]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b2:	4b8e      	ldr	r3, [pc, #568]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a8d      	ldr	r2, [pc, #564]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a87      	ldr	r2, [pc, #540]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b85      	ldr	r3, [pc, #532]	; (80019ec <MX_GPIO_Init+0x2e0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_14_Pin|GPIO_12_Pin|GPIO_7_Pin|GPIO_6_Pin
 80017e2:	2200      	movs	r2, #0
 80017e4:	f64a 413f 	movw	r1, #44095	; 0xac3f
 80017e8:	4881      	ldr	r0, [pc, #516]	; (80019f0 <MX_GPIO_Init+0x2e4>)
 80017ea:	f001 ffbd 	bl	8003768 <HAL_GPIO_WritePin>
                          |GPIO_5_Pin|GPIO_4_Pin|GPIO_44_Pin|GPIO_43_Pin
                          |GPIO_28_Pin|GPIO_27_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_11_Pin|GPIO_10_Pin|GPIO_9_Pin|GPIO_8_Pin
 80017ee:	2200      	movs	r2, #0
 80017f0:	f24c 017c 	movw	r1, #49276	; 0xc07c
 80017f4:	487f      	ldr	r0, [pc, #508]	; (80019f4 <MX_GPIO_Init+0x2e8>)
 80017f6:	f001 ffb7 	bl	8003768 <HAL_GPIO_WritePin>
                          |SPI5_NSS_Pin|GPIO_40_Pin|GPIO_39_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2102      	movs	r1, #2
 80017fe:	487e      	ldr	r0, [pc, #504]	; (80019f8 <MX_GPIO_Init+0x2ec>)
 8001800:	f001 ffb2 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_3_Pin|GPIO_2_Pin|GPIO_1_Pin|XBee1_RST_Pin
 8001804:	2200      	movs	r2, #0
 8001806:	f248 110e 	movw	r1, #33038	; 0x810e
 800180a:	487c      	ldr	r0, [pc, #496]	; (80019fc <MX_GPIO_Init+0x2f0>)
 800180c:	f001 ffac 	bl	8003768 <HAL_GPIO_WritePin>
                          |GPIO_29_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2110      	movs	r1, #16
 8001814:	4879      	ldr	r0, [pc, #484]	; (80019fc <MX_GPIO_Init+0x2f0>)
 8001816:	f001 ffa7 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_42_Pin|GPIO_45_Pin|PW1_RST_Pin|XBee2_RST_Pin
 800181a:	2200      	movs	r2, #0
 800181c:	f249 313f 	movw	r1, #37695	; 0x933f
 8001820:	4877      	ldr	r0, [pc, #476]	; (8001a00 <MX_GPIO_Init+0x2f4>)
 8001822:	f001 ffa1 	bl	8003768 <HAL_GPIO_WritePin>
                          |GPIO_35_Pin|GPIO_15_Pin|GPIO_16_Pin|GPIO_17_Pin
                          |GPIO_18_Pin|GPIO_19_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIPO_41_Pin|GPIO_38_Pin|USER_LED6_Pin|USER_LED5_Pin
 8001826:	2200      	movs	r2, #0
 8001828:	f640 11ff 	movw	r1, #2559	; 0x9ff
 800182c:	4875      	ldr	r0, [pc, #468]	; (8001a04 <MX_GPIO_Init+0x2f8>)
 800182e:	f001 ff9b 	bl	8003768 <HAL_GPIO_WritePin>
                          |USER_LED4_Pin|USER_LED3_Pin|USER_LED2_Pin|USER_LED1_Pin
                          |SPI6_NSS_Pin|PW2_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IGNITION_5_Pin|IGNITION_4_Pin|IGNITION_3_Pin|IGNITION_2_Pin
 8001832:	2200      	movs	r2, #0
 8001834:	f64f 6103 	movw	r1, #65027	; 0xfe03
 8001838:	4873      	ldr	r0, [pc, #460]	; (8001a08 <MX_GPIO_Init+0x2fc>)
 800183a:	f001 ff95 	bl	8003768 <HAL_GPIO_WritePin>
                          |IGNITION_1_Pin|GPIO_37_Pin|GPIO_36_Pin|GPIO_20_Pin
                          |GPIO_21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_34_Pin|GPIO_33_Pin|GPIO_32_Pin|GPIO_31_Pin
 800183e:	2200      	movs	r2, #0
 8001840:	f64d 710b 	movw	r1, #57099	; 0xdf0b
 8001844:	4871      	ldr	r0, [pc, #452]	; (8001a0c <MX_GPIO_Init+0x300>)
 8001846:	f001 ff8f 	bl	8003768 <HAL_GPIO_WritePin>
                          |GPIO_25_Pin|GPIO_24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_12_Pin|GPIO_7_Pin|GPIO_6_Pin
 800184a:	f64a 433f 	movw	r3, #44095	; 0xac3f
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_5_Pin|GPIO_4_Pin|GPIO_44_Pin|GPIO_43_Pin
                          |GPIO_28_Pin|GPIO_27_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4863      	ldr	r0, [pc, #396]	; (80019f0 <MX_GPIO_Init+0x2e4>)
 8001864:	f001 fdd4 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_13_Pin;
 8001868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_13_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	485c      	ldr	r0, [pc, #368]	; (80019f0 <MX_GPIO_Init+0x2e4>)
 800187e:	f001 fdc7 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GPIO_11_Pin|GPIO_10_Pin|GPIO_9_Pin|GPIO_8_Pin
 8001882:	f24c 037c 	movw	r3, #49276	; 0xc07c
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI5_NSS_Pin|GPIO_40_Pin|GPIO_39_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4856      	ldr	r0, [pc, #344]	; (80019f4 <MX_GPIO_Init+0x2e8>)
 800189c:	f001 fdb8 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 80018a0:	2302      	movs	r3, #2
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4850      	ldr	r0, [pc, #320]	; (80019f8 <MX_GPIO_Init+0x2ec>)
 80018b8:	f001 fdaa 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_3_Pin|GPIO_2_Pin|GPIO_1_Pin|SPI1_NSS_Pin
 80018bc:	f248 131e 	movw	r3, #33054	; 0x811e
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |XBee1_RST_Pin|GPIO_29_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4849      	ldr	r0, [pc, #292]	; (80019fc <MX_GPIO_Init+0x2f0>)
 80018d6:	f001 fd9b 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_42_Pin|GPIO_45_Pin|PW1_RST_Pin|XBee2_RST_Pin
 80018da:	f249 333f 	movw	r3, #37695	; 0x933f
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_35_Pin|GPIO_15_Pin|GPIO_16_Pin|GPIO_17_Pin
                          |GPIO_18_Pin|GPIO_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4843      	ldr	r0, [pc, #268]	; (8001a00 <MX_GPIO_Init+0x2f4>)
 80018f4:	f001 fd8c 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = PW1_DIO1_Pin|PW1_DIO0_Pin;
 80018f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	4839      	ldr	r0, [pc, #228]	; (80019f4 <MX_GPIO_Init+0x2e8>)
 8001910:	f001 fd7e 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = GPIPO_41_Pin|GPIO_38_Pin|USER_LED6_Pin|USER_LED5_Pin
 8001914:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
                          |USER_LED4_Pin|USER_LED3_Pin|USER_LED2_Pin|USER_LED1_Pin
                          |SPI6_NSS_Pin|PW2_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	4835      	ldr	r0, [pc, #212]	; (8001a04 <MX_GPIO_Init+0x2f8>)
 800192e:	f001 fd6f 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = IGNITION_5_Pin|IGNITION_4_Pin|IGNITION_3_Pin|IGNITION_2_Pin
 8001932:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
                          |IGNITION_1_Pin|GPIO_37_Pin|GPIO_36_Pin|GPIO_20_Pin
                          |GPIO_21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	482f      	ldr	r0, [pc, #188]	; (8001a08 <MX_GPIO_Init+0x2fc>)
 800194c:	f001 fd60 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_34_Pin|GPIO_33_Pin|GPIO_32_Pin|GPIO_31_Pin
 8001950:	f64d 730b 	movw	r3, #57099	; 0xdf0b
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_30_Pin|USER_LED8_Pin|USER_LED7_Pin|GPIO_26_Pin
                          |GPIO_25_Pin|GPIO_24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	4828      	ldr	r0, [pc, #160]	; (8001a0c <MX_GPIO_Init+0x300>)
 800196a:	f001 fd51 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197e:	2307      	movs	r3, #7
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	4820      	ldr	r0, [pc, #128]	; (8001a0c <MX_GPIO_Init+0x300>)
 800198a:	f001 fd41 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI6_DIO0_Pin;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI6_DIO0_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <MX_GPIO_Init+0x300>)
 80019a4:	f001 fd34 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = PW2_DIO0_Pin|PW2_DIO1_Pin;
 80019a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_GPIO_Init+0x2f8>)
 80019c0:	f001 fd26 	bl	8003410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2017      	movs	r0, #23
 80019ca:	f001 fc58 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ce:	2017      	movs	r0, #23
 80019d0:	f001 fc71 	bl	80032b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2028      	movs	r0, #40	; 0x28
 80019da:	f001 fc50 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019de:	2028      	movs	r0, #40	; 0x28
 80019e0:	f001 fc69 	bl	80032b6 <HAL_NVIC_EnableIRQ>

}
 80019e4:	bf00      	nop
 80019e6:	3738      	adds	r7, #56	; 0x38
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40021400 	.word	0x40021400
 80019f8:	40021c00 	.word	0x40021c00
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40021800 	.word	0x40021800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40020c00 	.word	0x40020c00

08001a10 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <MX_I2C1_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_I2C1_Init+0x7c>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a4c:	f001 febe 	bl	80037cc <HAL_I2C_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a56:	f000 f99f 	bl	8001d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a5e:	f001 ff45 	bl	80038ec <HAL_I2CEx_ConfigAnalogFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a68:	f000 f996 	bl	8001d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a70:	f001 ff87 	bl	8003982 <HAL_I2CEx_ConfigDigitalFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 f98d 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001fc 	.word	0x200001fc
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	00303d5b 	.word	0x00303d5b

08001a90 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C2_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C2_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001acc:	f001 fe7e 	bl	80037cc <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ad6:	f000 f95f 	bl	8001d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ade:	f001 ff05 	bl	80038ec <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 f956 	bl	8001d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001af0:	f001 ff47 	bl	8003982 <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001afa:	f000 f94d 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000250 	.word	0x20000250
 8001b08:	40005800 	.word	0x40005800
 8001b0c:	00303d5b 	.word	0x00303d5b

08001b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0ac      	sub	sp, #176	; 0xb0
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	2284      	movs	r2, #132	; 0x84
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f005 f9a5 	bl	8006e80 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <HAL_I2C_MspInit+0x138>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d13c      	bne.n	8001bba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fbee 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b5a:	f000 f91d 	bl	8001d98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b76:	23c0      	movs	r3, #192	; 0xc0
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7c:	2312      	movs	r3, #18
 8001b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482d      	ldr	r0, [pc, #180]	; (8001c50 <HAL_I2C_MspInit+0x140>)
 8001b9c:	f001 fc38 	bl	8003410 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bb8:	e041      	b.n	8001c3e <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0x144>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d13c      	bne.n	8001c3e <HAL_I2C_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fbab 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001be0:	f000 f8da 	bl	8001d98 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	2312      	movs	r3, #18
 8001c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c14:	2304      	movs	r3, #4
 8001c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <HAL_I2C_MspInit+0x148>)
 8001c22:	f001 fbf5 	bl	8003410 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_I2C_MspInit+0x13c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
}
 8001c3e:	bf00      	nop
 8001c40:	37b0      	adds	r7, #176	; 0xb0
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40005800 	.word	0x40005800
 8001c58:	40021400 	.word	0x40021400

08001c5c <HAL_GPIO_EXTI_Callback>:
  if (huart->Instance == huart5.Instance)
    GPS_CallBack();
}

HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
//  }
//  else if (GPIO_PIN == PW2_DIO0_Pin){
//    loraAkuRecevice();
//  	ParseAkuLoRaData();

  loraArtamRecevice();
 8001c66:	f000 fec3 	bl	80029f0 <loraArtamRecevice>
  ParseArtamLoRaData();
 8001c6a:	f000 fbd5 	bl	8002418 <ParseArtamLoRaData>
 
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7c:	f001 f9a3 	bl	8002fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c80:	f000 f82e 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c84:	f7ff fd42 	bl	800170c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c88:	f000 f88c 	bl	8001da4 <MX_SPI1_Init>
  MX_SPI6_Init();
 8001c8c:	f000 f942 	bl	8001f14 <MX_SPI6_Init>
  MX_UART7_Init();
 8001c90:	f000 fefe 	bl	8002a90 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8001c94:	f000 ff2c 	bl	8002af0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c98:	f000 ff5a 	bl	8002b50 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8001c9c:	f000 f8c0 	bl	8001e20 <MX_SPI4_Init>
  MX_I2C1_Init();
 8001ca0:	f7ff feb6 	bl	8001a10 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ca4:	f7ff fef4 	bl	8001a90 <MX_I2C2_Init>
  MX_SPI5_Init();
 8001ca8:	f000 f8f6 	bl	8001e98 <MX_SPI5_Init>
  MX_UART5_Init();
 8001cac:	f000 fec0 	bl	8002a30 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8001cb0:	f000 ff7e 	bl	8002bb0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //GPS_Init();
  initLoRa();
 8001cb4:	f000 fdc0 	bl	8002838 <initLoRa>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <main+0x64>)
 8001cbe:	f001 fd53 	bl	8003768 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001cc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cc6:	f001 f9db 	bl	8003080 <HAL_Delay>
  initLoRaT();
 8001cca:	f000 fe23 	bl	8002914 <initLoRaT>
  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	4802      	ldr	r0, [pc, #8]	; (8001cdc <main+0x64>)
 8001cd4:	f001 fd48 	bl	8003768 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <main+0x60>
 8001cda:	bf00      	nop
 8001cdc:	40021800 	.word	0x40021800

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2230      	movs	r2, #48	; 0x30
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f005 f8c6 	bl	8006e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <SystemClock_Config+0xb0>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <SystemClock_Config+0xb0>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <SystemClock_Config+0xb0>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <SystemClock_Config+0xb4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <SystemClock_Config+0xb4>)
 8001d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <SystemClock_Config+0xb4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d40:	2310      	movs	r3, #16
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 fe65 	bl	8003a1c <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001d58:	f000 f81e 	bl	8001d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 f8f4 	bl	8003f64 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d82:	f000 f809 	bl	8001d98 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <Error_Handler+0x8>
	...

08001da4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <MX_SPI1_Init+0x78>)
 8001dac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001dfe:	2208      	movs	r2, #8
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_SPI1_Init+0x74>)
 8001e04:	f002 fe84 	bl	8004b10 <HAL_SPI_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e0e:	f7ff ffc3 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200002a4 	.word	0x200002a4
 8001e1c:	40013000 	.word	0x40013000

08001e20 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e26:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <MX_SPI4_Init+0x74>)
 8001e28:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e30:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e3e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e78:	2208      	movs	r2, #8
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI4_Init+0x70>)
 8001e7e:	f002 fe47 	bl	8004b10 <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI4_Init+0x6c>
  {
    Error_Handler();
 8001e88:	f7ff ff86 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000308 	.word	0x20000308
 8001e94:	40013400 	.word	0x40013400

08001e98 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <MX_SPI5_Init+0x78>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001eb2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eb6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_SPI5_Init+0x74>)
 8001ef8:	f002 fe0a 	bl	8004b10 <HAL_SPI_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001f02:	f7ff ff49 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000036c 	.word	0x2000036c
 8001f10:	40015000 	.word	0x40015000

08001f14 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <MX_SPI6_Init+0x78>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f24:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f32:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f46:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f62:	2207      	movs	r2, #7
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f6e:	2208      	movs	r2, #8
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_SPI6_Init+0x74>)
 8001f74:	f002 fdcc 	bl	8004b10 <HAL_SPI_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001f7e:	f7ff ff0b 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200003d0 	.word	0x200003d0
 8001f8c:	40015400 	.word	0x40015400

08001f90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b090      	sub	sp, #64	; 0x40
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_SPI_MspInit+0x1b4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d130      	bne.n	8002014 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a64      	ldr	r2, [pc, #400]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8001fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a5e      	ldr	r2, [pc, #376]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fe2:	23e0      	movs	r3, #224	; 0xe0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4853      	ldr	r0, [pc, #332]	; (800214c <HAL_SPI_MspInit+0x1bc>)
 8001ffe:	f001 fa07 	bl	8003410 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2023      	movs	r0, #35	; 0x23
 8002008:	f001 f939 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800200c:	2023      	movs	r0, #35	; 0x23
 800200e:	f001 f952 	bl	80032b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8002012:	e092      	b.n	800213a <HAL_SPI_MspInit+0x1aa>
  else if(spiHandle->Instance==SPI4)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_SPI_MspInit+0x1c0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d128      	bne.n	8002070 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002036:	4b44      	ldr	r3, [pc, #272]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a43      	ldr	r2, [pc, #268]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800204e:	2374      	movs	r3, #116	; 0x74
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800205e:	2305      	movs	r3, #5
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002066:	4619      	mov	r1, r3
 8002068:	483a      	ldr	r0, [pc, #232]	; (8002154 <HAL_SPI_MspInit+0x1c4>)
 800206a:	f001 f9d1 	bl	8003410 <HAL_GPIO_Init>
}
 800206e:	e064      	b.n	800213a <HAL_SPI_MspInit+0x1aa>
  else if(spiHandle->Instance==SPI5)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_SPI_MspInit+0x1c8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d129      	bne.n	80020ce <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 8002098:	f043 0320 	orr.w	r3, r3, #32
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80020aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80020bc:	2305      	movs	r3, #5
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c4:	4619      	mov	r1, r3
 80020c6:	4825      	ldr	r0, [pc, #148]	; (800215c <HAL_SPI_MspInit+0x1cc>)
 80020c8:	f001 f9a2 	bl	8003410 <HAL_GPIO_Init>
}
 80020cc:	e035      	b.n	800213a <HAL_SPI_MspInit+0x1aa>
  else if(spiHandle->Instance==SPI6)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_SPI_MspInit+0x1d0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d130      	bne.n	800213a <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e2:	6453      	str	r3, [r2, #68]	; 0x44
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fa:	6313      	str	r3, [r2, #48]	; 0x30
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_SPI_MspInit+0x1b8>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002108:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800211a:	2305      	movs	r3, #5
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002122:	4619      	mov	r1, r3
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <HAL_SPI_MspInit+0x1d4>)
 8002126:	f001 f973 	bl	8003410 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2056      	movs	r0, #86	; 0x56
 8002130:	f001 f8a5 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8002134:	2056      	movs	r0, #86	; 0x56
 8002136:	f001 f8be 	bl	80032b6 <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3740      	adds	r7, #64	; 0x40
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013000 	.word	0x40013000
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000
 8002150:	40013400 	.word	0x40013400
 8002154:	40021000 	.word	0x40021000
 8002158:	40015000 	.word	0x40015000
 800215c:	40021400 	.word	0x40021400
 8002160:	40015400 	.word	0x40015400
 8002164:	40021800 	.word	0x40021800

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_MspInit+0x44>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_MspInit+0x44>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_MspInit+0x44>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_MspInit+0x44>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_MspInit+0x44>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_MspInit+0x44>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 ff20 	bl	8003040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI6_DIO0_Pin);
 8002208:	2080      	movs	r0, #128	; 0x80
 800220a:	f001 fac7 	bl	800379c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PW2_DIO0_Pin);
 800220e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002212:	f001 fac3 	bl	800379c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <SPI1_IRQHandler+0x10>)
 8002222:	f003 f9d1 	bl	80055c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200002a4 	.word	0x200002a4

08002230 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PW2_DIO1_Pin);
 8002234:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002238:	f001 fab0 	bl	800379c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PW1_DIO1_Pin);
 800223c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002240:	f001 faac 	bl	800379c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PW1_DIO0_Pin);
 8002244:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002248:	f001 faa8 	bl	800379c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <UART5_IRQHandler+0x10>)
 8002256:	f003 fd95 	bl	8005d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200006d4 	.word	0x200006d4

08002264 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <UART7_IRQHandler+0x10>)
 800226a:	f003 fd8b 	bl	8005d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000075c 	.word	0x2000075c

08002278 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <SPI6_IRQHandler+0x10>)
 800227e:	f003 f9a3 	bl	80055c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200003d0 	.word	0x200003d0

0800228c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_kill>:

int _kill(int pid, int sig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a6:	f004 fdc1 	bl	8006e2c <__errno>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2216      	movs	r2, #22
 80022ae:	601a      	str	r2, [r3, #0]
  return -1;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_exit>:

void _exit (int status)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffe7 	bl	800229c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ce:	e7fe      	b.n	80022ce <_exit+0x12>

080022d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e00a      	b.n	80022f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e2:	f3af 8000 	nop.w
 80022e6:	4601      	mov	r1, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf0      	blt.n	80022e2 <_read+0x12>
  }

  return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e009      	b.n	8002330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf1      	blt.n	800231c <_write+0x12>
  }
  return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_close>:

int _close(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236a:	605a      	str	r2, [r3, #4]
  return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_isatty>:

int _isatty(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f004 fd26 	bl	8006e2c <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20050000 	.word	0x20050000
 800240c:	00000400 	.word	0x00000400
 8002410:	20000434 	.word	0x20000434
 8002414:	20000990 	.word	0x20000990

08002418 <ParseArtamLoRaData>:

u16_to_u8 converter16;
float_to_u8 converter32;

void ParseArtamLoRaData()
{
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	b0b3      	sub	sp, #204	; 0xcc
 800241e:	af1c      	add	r7, sp, #112	; 0x70

    crc = CRCCalculator(LoraArtamReceivePacket, 39);
 8002420:	2127      	movs	r1, #39	; 0x27
 8002422:	489b      	ldr	r0, [pc, #620]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002424:	f7ff f937 	bl	8001696 <CRCCalculator>
 8002428:	4603      	mov	r3, r0
 800242a:	b21a      	sxth	r2, r3
 800242c:	4b99      	ldr	r3, [pc, #612]	; (8002694 <ParseArtamLoRaData+0x27c>)
 800242e:	801a      	strh	r2, [r3, #0]
    converter16.u8[0] = LoraArtamReceivePacket[39];
 8002430:	4b97      	ldr	r3, [pc, #604]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002432:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002436:	4b98      	ldr	r3, [pc, #608]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002438:	701a      	strb	r2, [r3, #0]
    converter16.u8[1] = LoraArtamReceivePacket[40];
 800243a:	4b95      	ldr	r3, [pc, #596]	; (8002690 <ParseArtamLoRaData+0x278>)
 800243c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002440:	4b95      	ldr	r3, [pc, #596]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002442:	705a      	strb	r2, [r3, #1]

    if (crc == converter16.u16)
 8002444:	4b93      	ldr	r3, [pc, #588]	; (8002694 <ParseArtamLoRaData+0x27c>)
 8002446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244a:	461a      	mov	r2, r3
 800244c:	4b92      	ldr	r3, [pc, #584]	; (8002698 <ParseArtamLoRaData+0x280>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 81d5 	bne.w	8002800 <ParseArtamLoRaData+0x3e8>
    {
        avi_status = LoraArtamReceivePacket[0];
 8002456:	4b8e      	ldr	r3, [pc, #568]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	4b90      	ldr	r3, [pc, #576]	; (800269c <ParseArtamLoRaData+0x284>)
 800245c:	701a      	strb	r2, [r3, #0]
        flight_status = LoraArtamReceivePacket[1];
 800245e:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002460:	785a      	ldrb	r2, [r3, #1]
 8002462:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <ParseArtamLoRaData+0x288>)
 8002464:	701a      	strb	r2, [r3, #0]

        converter16.u8[0] = LoraArtamReceivePacket[2];
 8002466:	4b8a      	ldr	r3, [pc, #552]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002468:	789a      	ldrb	r2, [r3, #2]
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <ParseArtamLoRaData+0x280>)
 800246c:	701a      	strb	r2, [r3, #0]
        converter16.u8[1] = LoraArtamReceivePacket[3];
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002470:	78da      	ldrb	r2, [r3, #3]
 8002472:	4b89      	ldr	r3, [pc, #548]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002474:	705a      	strb	r2, [r3, #1]
        packet_number = converter16.u16;
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	4b8a      	ldr	r3, [pc, #552]	; (80026a4 <ParseArtamLoRaData+0x28c>)
 800247c:	801a      	strh	r2, [r3, #0]

        bat_level = LoraArtamReceivePacket[4];
 800247e:	4b84      	ldr	r3, [pc, #528]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002480:	791a      	ldrb	r2, [r3, #4]
 8002482:	4b89      	ldr	r3, [pc, #548]	; (80026a8 <ParseArtamLoRaData+0x290>)
 8002484:	701a      	strb	r2, [r3, #0]

        converter32.u8[0] = LoraArtamReceivePacket[5];
 8002486:	4b82      	ldr	r3, [pc, #520]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002488:	795a      	ldrb	r2, [r3, #5]
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <ParseArtamLoRaData+0x294>)
 800248c:	701a      	strb	r2, [r3, #0]
        converter32.u8[1] = LoraArtamReceivePacket[6];
 800248e:	4b80      	ldr	r3, [pc, #512]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002490:	799a      	ldrb	r2, [r3, #6]
 8002492:	4b86      	ldr	r3, [pc, #536]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002494:	705a      	strb	r2, [r3, #1]
        converter32.u8[2] = LoraArtamReceivePacket[7];
 8002496:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002498:	79da      	ldrb	r2, [r3, #7]
 800249a:	4b84      	ldr	r3, [pc, #528]	; (80026ac <ParseArtamLoRaData+0x294>)
 800249c:	709a      	strb	r2, [r3, #2]
        converter32.u8[3] = LoraArtamReceivePacket[8];
 800249e:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <ParseArtamLoRaData+0x278>)
 80024a0:	7a1a      	ldrb	r2, [r3, #8]
 80024a2:	4b82      	ldr	r3, [pc, #520]	; (80026ac <ParseArtamLoRaData+0x294>)
 80024a4:	70da      	strb	r2, [r3, #3]
        gps.utc_time = (float)converter32.u32;
 80024a6:	4b81      	ldr	r3, [pc, #516]	; (80026ac <ParseArtamLoRaData+0x294>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a81      	ldr	r2, [pc, #516]	; (80026b0 <ParseArtamLoRaData+0x298>)
 80024ac:	6113      	str	r3, [r2, #16]

        converter16.i16 = LoraArtamReceivePacket[9];
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <ParseArtamLoRaData+0x278>)
 80024b0:	7a5b      	ldrb	r3, [r3, #9]
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	4b78      	ldr	r3, [pc, #480]	; (8002698 <ParseArtamLoRaData+0x280>)
 80024b6:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[10];
 80024b8:	4b75      	ldr	r3, [pc, #468]	; (8002690 <ParseArtamLoRaData+0x278>)
 80024ba:	7a9b      	ldrb	r3, [r3, #10]
 80024bc:	b21a      	sxth	r2, r3
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <ParseArtamLoRaData+0x280>)
 80024c0:	801a      	strh	r2, [r3, #0]
        altitude.altitude = (float)converter16.i16;
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <ParseArtamLoRaData+0x280>)
 80024c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <ParseArtamLoRaData+0x29c>)
 80024d2:	edc3 7a03 	vstr	s15, [r3, #12]

        converter16.i16 = LoraArtamReceivePacket[11];
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <ParseArtamLoRaData+0x278>)
 80024d8:	7adb      	ldrb	r3, [r3, #11]
 80024da:	b21a      	sxth	r2, r3
 80024dc:	4b6e      	ldr	r3, [pc, #440]	; (8002698 <ParseArtamLoRaData+0x280>)
 80024de:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[12];
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <ParseArtamLoRaData+0x278>)
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <ParseArtamLoRaData+0x280>)
 80024e8:	801a      	strh	r2, [r3, #0]
        altitude.maxAltitude = (float)converter16.i16;
 80024ea:	4b6b      	ldr	r3, [pc, #428]	; (8002698 <ParseArtamLoRaData+0x280>)
 80024ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f8:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <ParseArtamLoRaData+0x29c>)
 80024fa:	edc3 7a06 	vstr	s15, [r3, #24]

        converter16.i16 = LoraArtamReceivePacket[13];
 80024fe:	4b64      	ldr	r3, [pc, #400]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002500:	7b5b      	ldrb	r3, [r3, #13]
 8002502:	b21a      	sxth	r2, r3
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002506:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[14];
 8002508:	4b61      	ldr	r3, [pc, #388]	; (8002690 <ParseArtamLoRaData+0x278>)
 800250a:	7b9b      	ldrb	r3, [r3, #14]
 800250c:	b21a      	sxth	r2, r3
 800250e:	4b62      	ldr	r3, [pc, #392]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002510:	801a      	strh	r2, [r3, #0]
        velocity.trueVelocity = (float)converter16.i16;
 8002512:	4b61      	ldr	r3, [pc, #388]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002520:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <ParseArtamLoRaData+0x2a0>)
 8002522:	edc3 7a03 	vstr	s15, [r3, #12]

        converter16.i16 = LoraArtamReceivePacket[15];
 8002526:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002528:	7bdb      	ldrb	r3, [r3, #15]
 800252a:	b21a      	sxth	r2, r3
 800252c:	4b5a      	ldr	r3, [pc, #360]	; (8002698 <ParseArtamLoRaData+0x280>)
 800252e:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[16];
 8002530:	4b57      	ldr	r3, [pc, #348]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002532:	7c1b      	ldrb	r3, [r3, #16]
 8002534:	b21a      	sxth	r2, r3
 8002536:	4b58      	ldr	r3, [pc, #352]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002538:	801a      	strh	r2, [r3, #0]
        velocity.maxTrueVelocity = (float)converter16.i16;
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <ParseArtamLoRaData+0x280>)
 800253c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002548:	4b5b      	ldr	r3, [pc, #364]	; (80026b8 <ParseArtamLoRaData+0x2a0>)
 800254a:	edc3 7a06 	vstr	s15, [r3, #24]

        converter32.u8[0] = LoraArtamReceivePacket[17];
 800254e:	4b50      	ldr	r3, [pc, #320]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002550:	7c5a      	ldrb	r2, [r3, #17]
 8002552:	4b56      	ldr	r3, [pc, #344]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002554:	701a      	strb	r2, [r3, #0]
        converter32.u8[1] = LoraArtamReceivePacket[18];
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002558:	7c9a      	ldrb	r2, [r3, #18]
 800255a:	4b54      	ldr	r3, [pc, #336]	; (80026ac <ParseArtamLoRaData+0x294>)
 800255c:	705a      	strb	r2, [r3, #1]
        converter32.u8[2] = LoraArtamReceivePacket[19];
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002560:	7cda      	ldrb	r2, [r3, #19]
 8002562:	4b52      	ldr	r3, [pc, #328]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002564:	709a      	strb	r2, [r3, #2]
        converter32.u8[3] = LoraArtamReceivePacket[20];
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002568:	7d1a      	ldrb	r2, [r3, #20]
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <ParseArtamLoRaData+0x294>)
 800256c:	70da      	strb	r2, [r3, #3]
        accelleration = converter32.u32;
 800256e:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a52      	ldr	r2, [pc, #328]	; (80026bc <ParseArtamLoRaData+0x2a4>)
 8002574:	6013      	str	r3, [r2, #0]

        converter32.u8[0] = LoraArtamReceivePacket[21];
 8002576:	4b46      	ldr	r3, [pc, #280]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002578:	7d5a      	ldrb	r2, [r3, #21]
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <ParseArtamLoRaData+0x294>)
 800257c:	701a      	strb	r2, [r3, #0]
        converter32.u8[1] = LoraArtamReceivePacket[22];
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002580:	7d9a      	ldrb	r2, [r3, #22]
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002584:	705a      	strb	r2, [r3, #1]
        converter32.u8[2] = LoraArtamReceivePacket[23];
 8002586:	4b42      	ldr	r3, [pc, #264]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002588:	7dda      	ldrb	r2, [r3, #23]
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <ParseArtamLoRaData+0x294>)
 800258c:	709a      	strb	r2, [r3, #2]
        converter32.u8[3] = LoraArtamReceivePacket[24];
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002590:	7e1a      	ldrb	r2, [r3, #24]
 8002592:	4b46      	ldr	r3, [pc, #280]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002594:	70da      	strb	r2, [r3, #3]
        maxAccelleration = converter32.u32;
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <ParseArtamLoRaData+0x294>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a49      	ldr	r2, [pc, #292]	; (80026c0 <ParseArtamLoRaData+0x2a8>)
 800259c:	6013      	str	r3, [r2, #0]

        converter32.u8[0] = LoraArtamReceivePacket[25];
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025a0:	7e5a      	ldrb	r2, [r3, #25]
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025a4:	701a      	strb	r2, [r3, #0]
        converter32.u8[1] = LoraArtamReceivePacket[26];
 80025a6:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025a8:	7e9a      	ldrb	r2, [r3, #26]
 80025aa:	4b40      	ldr	r3, [pc, #256]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025ac:	705a      	strb	r2, [r3, #1]
        converter32.u8[2] = LoraArtamReceivePacket[27];
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025b0:	7eda      	ldrb	r2, [r3, #27]
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025b4:	709a      	strb	r2, [r3, #2]
        converter32.u8[3] = LoraArtamReceivePacket[28];
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025b8:	7f1a      	ldrb	r2, [r3, #28]
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025bc:	70da      	strb	r2, [r3, #3]
        gps.latitude = converter32.u32;
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <ParseArtamLoRaData+0x298>)
 80025c4:	6013      	str	r3, [r2, #0]

        converter32.u8[0] = LoraArtamReceivePacket[29];
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025c8:	7f5a      	ldrb	r2, [r3, #29]
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025cc:	701a      	strb	r2, [r3, #0]
        converter32.u8[1] = LoraArtamReceivePacket[30];
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025d0:	7f9a      	ldrb	r2, [r3, #30]
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025d4:	705a      	strb	r2, [r3, #1]
        converter32.u8[2] = LoraArtamReceivePacket[31];
 80025d6:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025d8:	7fda      	ldrb	r2, [r3, #31]
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025dc:	709a      	strb	r2, [r3, #2]
        converter32.u8[3] = LoraArtamReceivePacket[32];
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025e0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025e6:	70da      	strb	r2, [r3, #3]
        gps.longtitude = converter32.u32;
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <ParseArtamLoRaData+0x294>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <ParseArtamLoRaData+0x298>)
 80025ee:	6053      	str	r3, [r2, #4]

        converter16.i16 = LoraArtamReceivePacket[33];
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f6:	b21a      	sxth	r2, r3
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <ParseArtamLoRaData+0x280>)
 80025fa:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[34];
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <ParseArtamLoRaData+0x278>)
 80025fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002602:	b21a      	sxth	r2, r3
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002606:	801a      	strh	r2, [r3, #0]
        accel.x = (float)converter16.i16;
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <ParseArtamLoRaData+0x280>)
 800260a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <ParseArtamLoRaData+0x2ac>)
 8002618:	edc3 7a00 	vstr	s15, [r3]

        converter16.i16 = LoraArtamReceivePacket[35];
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <ParseArtamLoRaData+0x278>)
 800261e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002622:	b21a      	sxth	r2, r3
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002626:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[36];
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <ParseArtamLoRaData+0x278>)
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262e:	b21a      	sxth	r2, r3
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002632:	801a      	strh	r2, [r3, #0]
        accel.y = (float)converter16.i16;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <ParseArtamLoRaData+0x2ac>)
 8002644:	edc3 7a01 	vstr	s15, [r3, #4]

        converter16.i16 = LoraArtamReceivePacket[37];
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <ParseArtamLoRaData+0x278>)
 800264a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800264e:	b21a      	sxth	r2, r3
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002652:	801a      	strh	r2, [r3, #0]
        converter16.i16 = LoraArtamReceivePacket[38];
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <ParseArtamLoRaData+0x278>)
 8002656:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800265a:	b21a      	sxth	r2, r3
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <ParseArtamLoRaData+0x280>)
 800265e:	801a      	strh	r2, [r3, #0]
        accel.z = (float)converter16.i16;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <ParseArtamLoRaData+0x280>)
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <ParseArtamLoRaData+0x2ac>)
 8002670:	edc3 7a02 	vstr	s15, [r3, #8]


        sprintf(ArUART_Buffer, "%d,%d,%d,%d,%d,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", LoRa_getRSSI(&myLoRa),HAL_GetTick(), avi_status, flight_status, packet_number, bat_level, gps.utc_time, altitude.altitude, altitude.maxAltitude, velocity.trueVelocity, velocity.maxTrueVelocity, accelleration, maxAccelleration, gps.latitude, gps.longtitude, accel.x, accel.y, accel.z);
 8002674:	4814      	ldr	r0, [pc, #80]	; (80026c8 <ParseArtamLoRaData+0x2b0>)
 8002676:	f7fe ff58 	bl	800152a <LoRa_getRSSI>
 800267a:	4606      	mov	r6, r0
 800267c:	f000 fcf4 	bl	8003068 <HAL_GetTick>
 8002680:	6578      	str	r0, [r7, #84]	; 0x54
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <ParseArtamLoRaData+0x284>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <ParseArtamLoRaData+0x288>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268e:	e01d      	b.n	80026cc <ParseArtamLoRaData+0x2b4>
 8002690:	20000438 	.word	0x20000438
 8002694:	200005ea 	.word	0x200005ea
 8002698:	200006cc 	.word	0x200006cc
 800269c:	200005ec 	.word	0x200005ec
 80026a0:	200005ed 	.word	0x200005ed
 80026a4:	200005ee 	.word	0x200005ee
 80026a8:	200005f0 	.word	0x200005f0
 80026ac:	200006d0 	.word	0x200006d0
 80026b0:	2000065c 	.word	0x2000065c
 80026b4:	200005f4 	.word	0x200005f4
 80026b8:	20000614 	.word	0x20000614
 80026bc:	20000654 	.word	0x20000654
 80026c0:	20000658 	.word	0x20000658
 80026c4:	20000630 	.word	0x20000630
 80026c8:	20000674 	.word	0x20000674
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <ParseArtamLoRaData+0x3f4>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d2:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <ParseArtamLoRaData+0x3f8>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
 80026d8:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <ParseArtamLoRaData+0x3fc>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd ff53 	bl	8000588 <__aeabi_f2d>
 80026e2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80026e6:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <ParseArtamLoRaData+0x400>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff4c 	bl	8000588 <__aeabi_f2d>
 80026f0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <ParseArtamLoRaData+0x400>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd ff45 	bl	8000588 <__aeabi_f2d>
 80026fe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002702:	4b46      	ldr	r3, [pc, #280]	; (800281c <ParseArtamLoRaData+0x404>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd ff3e 	bl	8000588 <__aeabi_f2d>
 800270c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002710:	4b42      	ldr	r3, [pc, #264]	; (800281c <ParseArtamLoRaData+0x404>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff37 	bl	8000588 <__aeabi_f2d>
 800271a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <ParseArtamLoRaData+0x408>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd ff30 	bl	8000588 <__aeabi_f2d>
 8002728:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800272c:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <ParseArtamLoRaData+0x40c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff29 	bl	8000588 <__aeabi_f2d>
 8002736:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <ParseArtamLoRaData+0x3fc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff22 	bl	8000588 <__aeabi_f2d>
 8002744:	e9c7 0100 	strd	r0, r1, [r7]
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <ParseArtamLoRaData+0x3fc>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd ff1b 	bl	8000588 <__aeabi_f2d>
 8002752:	4682      	mov	sl, r0
 8002754:	468b      	mov	fp, r1
 8002756:	4b34      	ldr	r3, [pc, #208]	; (8002828 <ParseArtamLoRaData+0x410>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd ff14 	bl	8000588 <__aeabi_f2d>
 8002760:	4680      	mov	r8, r0
 8002762:	4689      	mov	r9, r1
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <ParseArtamLoRaData+0x410>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd ff0d 	bl	8000588 <__aeabi_f2d>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <ParseArtamLoRaData+0x410>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd ff06 	bl	8000588 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002784:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8002788:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 800278c:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8002790:	ed97 7b00 	vldr	d7, [r7]
 8002794:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002798:	ed97 7b02 	vldr	d7, [r7, #8]
 800279c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80027a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80027a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80027a8:	ed97 7b06 	vldr	d7, [r7, #24]
 80027ac:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80027b0:	ed97 7b08 	vldr	d7, [r7, #32]
 80027b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80027b8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80027bc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80027c0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80027c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80027c8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80027cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80027d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027d2:	9203      	str	r2, [sp, #12]
 80027d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027d6:	9202      	str	r2, [sp, #8]
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80027de:	9200      	str	r2, [sp, #0]
 80027e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e2:	4632      	mov	r2, r6
 80027e4:	4911      	ldr	r1, [pc, #68]	; (800282c <ParseArtamLoRaData+0x414>)
 80027e6:	4812      	ldr	r0, [pc, #72]	; (8002830 <ParseArtamLoRaData+0x418>)
 80027e8:	f005 f9d2 	bl	8007b90 <siprintf>
        HAL_UART_Transmit_IT(&huart7, ArUART_Buffer, strlen(ArUART_Buffer));
 80027ec:	4810      	ldr	r0, [pc, #64]	; (8002830 <ParseArtamLoRaData+0x418>)
 80027ee:	f7fd fd0f 	bl	8000210 <strlen>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	490d      	ldr	r1, [pc, #52]	; (8002830 <ParseArtamLoRaData+0x418>)
 80027fa:	480e      	ldr	r0, [pc, #56]	; (8002834 <ParseArtamLoRaData+0x41c>)
 80027fc:	f003 fa64 	bl	8005cc8 <HAL_UART_Transmit_IT>
//        //     artamErrorLed();
//        sprintf(ArUART_Buffer, "ARTAM crc error! \n");
//
////    HAL_UART_Transmit_IT(&huart7, ArUART_Buffer, strlen(ArUART_Buffer));
//    //    }
}
 8002800:	bf00      	nop
 8002802:	375c      	adds	r7, #92	; 0x5c
 8002804:	46bd      	mov	sp, r7
 8002806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800280a:	bf00      	nop
 800280c:	200005ee 	.word	0x200005ee
 8002810:	200005f0 	.word	0x200005f0
 8002814:	2000065c 	.word	0x2000065c
 8002818:	200005f4 	.word	0x200005f4
 800281c:	20000614 	.word	0x20000614
 8002820:	20000654 	.word	0x20000654
 8002824:	20000658 	.word	0x20000658
 8002828:	20000630 	.word	0x20000630
 800282c:	0800b788 	.word	0x0800b788
 8002830:	20000464 	.word	0x20000464
 8002834:	2000075c 	.word	0x2000075c

08002838 <initLoRa>:
        //        HAL_UART_Transmit(&huart7, AkUART_Buffer, strlen(AkUART_Buffer), 250);
    }
}

void initLoRa()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
    HAL_Delay(25);
 800283e:	2019      	movs	r0, #25
 8002840:	f000 fc1e 	bl	8003080 <HAL_Delay>

    myLoRa.CS_port = SPI6_NSS_GPIO_Port;
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <initLoRa+0xc8>)
 8002846:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <initLoRa+0xcc>)
 8002848:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = SPI6_NSS_Pin;
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <initLoRa+0xc8>)
 800284c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002850:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = PW2_RST_GPIO_Port;
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <initLoRa+0xc8>)
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <initLoRa+0xcc>)
 8002856:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = PW2_RST_Pin;
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <initLoRa+0xc8>)
 800285a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285e:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = PW2_DIO0_GPIO_Port;
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <initLoRa+0xc8>)
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <initLoRa+0xcc>)
 8002864:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = PW2_DIO0_Pin;
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <initLoRa+0xc8>)
 8002868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286c:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi6;
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <initLoRa+0xc8>)
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <initLoRa+0xd0>)
 8002872:	619a      	str	r2, [r3, #24]

    HAL_Delay(25);
 8002874:	2019      	movs	r0, #25
 8002876:	f000 fc03 	bl	8003080 <HAL_Delay>

    myLoRa.frequency = 440.000;         // default = 433 MHz
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <initLoRa+0xc8>)
 800287c:	4a23      	ldr	r2, [pc, #140]	; (800290c <initLoRa+0xd4>)
 800287e:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;       // default = SF_7
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <initLoRa+0xc8>)
 8002882:	2207      	movs	r2, #7
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myLoRa.bandWidth = BW_500KHz;       // default = BW_125KHz
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <initLoRa+0xc8>)
 800288a:	2209      	movs	r2, #9
 800288c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myLoRa.crcRate = CR_4_5;            // default = CR_4_5
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <initLoRa+0xc8>)
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    myLoRa.power = POWER_20db;          // default = 20db
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <initLoRa+0xc8>)
 800289a:	22ff      	movs	r2, #255	; 0xff
 800289c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    myLoRa.overCurrentProtection = 100; // default = 100 mA
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <initLoRa+0xc8>)
 80028a2:	2264      	movs	r2, #100	; 0x64
 80028a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    myLoRa.preamble = 8;                // default = 8;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <initLoRa+0xc8>)
 80028aa:	2208      	movs	r2, #8
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28

    HAL_Delay(25);
 80028ae:	2019      	movs	r0, #25
 80028b0:	f000 fbe6 	bl	8003080 <HAL_Delay>

    HAL_GPIO_WritePin(PW2_RST_GPIO_Port, PW2_RST_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ba:	4812      	ldr	r0, [pc, #72]	; (8002904 <initLoRa+0xcc>)
 80028bc:	f000 ff54 	bl	8003768 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI6_NSS_GPIO_Port, SPI6_NSS_Pin, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c6:	480f      	ldr	r0, [pc, #60]	; (8002904 <initLoRa+0xcc>)
 80028c8:	f000 ff4e 	bl	8003768 <HAL_GPIO_WritePin>

    uint16_t LoRa_status = LoRa_init(&myLoRa);
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <initLoRa+0xc8>)
 80028ce:	f7fe fe3c 	bl	800154a <LoRa_init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]

    HAL_Delay(25);
 80028d6:	2019      	movs	r0, #25
 80028d8:	f000 fbd2 	bl	8003080 <HAL_Delay>

    if (LoRa_status != LORA_OK)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2bc8      	cmp	r3, #200	; 0xc8
 80028e0:	d004      	beq.n	80028ec <initLoRa+0xb4>
        HAL_GPIO_WritePin(GPIO_7_GPIO_Port, GPIO_PIN_7, GPIO_PIN_SET);
 80028e2:	2201      	movs	r2, #1
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	480a      	ldr	r0, [pc, #40]	; (8002910 <initLoRa+0xd8>)
 80028e8:	f000 ff3e 	bl	8003768 <HAL_GPIO_WritePin>

    LoRa_startReceiving(&myLoRa);
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <initLoRa+0xc8>)
 80028ee:	f7fe fdb0 	bl	8001452 <LoRa_startReceiving>

    HAL_Delay(25);
 80028f2:	2019      	movs	r0, #25
 80028f4:	f000 fbc4 	bl	8003080 <HAL_Delay>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000674 	.word	0x20000674
 8002904:	40021800 	.word	0x40021800
 8002908:	200003d0 	.word	0x200003d0
 800290c:	43dc0000 	.word	0x43dc0000
 8002910:	40020800 	.word	0x40020800

08002914 <initLoRaT>:

void initLoRaT()
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
    HAL_Delay(25);
 800291a:	2019      	movs	r0, #25
 800291c:	f000 fbb0 	bl	8003080 <HAL_Delay>

    myLoRaT.CS_port = SPI1_NSS_GPIO_Port;
 8002920:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <initLoRaT+0xc0>)
 8002922:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <initLoRaT+0xc4>)
 8002924:	601a      	str	r2, [r3, #0]
    myLoRaT.CS_pin = SPI1_NSS_Pin;
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <initLoRaT+0xc0>)
 8002928:	2210      	movs	r2, #16
 800292a:	809a      	strh	r2, [r3, #4]
    myLoRaT.reset_port = PW1_RST_GPIO_Port;
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <initLoRaT+0xc0>)
 800292e:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <initLoRaT+0xc8>)
 8002930:	609a      	str	r2, [r3, #8]
    myLoRaT.reset_pin = PW1_RST_Pin;
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <initLoRaT+0xc0>)
 8002934:	2204      	movs	r2, #4
 8002936:	819a      	strh	r2, [r3, #12]
    myLoRaT.DIO0_port = PW1_DIO0_GPIO_Port;
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <initLoRaT+0xc0>)
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <initLoRaT+0xcc>)
 800293c:	611a      	str	r2, [r3, #16]
    myLoRaT.DIO0_pin = PW1_DIO0_Pin;
 800293e:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <initLoRaT+0xc0>)
 8002940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002944:	829a      	strh	r2, [r3, #20]
    myLoRaT.hSPIx = &hspi1;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <initLoRaT+0xc0>)
 8002948:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <initLoRaT+0xd0>)
 800294a:	619a      	str	r2, [r3, #24]

    HAL_Delay(25);
 800294c:	2019      	movs	r0, #25
 800294e:	f000 fb97 	bl	8003080 <HAL_Delay>

    myLoRaT.frequency = 440.000;         // default = 433 MHz
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <initLoRaT+0xc0>)
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <initLoRaT+0xd4>)
 8002956:	621a      	str	r2, [r3, #32]
    myLoRaT.spredingFactor = SF_7;       // default = SF_7
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <initLoRaT+0xc0>)
 800295a:	2207      	movs	r2, #7
 800295c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myLoRaT.bandWidth = BW_500KHz;       // default = BW_125KHz
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <initLoRaT+0xc0>)
 8002962:	2209      	movs	r2, #9
 8002964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myLoRaT.crcRate = CR_4_5;            // default = CR_4_5
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <initLoRaT+0xc0>)
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    myLoRaT.power = POWER_20db;          // default = 20db
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <initLoRaT+0xc0>)
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    myLoRaT.overCurrentProtection = 250; // default = 100 mA
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <initLoRaT+0xc0>)
 800297a:	22fa      	movs	r2, #250	; 0xfa
 800297c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    myLoRaT.preamble = 8;                // default = 8;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <initLoRaT+0xc0>)
 8002982:	2208      	movs	r2, #8
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28

    HAL_Delay(25);
 8002986:	2019      	movs	r0, #25
 8002988:	f000 fb7a 	bl	8003080 <HAL_Delay>

    HAL_GPIO_WritePin(PW1_RST_GPIO_Port, PW1_RST_Pin, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	2104      	movs	r1, #4
 8002990:	4812      	ldr	r0, [pc, #72]	; (80029dc <initLoRaT+0xc8>)
 8002992:	f000 fee9 	bl	8003768 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	2110      	movs	r1, #16
 800299a:	480f      	ldr	r0, [pc, #60]	; (80029d8 <initLoRaT+0xc4>)
 800299c:	f000 fee4 	bl	8003768 <HAL_GPIO_WritePin>

    uint16_t LoRa_status = LoRa_init(&myLoRaT);
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <initLoRaT+0xc0>)
 80029a2:	f7fe fdd2 	bl	800154a <LoRa_init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]

    HAL_Delay(25);
 80029aa:	2019      	movs	r0, #25
 80029ac:	f000 fb68 	bl	8003080 <HAL_Delay>

    if (LoRa_status != LORA_OK)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2bc8      	cmp	r3, #200	; 0xc8
 80029b4:	d004      	beq.n	80029c0 <initLoRaT+0xac>
        HAL_GPIO_WritePin(GPIO_7_GPIO_Port, GPIO_PIN_7, GPIO_PIN_SET);
 80029b6:	2201      	movs	r2, #1
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	480c      	ldr	r0, [pc, #48]	; (80029ec <initLoRaT+0xd8>)
 80029bc:	f000 fed4 	bl	8003768 <HAL_GPIO_WritePin>

    LoRa_startReceiving(&myLoRaT);
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <initLoRaT+0xc0>)
 80029c2:	f7fe fd46 	bl	8001452 <LoRa_startReceiving>

    HAL_Delay(25);
 80029c6:	2019      	movs	r0, #25
 80029c8:	f000 fb5a 	bl	8003080 <HAL_Delay>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200006a0 	.word	0x200006a0
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40021400 	.word	0x40021400
 80029e4:	200002a4 	.word	0x200002a4
 80029e8:	43dc0000 	.word	0x43dc0000
 80029ec:	40020800 	.word	0x40020800

080029f0 <loraArtamRecevice>:

void loraArtamRecevice()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
    LoRa_receive(&myLoRa, LoraArtamReceivePacket, sizeof(LoraArtamReceivePacket));
 80029f4:	2229      	movs	r2, #41	; 0x29
 80029f6:	4903      	ldr	r1, [pc, #12]	; (8002a04 <loraArtamRecevice+0x14>)
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <loraArtamRecevice+0x18>)
 80029fa:	f7fe fd36 	bl	800146a <LoRa_receive>
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000438 	.word	0x20000438
 8002a08:	20000674 	.word	0x20000674

08002a0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <MX_UART5_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <MX_UART5_Init+0x5c>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <MX_UART5_Init+0x58>)
 8002a74:	f003 f8da 	bl	8005c2c <HAL_UART_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002a7e:	f7ff f98b 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200006d4 	.word	0x200006d4
 8002a8c:	40005000 	.word	0x40005000

08002a90 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <MX_UART7_Init+0x5c>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002aa0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <MX_UART7_Init+0x58>)
 8002ad4:	f003 f8aa 	bl	8005c2c <HAL_UART_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002ade:	f7ff f95b 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000075c 	.word	0x2000075c
 8002aec:	40007800 	.word	0x40007800

08002af0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <MX_USART1_UART_Init+0x5c>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b1c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b34:	4804      	ldr	r0, [pc, #16]	; (8002b48 <MX_USART1_UART_Init+0x58>)
 8002b36:	f003 f879 	bl	8005c2c <HAL_UART_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002b40:	f7ff f92a 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200007e4 	.word	0x200007e4
 8002b4c:	40011000 	.word	0x40011000

08002b50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b56:	4a15      	ldr	r2, [pc, #84]	; (8002bac <MX_USART3_UART_Init+0x5c>)
 8002b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b76:	220c      	movs	r2, #12
 8002b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b80:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_USART3_UART_Init+0x58>)
 8002b96:	f003 f849 	bl	8005c2c <HAL_UART_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8002ba0:	f7ff f8fa 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000086c 	.word	0x2000086c
 8002bac:	40004800 	.word	0x40004800

08002bb0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <MX_USART6_UART_Init+0x5c>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_USART6_UART_Init+0x58>)
 8002bf4:	f003 f81a 	bl	8005c2c <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002bfe:	f7ff f8cb 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200008f4 	.word	0x200008f4
 8002c0c:	40011400 	.word	0x40011400

08002c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b4      	sub	sp, #208	; 0xd0
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c2c:	2284      	movs	r2, #132	; 0x84
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 f925 	bl	8006e80 <memset>
  if(uartHandle->Instance==UART5)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a9e      	ldr	r2, [pc, #632]	; (8002eb4 <HAL_UART_MspInit+0x2a4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d167      	bne.n	8002d10 <HAL_UART_MspInit+0x100>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 fb6d 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002c5c:	f7ff f89c 	bl	8001d98 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c60:	4b95      	ldr	r3, [pc, #596]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	4a94      	ldr	r2, [pc, #592]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6c:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c78:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	4a8e      	ldr	r2, [pc, #568]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6313      	str	r3, [r2, #48]	; 0x30
 8002c84:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c90:	4b89      	ldr	r3, [pc, #548]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a88      	ldr	r2, [pc, #544]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b86      	ldr	r3, [pc, #536]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ccc:	4619      	mov	r1, r3
 8002cce:	487b      	ldr	r0, [pc, #492]	; (8002ebc <HAL_UART_MspInit+0x2ac>)
 8002cd0:	f000 fb9e 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cec:	2308      	movs	r3, #8
 8002cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4871      	ldr	r0, [pc, #452]	; (8002ec0 <HAL_UART_MspInit+0x2b0>)
 8002cfa:	f000 fb89 	bl	8003410 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	2035      	movs	r0, #53	; 0x35
 8002d04:	f000 fabb 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002d08:	2035      	movs	r0, #53	; 0x35
 8002d0a:	f000 fad4 	bl	80032b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d0e:	e127      	b.n	8002f60 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==UART7)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6b      	ldr	r2, [pc, #428]	; (8002ec4 <HAL_UART_MspInit+0x2b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d146      	bne.n	8002da8 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fb00 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8002d36:	f7ff f82f 	bl	8001d98 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d52:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002d58:	f043 0310 	orr.w	r3, r3, #16
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002d6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d84:	2308      	movs	r3, #8
 8002d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d8a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d8e:	4619      	mov	r1, r3
 8002d90:	484d      	ldr	r0, [pc, #308]	; (8002ec8 <HAL_UART_MspInit+0x2b8>)
 8002d92:	f000 fb3d 	bl	8003410 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2052      	movs	r0, #82	; 0x52
 8002d9c:	f000 fa6f 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002da0:	2052      	movs	r0, #82	; 0x52
 8002da2:	f000 fa88 	bl	80032b6 <HAL_NVIC_EnableIRQ>
}
 8002da6:	e0db      	b.n	8002f60 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_UART_MspInit+0x2bc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d13c      	bne.n	8002e2c <HAL_UART_MspInit+0x21c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002db6:	2300      	movs	r3, #0
 8002db8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 fab6 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8002dca:	f7fe ffe5 	bl	8001d98 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dce:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002dd4:	f043 0310 	orr.w	r3, r3, #16
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002dfe:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e22:	4619      	mov	r1, r3
 8002e24:	482a      	ldr	r0, [pc, #168]	; (8002ed0 <HAL_UART_MspInit+0x2c0>)
 8002e26:	f000 faf3 	bl	8003410 <HAL_GPIO_Init>
}
 8002e2a:	e099      	b.n	8002f60 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_UART_MspInit+0x2c4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d152      	bne.n	8002edc <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 fa72 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_UART_MspInit+0x246>
      Error_Handler();
 8002e52:	f7fe ffa1 	bl	8001d98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_UART_MspInit+0x2a8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002e86:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8002e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480a      	ldr	r0, [pc, #40]	; (8002ed8 <HAL_UART_MspInit+0x2c8>)
 8002eae:	f000 faaf 	bl	8003410 <HAL_GPIO_Init>
}
 8002eb2:	e055      	b.n	8002f60 <HAL_UART_MspInit+0x350>
 8002eb4:	40005000 	.word	0x40005000
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40007800 	.word	0x40007800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_UART_MspInit+0x358>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d13c      	bne.n	8002f60 <HAL_UART_MspInit+0x350>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fa1a 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002f02:	f7fe ff49 	bl	8001d98 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_UART_MspInit+0x35c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_UART_MspInit+0x35c>)
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_UART_MspInit+0x35c>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_UART_MspInit+0x35c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_UART_MspInit+0x35c>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_UART_MspInit+0x35c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f36:	23c0      	movs	r3, #192	; 0xc0
 8002f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f4e:	2308      	movs	r3, #8
 8002f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <HAL_UART_MspInit+0x360>)
 8002f5c:	f000 fa58 	bl	8003410 <HAL_GPIO_Init>
}
 8002f60:	bf00      	nop
 8002f62:	37d0      	adds	r7, #208	; 0xd0
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40011400 	.word	0x40011400
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020800 	.word	0x40020800

08002f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f7a:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f90:	4c0b      	ldr	r4, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f9e:	f7ff fd35 	bl	8002a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f003 ff49 	bl	8006e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa6:	f7fe fe67 	bl	8001c78 <main>
  bx  lr    
 8002faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002fb8:	0800bcc4 	.word	0x0800bcc4
  ldr r2, =_sbss
 8002fbc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002fc0:	20000990 	.word	0x20000990

08002fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC_IRQHandler>

08002fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fca:	2003      	movs	r0, #3
 8002fcc:	f000 f94c 	bl	8003268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd0:	200f      	movs	r0, #15
 8002fd2:	f000 f805 	bl	8002fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd6:	f7ff f8c7 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_InitTick+0x54>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_InitTick+0x58>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f967 	bl	80032d2 <HAL_SYSTICK_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e00e      	b.n	800302c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	d80a      	bhi.n	800302a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003014:	2200      	movs	r2, #0
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	f000 f92f 	bl	800327e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003020:	4a06      	ldr	r2, [pc, #24]	; (800303c <HAL_InitTick+0x5c>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000000 	.word	0x20000000
 8003038:	20000008 	.word	0x20000008
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_IncTick+0x20>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_IncTick+0x24>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4413      	add	r3, r2
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_IncTick+0x24>)
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000008 	.word	0x20000008
 8003064:	2000097c 	.word	0x2000097c

08003068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return uwTick;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_GetTick+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	2000097c 	.word	0x2000097c

08003080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff ffee 	bl	8003068 <HAL_GetTick>
 800308c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d005      	beq.n	80030a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_Delay+0x44>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030a6:	bf00      	nop
 80030a8:	f7ff ffde 	bl	8003068 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d8f7      	bhi.n	80030a8 <HAL_Delay+0x28>
  {
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000008 	.word	0x20000008

080030c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <__NVIC_SetPriorityGrouping+0x40>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f6:	4a04      	ldr	r2, [pc, #16]	; (8003108 <__NVIC_SetPriorityGrouping+0x40>)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	60d3      	str	r3, [r2, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	05fa0000 	.word	0x05fa0000

08003110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_GetPriorityGrouping+0x18>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0307 	and.w	r3, r3, #7
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	2b00      	cmp	r3, #0
 800313c:	db0b      	blt.n	8003156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <__NVIC_EnableIRQ+0x38>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2001      	movs	r0, #1
 800314e:	fa00 f202 	lsl.w	r2, r0, r2
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	; (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003234:	d301      	bcc.n	800323a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003236:	2301      	movs	r3, #1
 8003238:	e00f      	b.n	800325a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <SysTick_Config+0x40>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003242:	210f      	movs	r1, #15
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f7ff ff8e 	bl	8003168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <SysTick_Config+0x40>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <SysTick_Config+0x40>)
 8003254:	2207      	movs	r2, #7
 8003256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	e000e010 	.word	0xe000e010

08003268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff29 	bl	80030c8 <__NVIC_SetPriorityGrouping>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003290:	f7ff ff3e 	bl	8003110 <__NVIC_GetPriorityGrouping>
 8003294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7ff ff8e 	bl	80031bc <NVIC_EncodePriority>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff5d 	bl	8003168 <__NVIC_SetPriority>
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff31 	bl	800312c <__NVIC_EnableIRQ>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ffa2 	bl	8003224 <SysTick_Config>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff feb6 	bl	8003068 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d008      	beq.n	800331c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e052      	b.n	80033c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0216 	bic.w	r2, r2, #22
 800332a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800333a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_DMA_Abort+0x62>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0208 	bic.w	r2, r2, #8
 800335a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800336c:	e013      	b.n	8003396 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800336e:	f7ff fe7b 	bl	8003068 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b05      	cmp	r3, #5
 800337a:	d90c      	bls.n	8003396 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2203      	movs	r2, #3
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e015      	b.n	80033c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e4      	bne.n	800336e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	223f      	movs	r2, #63	; 0x3f
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d004      	beq.n	80033e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e00c      	b.n	8003402 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2205      	movs	r2, #5
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e175      	b.n	800371c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 8164 	bne.w	8003716 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d005      	beq.n	8003466 <HAL_GPIO_Init+0x56>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d130      	bne.n	80034c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80be 	beq.w	8003716 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_GPIO_Init+0x324>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_GPIO_Init+0x324>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_GPIO_Init+0x324>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035b2:	4a61      	ldr	r2, [pc, #388]	; (8003738 <HAL_GPIO_Init+0x328>)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_GPIO_Init+0x32c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d037      	beq.n	800364e <HAL_GPIO_Init+0x23e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_GPIO_Init+0x330>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d031      	beq.n	800364a <HAL_GPIO_Init+0x23a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_GPIO_Init+0x334>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02b      	beq.n	8003646 <HAL_GPIO_Init+0x236>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a55      	ldr	r2, [pc, #340]	; (8003748 <HAL_GPIO_Init+0x338>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d025      	beq.n	8003642 <HAL_GPIO_Init+0x232>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_GPIO_Init+0x33c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01f      	beq.n	800363e <HAL_GPIO_Init+0x22e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_GPIO_Init+0x340>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d019      	beq.n	800363a <HAL_GPIO_Init+0x22a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a52      	ldr	r2, [pc, #328]	; (8003754 <HAL_GPIO_Init+0x344>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_GPIO_Init+0x226>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a51      	ldr	r2, [pc, #324]	; (8003758 <HAL_GPIO_Init+0x348>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00d      	beq.n	8003632 <HAL_GPIO_Init+0x222>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a50      	ldr	r2, [pc, #320]	; (800375c <HAL_GPIO_Init+0x34c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <HAL_GPIO_Init+0x21e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4f      	ldr	r2, [pc, #316]	; (8003760 <HAL_GPIO_Init+0x350>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_GPIO_Init+0x21a>
 8003626:	2309      	movs	r3, #9
 8003628:	e012      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800362a:	230a      	movs	r3, #10
 800362c:	e010      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800362e:	2308      	movs	r3, #8
 8003630:	e00e      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003632:	2307      	movs	r3, #7
 8003634:	e00c      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003636:	2306      	movs	r3, #6
 8003638:	e00a      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800363a:	2305      	movs	r3, #5
 800363c:	e008      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800363e:	2304      	movs	r3, #4
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003642:	2303      	movs	r3, #3
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800364e:	2300      	movs	r3, #0
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003660:	4935      	ldr	r1, [pc, #212]	; (8003738 <HAL_GPIO_Init+0x328>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_GPIO_Init+0x354>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003692:	4a34      	ldr	r2, [pc, #208]	; (8003764 <HAL_GPIO_Init+0x354>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <HAL_GPIO_Init+0x354>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036bc:	4a29      	ldr	r2, [pc, #164]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036c2:	4b28      	ldr	r3, [pc, #160]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_GPIO_Init+0x354>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	f67f ae86 	bls.w	8003430 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40013800 	.word	0x40013800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40021400 	.word	0x40021400
 8003754:	40021800 	.word	0x40021800
 8003758:	40021c00 	.word	0x40021c00
 800375c:	40022000 	.word	0x40022000
 8003760:	40022400 	.word	0x40022400
 8003764:	40013c00 	.word	0x40013c00

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003784:	e003      	b.n	800378e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fa4e 	bl	8001c5c <HAL_GPIO_EXTI_Callback>
  }
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40013c00 	.word	0x40013c00

080037cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f98c 	bl	8001b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800381c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800382c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	e006      	b.n	8003854 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003852:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d104      	bne.n	8003866 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003864:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_I2C_Init+0x11c>)
 8003872:	430b      	orrs	r3, r1
 8003874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1a      	ldr	r2, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	02008000 	.word	0x02008000

080038ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d138      	bne.n	8003974 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800390c:	2302      	movs	r3, #2
 800390e:	e032      	b.n	8003976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800393e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b20      	cmp	r3, #32
 8003996:	d139      	bne.n	8003a0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e033      	b.n	8003a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2224      	movs	r2, #36	; 0x24
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e291      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8087 	beq.w	8003b4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a40:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d00c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4c:	4b93      	ldr	r3, [pc, #588]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d112      	bne.n	8003a7e <HAL_RCC_OscConfig+0x62>
 8003a58:	4b90      	ldr	r3, [pc, #576]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a64:	d10b      	bne.n	8003a7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d06c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x130>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d168      	bne.n	8003b4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e26b      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x7a>
 8003a88:	4b84      	ldr	r3, [pc, #528]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a83      	ldr	r2, [pc, #524]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e02e      	b.n	8003af4 <HAL_RCC_OscConfig+0xd8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x9c>
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7e      	ldr	r2, [pc, #504]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b7c      	ldr	r3, [pc, #496]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a7b      	ldr	r2, [pc, #492]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xd8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0xc0>
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a75      	ldr	r2, [pc, #468]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a72      	ldr	r2, [pc, #456]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xd8>
 8003adc:	4b6f      	ldr	r3, [pc, #444]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6e      	ldr	r2, [pc, #440]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b6c      	ldr	r3, [pc, #432]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6b      	ldr	r2, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7ff fab4 	bl	8003068 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7ff fab0 	bl	8003068 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e21f      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b61      	ldr	r3, [pc, #388]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xe8>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7ff faa0 	bl	8003068 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7ff fa9c 	bl	8003068 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e20b      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x110>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d069      	beq.n	8003c2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5a:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x190>
 8003b72:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1df      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	493d      	ldr	r1, [pc, #244]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e040      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d023      	beq.n	8003bfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fa52 	bl	8003068 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7ff fa4e 	bl	8003068 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1bd      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4929      	ldr	r1, [pc, #164]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7ff fa2e 	bl	8003068 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7ff fa2a 	bl	8003068 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e199      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d038      	beq.n	8003cac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d019      	beq.n	8003c76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7ff fa0b 	bl	8003068 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7ff fa07 	bl	8003068 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e176      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x23a>
 8003c74:	e01a      	b.n	8003cac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7ff f9f1 	bl	8003068 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7ff f9ed 	bl	8003068 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d903      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e15c      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
 8003c9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	4b91      	ldr	r3, [pc, #580]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ee      	bne.n	8003c8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a4 	beq.w	8003e02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cba:	4b8b      	ldr	r3, [pc, #556]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b88      	ldr	r3, [pc, #544]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a87      	ldr	r2, [pc, #540]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	4b82      	ldr	r3, [pc, #520]	; (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cee:	4b7f      	ldr	r3, [pc, #508]	; (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7e      	ldr	r2, [pc, #504]	; (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7ff f9b5 	bl	8003068 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7ff f9b1 	bl	8003068 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e120      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	4b75      	ldr	r3, [pc, #468]	; (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x31a>
 8003d28:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	e02d      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x33c>
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a69      	ldr	r2, [pc, #420]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4a:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a66      	ldr	r2, [pc, #408]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d50:	f023 0304 	bic.w	r3, r3, #4
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	e01c      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x35e>
 8003d60:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	4a60      	ldr	r2, [pc, #384]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	4b58      	ldr	r3, [pc, #352]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a57      	ldr	r2, [pc, #348]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d015      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7ff f965 	bl	8003068 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7ff f961 	bl	8003068 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0ce      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ee      	beq.n	8003da2 <HAL_RCC_OscConfig+0x386>
 8003dc4:	e014      	b.n	8003df0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7ff f94f 	bl	8003068 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7ff f94b 	bl	8003068 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0b8      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ee      	bne.n	8003dce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80a4 	beq.w	8003f54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d06b      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d149      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7ff f91c 	bl	8003068 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7ff f918 	bl	8003068 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e087      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7ff f8ec 	bl	8003068 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7ff f8e8 	bl	8003068 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e057      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x478>
 8003eb2:	e04f      	b.n	8003f54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7ff f8d2 	bl	8003068 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7ff f8ce 	bl	8003068 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e03d      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4ac>
 8003ee6:	e035      	b.n	8003f54 <HAL_RCC_OscConfig+0x538>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x544>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d028      	beq.n	8003f50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d121      	bne.n	8003f50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d11a      	bne.n	8003f50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800

08003f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0d0      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d910      	bls.n	8003fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b67      	ldr	r3, [pc, #412]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 020f 	bic.w	r2, r3, #15
 8003f92:	4965      	ldr	r1, [pc, #404]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b8      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8003fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	494d      	ldr	r1, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d040      	beq.n	8004088 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d115      	bne.n	8004046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e073      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06b      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4936      	ldr	r1, [pc, #216]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004058:	f7ff f806 	bl	8003068 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e00a      	b.n	8004076 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7ff f802 	bl	8003068 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e053      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 020c 	and.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1eb      	bne.n	8004060 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d210      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	4922      	ldr	r1, [pc, #136]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e032      	b.n	800411e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4916      	ldr	r1, [pc, #88]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f6:	f000 f821 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x1c8>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	490a      	ldr	r1, [pc, #40]	; (8004130 <HAL_RCC_ClockConfig+0x1cc>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1d0>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1d4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe ff62 	bl	8002fe0 <HAL_InitTick>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00
 800412c:	40023800 	.word	0x40023800
 8004130:	0800b7f4 	.word	0x0800b7f4
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004140:	b090      	sub	sp, #64	; 0x40
 8004142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	2300      	movs	r3, #0
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414c:	2300      	movs	r3, #0
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d00d      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x40>
 8004160:	2b08      	cmp	r3, #8
 8004162:	f200 80a1 	bhi.w	80042a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 800416a:	2b04      	cmp	r3, #4
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x3a>
 800416e:	e09b      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004174:	e09b      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800417a:	e098      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	627a      	str	r2, [r7, #36]	; 0x24
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041a4:	2100      	movs	r1, #0
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a8:	fb03 f201 	mul.w	r2, r3, r1
 80041ac:	2300      	movs	r3, #0
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	4a43      	ldr	r2, [pc, #268]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b6:	fba0 1202 	umull	r1, r2, r0, r2
 80041ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041bc:	460a      	mov	r2, r1
 80041be:	62ba      	str	r2, [r7, #40]	; 0x28
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	4413      	add	r3, r2
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	2200      	movs	r2, #0
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	61fa      	str	r2, [r7, #28]
 80041ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041d6:	f7fc fd77 	bl	8000cc8 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4613      	mov	r3, r2
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e2:	e053      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	2200      	movs	r2, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	617a      	str	r2, [r7, #20]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041f6:	f04f 0b00 	mov.w	fp, #0
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420c:	0150      	lsls	r0, r2, #5
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	ebb2 080a 	subs.w	r8, r2, sl
 8004216:	eb63 090b 	sbc.w	r9, r3, fp
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004226:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800422a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800422e:	ebb2 0408 	subs.w	r4, r2, r8
 8004232:	eb63 0509 	sbc.w	r5, r3, r9
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	00eb      	lsls	r3, r5, #3
 8004240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004244:	00e2      	lsls	r2, r4, #3
 8004246:	4614      	mov	r4, r2
 8004248:	461d      	mov	r5, r3
 800424a:	eb14 030a 	adds.w	r3, r4, sl
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	eb45 030b 	adc.w	r3, r5, fp
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004262:	4629      	mov	r1, r5
 8004264:	028b      	lsls	r3, r1, #10
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800426c:	4621      	mov	r1, r4
 800426e:	028a      	lsls	r2, r1, #10
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	2200      	movs	r2, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004280:	f7fc fd22 	bl	8000cc8 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	3301      	adds	r3, #1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800429c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3740      	adds	r7, #64	; 0x40
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	017d7840 	.word	0x017d7840

080042c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000000 	.word	0x20000000

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	0800b804 	.word	0x0800b804

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0800b804 	.word	0x0800b804

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004358:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004362:	6093      	str	r3, [r2, #8]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	4964      	ldr	r1, [pc, #400]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800438a:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	4959      	ldr	r1, [pc, #356]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	494a      	ldr	r1, [pc, #296]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 808b 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4a39      	ldr	r2, [pc, #228]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a34      	ldr	r2, [pc, #208]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fe fe16 	bl	8003068 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe fe12 	bl	8003068 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e357      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004452:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d035      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d02e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004484:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004486:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d114      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe fdda 	bl	8003068 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe fdd6 	bl	8003068 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e319      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d111      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	4901      	ldr	r1, [pc, #4]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	e00b      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	0ffffcff 	.word	0x0ffffcff
 800450c:	4baa      	ldr	r3, [pc, #680]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4aa9      	ldr	r2, [pc, #676]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004512:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004516:	6093      	str	r3, [r2, #8]
 8004518:	4ba7      	ldr	r3, [pc, #668]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	49a4      	ldr	r1, [pc, #656]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	4313      	orrs	r3, r2
 8004528:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004536:	4ba0      	ldr	r3, [pc, #640]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453c:	4a9e      	ldr	r2, [pc, #632]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004542:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004546:	4b9c      	ldr	r3, [pc, #624]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004548:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	4999      	ldr	r1, [pc, #612]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004564:	4b94      	ldr	r3, [pc, #592]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004572:	4991      	ldr	r1, [pc, #580]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004586:	4b8c      	ldr	r3, [pc, #560]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004594:	4988      	ldr	r1, [pc, #544]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a8:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	4980      	ldr	r1, [pc, #512]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ca:	4b7b      	ldr	r3, [pc, #492]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4977      	ldr	r1, [pc, #476]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ec:	4b72      	ldr	r3, [pc, #456]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	496f      	ldr	r1, [pc, #444]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800460e:	4b6a      	ldr	r3, [pc, #424]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f023 020c 	bic.w	r2, r3, #12
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	4966      	ldr	r1, [pc, #408]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004630:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	495e      	ldr	r1, [pc, #376]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004652:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	4955      	ldr	r1, [pc, #340]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004674:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	494d      	ldr	r1, [pc, #308]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004696:	4b48      	ldr	r3, [pc, #288]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4944      	ldr	r1, [pc, #272]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	493c      	ldr	r1, [pc, #240]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046da:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	4933      	ldr	r1, [pc, #204]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046fc:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	492b      	ldr	r1, [pc, #172]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472c:	4922      	ldr	r1, [pc, #136]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473c:	d101      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476c:	4912      	ldr	r1, [pc, #72]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004790:	4909      	ldr	r1, [pc, #36]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d006      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80d9 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047ac:	4b02      	ldr	r3, [pc, #8]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a01      	ldr	r2, [pc, #4]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047b6:	e001      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047be:	f7fe fc53 	bl	8003068 <HAL_GetTick>
 80047c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047c6:	f7fe fc4f 	bl	8003068 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b64      	cmp	r3, #100	; 0x64
 80047d2:	d901      	bls.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e194      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d8:	4b6c      	ldr	r3, [pc, #432]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d021      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11d      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f8:	4b64      	ldr	r3, [pc, #400]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004806:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	019a      	lsls	r2, r3, #6
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	431a      	orrs	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	071b      	lsls	r3, r3, #28
 800482c:	4957      	ldr	r1, [pc, #348]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004852:	2b00      	cmp	r3, #0
 8004854:	d02e      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d129      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004860:	4b4a      	ldr	r3, [pc, #296]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800486e:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	0f1b      	lsrs	r3, r3, #28
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	019a      	lsls	r2, r3, #6
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	431a      	orrs	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	071b      	lsls	r3, r3, #28
 8004894:	493d      	ldr	r1, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800489c:	4b3b      	ldr	r3, [pc, #236]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	f023 021f 	bic.w	r2, r3, #31
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4937      	ldr	r1, [pc, #220]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	0e1b      	lsrs	r3, r3, #24
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ce:	4b2f      	ldr	r3, [pc, #188]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	0f1b      	lsrs	r3, r3, #28
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	019a      	lsls	r2, r3, #6
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	431a      	orrs	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	071b      	lsls	r3, r3, #28
 80048f4:	4925      	ldr	r1, [pc, #148]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	019a      	lsls	r2, r3, #6
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	071b      	lsls	r3, r3, #28
 8004924:	4919      	ldr	r1, [pc, #100]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800492c:	4b17      	ldr	r3, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a16      	ldr	r2, [pc, #88]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004932:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fe fb96 	bl	8003068 <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004940:	f7fe fb92 	bl	8003068 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e0d7      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	f040 80cd 	bne.w	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a08      	ldr	r2, [pc, #32]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800496c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004972:	f7fe fb79 	bl	8003068 <HAL_GetTick>
 8004976:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004978:	e00a      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800497a:	f7fe fb75 	bl	8003068 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b64      	cmp	r3, #100	; 0x64
 8004986:	d903      	bls.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0ba      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800498c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004990:	4b5e      	ldr	r3, [pc, #376]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499c:	d0ed      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02e      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d12a      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049c6:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049d4:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	0f1b      	lsrs	r3, r3, #28
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	019a      	lsls	r2, r3, #6
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	071b      	lsls	r3, r3, #28
 80049fa:	4944      	ldr	r1, [pc, #272]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a02:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d022      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a30:	d11d      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	0f1b      	lsrs	r3, r3, #28
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	019a      	lsls	r2, r3, #6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	071b      	lsls	r3, r3, #28
 8004a66:	4929      	ldr	r1, [pc, #164]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d028      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	019a      	lsls	r2, r3, #6
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	071b      	lsls	r3, r3, #28
 8004aae:	4917      	ldr	r1, [pc, #92]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4911      	ldr	r1, [pc, #68]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fac6 	bl	8003068 <HAL_GetTick>
 8004adc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae0:	f7fe fac2 	bl	8003068 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e007      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afe:	d1ef      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e09d      	b.n	8004c5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b32:	d009      	beq.n	8004b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
 8004b3a:	e005      	b.n	8004b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fa14 	bl	8001f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b88:	d902      	bls.n	8004b90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e002      	b.n	8004b96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b9e:	d007      	beq.n	8004bb0 <HAL_SPI_Init+0xa0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	ea42 0103 	orr.w	r1, r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 0204 	and.w	r2, r3, #4
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c2c:	ea42 0103 	orr.w	r1, r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b088      	sub	sp, #32
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_SPI_Transmit+0x22>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e158      	b.n	8004f3a <HAL_SPI_Transmit+0x2d4>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c90:	f7fe f9ea 	bl	8003068 <HAL_GetTick>
 8004c94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004caa:	e13d      	b.n	8004f28 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Transmit+0x52>
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cbc:	e134      	b.n	8004f28 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d08:	d10f      	bne.n	8004d2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d007      	beq.n	8004d48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d50:	d94b      	bls.n	8004dea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Transmit+0xfa>
 8004d5a:	8afb      	ldrh	r3, [r7, #22]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d13e      	bne.n	8004dde <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	1c9a      	adds	r2, r3, #2
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d84:	e02b      	b.n	8004dde <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d112      	bne.n	8004dba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	881a      	ldrh	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004db8:	e011      	b.n	8004dde <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dba:	f7fe f955 	bl	8003068 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d803      	bhi.n	8004dd2 <HAL_SPI_Transmit+0x16c>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d102      	bne.n	8004dd8 <HAL_SPI_Transmit+0x172>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ddc:	e0a4      	b.n	8004f28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ce      	bne.n	8004d86 <HAL_SPI_Transmit+0x120>
 8004de8:	e07c      	b.n	8004ee4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Transmit+0x192>
 8004df2:	8afb      	ldrh	r3, [r7, #22]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d170      	bne.n	8004eda <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d912      	bls.n	8004e28 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b02      	subs	r3, #2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e26:	e058      	b.n	8004eda <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e4e:	e044      	b.n	8004eda <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d12b      	bne.n	8004eb6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d912      	bls.n	8004e8e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	881a      	ldrh	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b02      	subs	r3, #2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e8c:	e025      	b.n	8004eda <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb4:	e011      	b.n	8004eda <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb6:	f7fe f8d7 	bl	8003068 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d803      	bhi.n	8004ece <HAL_SPI_Transmit+0x268>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d102      	bne.n	8004ed4 <HAL_SPI_Transmit+0x26e>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ed8:	e026      	b.n	8004f28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1b5      	bne.n	8004e50 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fe35 	bl	8005b58 <SPI_EndRxTxTransaction>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e000      	b.n	8004f28 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b088      	sub	sp, #32
 8004f46:	af02      	add	r7, sp, #8
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5e:	d112      	bne.n	8004f86 <HAL_SPI_Receive+0x44>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10e      	bne.n	8004f86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f910 	bl	80051a2 <HAL_SPI_TransmitReceive>
 8004f82:	4603      	mov	r3, r0
 8004f84:	e109      	b.n	800519a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_SPI_Receive+0x52>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e102      	b.n	800519a <HAL_SPI_Receive+0x258>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9c:	f7fe f864 	bl	8003068 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fb2:	e0e9      	b.n	8005188 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_SPI_Receive+0x7e>
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fc4:	e0e0      	b.n	8005188 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005010:	d908      	bls.n	8005024 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	e007      	b.n	8005034 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005032:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503c:	d10f      	bne.n	800505e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d007      	beq.n	800507c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005084:	d867      	bhi.n	8005156 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005086:	e030      	b.n	80050ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d117      	bne.n	80050c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f103 020c 	add.w	r2, r3, #12
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050c4:	e011      	b.n	80050ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c6:	f7fd ffcf 	bl	8003068 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d803      	bhi.n	80050de <HAL_SPI_Receive+0x19c>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d102      	bne.n	80050e4 <HAL_SPI_Receive+0x1a2>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050e8:	e04e      	b.n	8005188 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1c8      	bne.n	8005088 <HAL_SPI_Receive+0x146>
 80050f6:	e034      	b.n	8005162 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d115      	bne.n	8005132 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	b292      	uxth	r2, r2
 8005112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005130:	e011      	b.n	8005156 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005132:	f7fd ff99 	bl	8003068 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d803      	bhi.n	800514a <HAL_SPI_Receive+0x208>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d102      	bne.n	8005150 <HAL_SPI_Receive+0x20e>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005154:	e018      	b.n	8005188 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ca      	bne.n	80050f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fc7a 	bl	8005a60 <SPI_EndRxTransaction>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
 8005184:	e000      	b.n	8005188 <HAL_SPI_Receive+0x246>
  }

error :
 8005186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08a      	sub	sp, #40	; 0x28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051b0:	2301      	movs	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x26>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e1fb      	b.n	80055c0 <HAL_SPI_TransmitReceive+0x41e>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d0:	f7fd ff4a 	bl	8003068 <HAL_GetTick>
 80051d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051ec:	7efb      	ldrb	r3, [r7, #27]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d00e      	beq.n	8005210 <HAL_SPI_TransmitReceive+0x6e>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f8:	d106      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x66>
 8005202:	7efb      	ldrb	r3, [r7, #27]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d003      	beq.n	8005210 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005208:	2302      	movs	r3, #2
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800520e:	e1cd      	b.n	80055ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x80>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x80>
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005228:	e1c0      	b.n	80055ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b04      	cmp	r3, #4
 8005234:	d003      	beq.n	800523e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2205      	movs	r2, #5
 800523a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	887a      	ldrh	r2, [r7, #2]
 800524e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	887a      	ldrh	r2, [r7, #2]
 8005256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	887a      	ldrh	r2, [r7, #2]
 8005264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	887a      	ldrh	r2, [r7, #2]
 800526a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005280:	d802      	bhi.n	8005288 <HAL_SPI_TransmitReceive+0xe6>
 8005282:	8a3b      	ldrh	r3, [r7, #16]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d908      	bls.n	800529a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005296:	605a      	str	r2, [r3, #4]
 8005298:	e007      	b.n	80052aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d007      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d0:	d97c      	bls.n	80053cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x13e>
 80052da:	8a7b      	ldrh	r3, [r7, #18]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d169      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005304:	e056      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d11b      	bne.n	800534c <HAL_SPI_TransmitReceive+0x1aa>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <HAL_SPI_TransmitReceive+0x1aa>
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b01      	cmp	r3, #1
 8005322:	d113      	bne.n	800534c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	881a      	ldrh	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	1c9a      	adds	r2, r3, #2
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d11c      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x1f2>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	b292      	uxth	r2, r2
 8005372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005390:	2301      	movs	r3, #1
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005394:	f7fd fe68 	bl	8003068 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d807      	bhi.n	80053b4 <HAL_SPI_TransmitReceive+0x212>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d003      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053b2:	e0fb      	b.n	80055ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1a3      	bne.n	8005306 <HAL_SPI_TransmitReceive+0x164>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d19d      	bne.n	8005306 <HAL_SPI_TransmitReceive+0x164>
 80053ca:	e0df      	b.n	800558c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_SPI_TransmitReceive+0x23a>
 80053d4:	8a7b      	ldrh	r3, [r7, #18]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	f040 80cb 	bne.w	8005572 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d912      	bls.n	800540c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	881a      	ldrh	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	1c9a      	adds	r2, r3, #2
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b02      	subs	r3, #2
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	87da      	strh	r2, [r3, #62]	; 0x3e
 800540a:	e0b2      	b.n	8005572 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005432:	e09e      	b.n	8005572 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d134      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x30a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02f      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x30a>
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	2b01      	cmp	r3, #1
 8005450:	d12c      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d912      	bls.n	8005482 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b02      	subs	r3, #2
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005480:	e012      	b.n	80054a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	7812      	ldrb	r2, [r2, #0]
 800548e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d148      	bne.n	800554c <HAL_SPI_TransmitReceive+0x3aa>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d042      	beq.n	800554c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d923      	bls.n	800551a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	b292      	uxth	r2, r2
 80054de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	1c9a      	adds	r2, r3, #2
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b02      	subs	r3, #2
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d81f      	bhi.n	8005548 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e016      	b.n	8005548 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f103 020c 	add.w	r2, r3, #12
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	7812      	ldrb	r2, [r2, #0]
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005548:	2301      	movs	r3, #1
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800554c:	f7fd fd8c 	bl	8003068 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005558:	429a      	cmp	r2, r3
 800555a:	d803      	bhi.n	8005564 <HAL_SPI_TransmitReceive+0x3c2>
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d102      	bne.n	800556a <HAL_SPI_TransmitReceive+0x3c8>
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005570:	e01c      	b.n	80055ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	f47f af5b 	bne.w	8005434 <HAL_SPI_TransmitReceive+0x292>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	f47f af54 	bne.w	8005434 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fae1 	bl	8005b58 <SPI_EndRxTxTransaction>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d006      	beq.n	80055aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60
 80055a8:	e000      	b.n	80055ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80055aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3728      	adds	r7, #40	; 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10f      	bne.n	800560c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	099b      	lsrs	r3, r3, #6
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
    return;
 800560a:	e0d7      	b.n	80057bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_SPI_IRQHandler+0x66>
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
    return;
 800562c:	e0c6      	b.n	80057bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <HAL_SPI_IRQHandler+0x8c>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80b4 	beq.w	80057bc <HAL_SPI_IRQHandler+0x1f4>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80ad 	beq.w	80057bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	099b      	lsrs	r3, r3, #6
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d023      	beq.n	80056b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d011      	beq.n	800569e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567e:	f043 0204 	orr.w	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	e00b      	b.n	80056b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]
        return;
 80056b4:	e082      	b.n	80057bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d014      	beq.n	80056ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00c      	beq.n	8005712 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fc:	f043 0208 	orr.w	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	2b00      	cmp	r3, #0
 8005718:	d04f      	beq.n	80057ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005728:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <HAL_SPI_IRQHandler+0x17e>
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d034      	beq.n	80057b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0203 	bic.w	r2, r2, #3
 8005754:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	2b00      	cmp	r3, #0
 800575c:	d011      	beq.n	8005782 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005764:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	4618      	mov	r0, r3
 800576c:	f7fd fe2d 	bl	80033ca <HAL_DMA_Abort_IT>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005790:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	4618      	mov	r0, r3
 8005798:	f7fd fe17 	bl	80033ca <HAL_DMA_Abort_IT>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80057ae:	e003      	b.n	80057b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f809 	bl	80057c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057b6:	e000      	b.n	80057ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80057b8:	bf00      	nop
    return;
 80057ba:	bf00      	nop
  }
}
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	080057f9 	.word	0x080057f9

080057c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ea:	b2db      	uxtb	r3, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff ffd7 	bl	80057c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005834:	f7fd fc18 	bl	8003068 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	4413      	add	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005844:	f7fd fc10 	bl	8003068 <HAL_GetTick>
 8005848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584a:	4b39      	ldr	r3, [pc, #228]	; (8005930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	015b      	lsls	r3, r3, #5
 8005850:	0d1b      	lsrs	r3, r3, #20
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585a:	e054      	b.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d050      	beq.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005864:	f7fd fc00 	bl	8003068 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	429a      	cmp	r2, r3
 8005872:	d902      	bls.n	800587a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d13d      	bne.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d111      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	d004      	beq.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a6:	d107      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c0:	d10f      	bne.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e017      	b.n	8005926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3b01      	subs	r3, #1
 8005904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	429a      	cmp	r2, r3
 8005922:	d19b      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000

08005934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005946:	f7fd fb8f 	bl	8003068 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	4413      	add	r3, r2
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005956:	f7fd fb87 	bl	8003068 <HAL_GetTick>
 800595a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00da      	lsls	r2, r3, #3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	0d1b      	lsrs	r3, r3, #20
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800597c:	e060      	b.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005984:	d107      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005994:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d050      	beq.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599e:	f7fd fb63 	bl	8003068 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d902      	bls.n	80059b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d13d      	bne.n	8005a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059cc:	d111      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d004      	beq.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d107      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	d10f      	bne.n	8005a1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e010      	b.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d196      	bne.n	800597e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3728      	adds	r7, #40	; 0x28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000000 	.word	0x20000000

08005a60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a74:	d111      	bne.n	8005a9a <SPI_EndRxTransaction+0x3a>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7e:	d004      	beq.n	8005a8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a88:	d107      	bne.n	8005a9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa2:	d112      	bne.n	8005aca <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff feb8 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abe:	f043 0220 	orr.w	r2, r3, #32
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e03d      	b.n	8005b46 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <SPI_EndRxTransaction+0xf0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <SPI_EndRxTransaction+0xf4>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	0d5b      	lsrs	r3, r3, #21
 8005ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d0f2      	beq.n	8005ae0 <SPI_EndRxTransaction+0x80>
 8005afa:	e000      	b.n	8005afe <SPI_EndRxTransaction+0x9e>
        break;
 8005afc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d11d      	bne.n	8005b44 <SPI_EndRxTransaction+0xe4>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b10:	d004      	beq.n	8005b1c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1a:	d113      	bne.n	8005b44 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ff03 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e000      	b.n	8005b46 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000000 	.word	0x20000000
 8005b54:	165e9f81 	.word	0x165e9f81

08005b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff fedf 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e046      	b.n	8005c1a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b8c:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <SPI_EndRxTxTransaction+0xcc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <SPI_EndRxTxTransaction+0xd0>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	0d5b      	lsrs	r3, r3, #21
 8005b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005baa:	d112      	bne.n	8005bd2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fe34 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e023      	b.n	8005c1a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d0f2      	beq.n	8005bd2 <SPI_EndRxTxTransaction+0x7a>
 8005bec:	e000      	b.n	8005bf0 <SPI_EndRxTxTransaction+0x98>
        break;
 8005bee:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fe99 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0c:	f043 0220 	orr.w	r2, r3, #32
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e000      	b.n	8005c1a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000000 	.word	0x20000000
 8005c28:	165e9f81 	.word	0x165e9f81

08005c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e040      	b.n	8005cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc ffde 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fb7c 	bl	8006368 <UART_SetConfig>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e022      	b.n	8005cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fdd4 	bl	8006830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fe5b 	bl	8006974 <UART_CheckIdleState>
 8005cbe:	4603      	mov	r3, r0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b08b      	sub	sp, #44	; 0x2c
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d147      	bne.n	8005d6e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Transmit_IT+0x22>
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e040      	b.n	8005d70 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2221      	movs	r2, #33	; 0x21
 8005d16:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d107      	bne.n	8005d32 <HAL_UART_Transmit_IT+0x6a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <HAL_UART_Transmit_IT+0xb4>)
 8005d2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d30:	e002      	b.n	8005d38 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <HAL_UART_Transmit_IT+0xb8>)
 8005d36:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	613b      	str	r3, [r7, #16]
   return(result);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	69f9      	ldr	r1, [r7, #28]
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	372c      	adds	r7, #44	; 0x2c
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	08006d19 	.word	0x08006d19
 8005d80:	08006c63 	.word	0x08006c63

08005d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b0ba      	sub	sp, #232	; 0xe8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005daa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dae:	f640 030f 	movw	r3, #2063	; 0x80f
 8005db2:	4013      	ands	r3, r2
 8005db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d115      	bne.n	8005dec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00f      	beq.n	8005dec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8297 	beq.w	8006310 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
      }
      return;
 8005dea:	e291      	b.n	8006310 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8117 	beq.w	8006024 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e06:	4b85      	ldr	r3, [pc, #532]	; (800601c <HAL_UART_IRQHandler+0x298>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 810a 	beq.w	8006024 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d011      	beq.n	8005e40 <HAL_UART_IRQHandler+0xbc>
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e36:	f043 0201 	orr.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <HAL_UART_IRQHandler+0xec>
 8005e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x11c>
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ebc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00b      	beq.n	8005edc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed2:	f043 0208 	orr.w	r2, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_UART_IRQHandler+0x18a>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 81fd 	beq.w	8006314 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d005      	beq.n	8005f66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d04f      	beq.n	8006006 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fe01 	bl	8006b6e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d141      	bne.n	8005ffe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d9      	bne.n	8005f7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d013      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <HAL_UART_IRQHandler+0x29c>)
 8005fd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fd f9f5 	bl	80033ca <HAL_DMA_Abort_IT>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d017      	beq.n	8006016 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	e00f      	b.n	8006016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9a0 	bl	800633c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	e00b      	b.n	8006016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f99c 	bl	800633c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	e007      	b.n	8006016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f998 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006014:	e17e      	b.n	8006314 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006016:	bf00      	nop
    return;
 8006018:	e17c      	b.n	8006314 <HAL_UART_IRQHandler+0x590>
 800601a:	bf00      	nop
 800601c:	04000120 	.word	0x04000120
 8006020:	08006c37 	.word	0x08006c37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006028:	2b01      	cmp	r3, #1
 800602a:	f040 814c 	bne.w	80062c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8145 	beq.w	80062c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 813e 	beq.w	80062c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2210      	movs	r2, #16
 8006050:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	f040 80b6 	bne.w	80061ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800606e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8150 	beq.w	8006318 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800607e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006082:	429a      	cmp	r2, r3
 8006084:	f080 8148 	bcs.w	8006318 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800608e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609c:	f000 8086 	beq.w	80061ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1da      	bne.n	80060a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800610e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006112:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006116:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e1      	bne.n	80060ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800614a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800614c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e3      	bne.n	8006126 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	f023 0310 	bic.w	r3, r3, #16
 8006180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006190:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800619c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e4      	bne.n	800616c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fd f89f 	bl	80032ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8c2 	bl	8006350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061cc:	e0a4      	b.n	8006318 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8096 	beq.w	800631c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80061f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8091 	beq.w	800631c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
 800621e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e4      	bne.n	80061fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	623b      	str	r3, [r7, #32]
   return(result);
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006254:	633a      	str	r2, [r7, #48]	; 0x30
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	60fb      	str	r3, [r7, #12]
   return(result);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0310 	bic.w	r3, r3, #16
 8006290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	617b      	str	r3, [r7, #20]
   return(result);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e4      	bne.n	800627c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f846 	bl	8006350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062c4:	e02a      	b.n	800631c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01c      	beq.n	8006320 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    }
    return;
 80062ee:	e017      	b.n	8006320 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d012      	beq.n	8006322 <HAL_UART_IRQHandler+0x59e>
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fd65 	bl	8006dd8 <UART_EndTransmit_IT>
    return;
 800630e:	e008      	b.n	8006322 <HAL_UART_IRQHandler+0x59e>
      return;
 8006310:	bf00      	nop
 8006312:	e006      	b.n	8006322 <HAL_UART_IRQHandler+0x59e>
    return;
 8006314:	bf00      	nop
 8006316:	e004      	b.n	8006322 <HAL_UART_IRQHandler+0x59e>
      return;
 8006318:	bf00      	nop
 800631a:	e002      	b.n	8006322 <HAL_UART_IRQHandler+0x59e>
      return;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_UART_IRQHandler+0x59e>
    return;
 8006320:	bf00      	nop
  }

}
 8006322:	37e8      	adds	r7, #232	; 0xe8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4ba6      	ldr	r3, [pc, #664]	; (800662c <UART_SetConfig+0x2c4>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	6979      	ldr	r1, [r7, #20]
 800639c:	430b      	orrs	r3, r1
 800639e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a94      	ldr	r2, [pc, #592]	; (8006630 <UART_SetConfig+0x2c8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d120      	bne.n	8006426 <UART_SetConfig+0xbe>
 80063e4:	4b93      	ldr	r3, [pc, #588]	; (8006634 <UART_SetConfig+0x2cc>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d816      	bhi.n	8006420 <UART_SetConfig+0xb8>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x90>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006415 	.word	0x08006415
 8006400:	0800640f 	.word	0x0800640f
 8006404:	0800641b 	.word	0x0800641b
 8006408:	2301      	movs	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e150      	b.n	80066b0 <UART_SetConfig+0x348>
 800640e:	2302      	movs	r3, #2
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e14d      	b.n	80066b0 <UART_SetConfig+0x348>
 8006414:	2304      	movs	r3, #4
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e14a      	b.n	80066b0 <UART_SetConfig+0x348>
 800641a:	2308      	movs	r3, #8
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e147      	b.n	80066b0 <UART_SetConfig+0x348>
 8006420:	2310      	movs	r3, #16
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e144      	b.n	80066b0 <UART_SetConfig+0x348>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a83      	ldr	r2, [pc, #524]	; (8006638 <UART_SetConfig+0x2d0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d132      	bne.n	8006496 <UART_SetConfig+0x12e>
 8006430:	4b80      	ldr	r3, [pc, #512]	; (8006634 <UART_SetConfig+0x2cc>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d828      	bhi.n	8006490 <UART_SetConfig+0x128>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0xdc>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006479 	.word	0x08006479
 8006448:	08006491 	.word	0x08006491
 800644c:	08006491 	.word	0x08006491
 8006450:	08006491 	.word	0x08006491
 8006454:	08006485 	.word	0x08006485
 8006458:	08006491 	.word	0x08006491
 800645c:	08006491 	.word	0x08006491
 8006460:	08006491 	.word	0x08006491
 8006464:	0800647f 	.word	0x0800647f
 8006468:	08006491 	.word	0x08006491
 800646c:	08006491 	.word	0x08006491
 8006470:	08006491 	.word	0x08006491
 8006474:	0800648b 	.word	0x0800648b
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e118      	b.n	80066b0 <UART_SetConfig+0x348>
 800647e:	2302      	movs	r3, #2
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e115      	b.n	80066b0 <UART_SetConfig+0x348>
 8006484:	2304      	movs	r3, #4
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e112      	b.n	80066b0 <UART_SetConfig+0x348>
 800648a:	2308      	movs	r3, #8
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e10f      	b.n	80066b0 <UART_SetConfig+0x348>
 8006490:	2310      	movs	r3, #16
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e10c      	b.n	80066b0 <UART_SetConfig+0x348>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a68      	ldr	r2, [pc, #416]	; (800663c <UART_SetConfig+0x2d4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d120      	bne.n	80064e2 <UART_SetConfig+0x17a>
 80064a0:	4b64      	ldr	r3, [pc, #400]	; (8006634 <UART_SetConfig+0x2cc>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d013      	beq.n	80064d6 <UART_SetConfig+0x16e>
 80064ae:	2b30      	cmp	r3, #48	; 0x30
 80064b0:	d814      	bhi.n	80064dc <UART_SetConfig+0x174>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d009      	beq.n	80064ca <UART_SetConfig+0x162>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d810      	bhi.n	80064dc <UART_SetConfig+0x174>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <UART_SetConfig+0x15c>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d006      	beq.n	80064d0 <UART_SetConfig+0x168>
 80064c2:	e00b      	b.n	80064dc <UART_SetConfig+0x174>
 80064c4:	2300      	movs	r3, #0
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e0f2      	b.n	80066b0 <UART_SetConfig+0x348>
 80064ca:	2302      	movs	r3, #2
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e0ef      	b.n	80066b0 <UART_SetConfig+0x348>
 80064d0:	2304      	movs	r3, #4
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e0ec      	b.n	80066b0 <UART_SetConfig+0x348>
 80064d6:	2308      	movs	r3, #8
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e0e9      	b.n	80066b0 <UART_SetConfig+0x348>
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0e6      	b.n	80066b0 <UART_SetConfig+0x348>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a56      	ldr	r2, [pc, #344]	; (8006640 <UART_SetConfig+0x2d8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d120      	bne.n	800652e <UART_SetConfig+0x1c6>
 80064ec:	4b51      	ldr	r3, [pc, #324]	; (8006634 <UART_SetConfig+0x2cc>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064f6:	2bc0      	cmp	r3, #192	; 0xc0
 80064f8:	d013      	beq.n	8006522 <UART_SetConfig+0x1ba>
 80064fa:	2bc0      	cmp	r3, #192	; 0xc0
 80064fc:	d814      	bhi.n	8006528 <UART_SetConfig+0x1c0>
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d009      	beq.n	8006516 <UART_SetConfig+0x1ae>
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d810      	bhi.n	8006528 <UART_SetConfig+0x1c0>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <UART_SetConfig+0x1a8>
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d006      	beq.n	800651c <UART_SetConfig+0x1b4>
 800650e:	e00b      	b.n	8006528 <UART_SetConfig+0x1c0>
 8006510:	2300      	movs	r3, #0
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e0cc      	b.n	80066b0 <UART_SetConfig+0x348>
 8006516:	2302      	movs	r3, #2
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e0c9      	b.n	80066b0 <UART_SetConfig+0x348>
 800651c:	2304      	movs	r3, #4
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e0c6      	b.n	80066b0 <UART_SetConfig+0x348>
 8006522:	2308      	movs	r3, #8
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e0c3      	b.n	80066b0 <UART_SetConfig+0x348>
 8006528:	2310      	movs	r3, #16
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e0c0      	b.n	80066b0 <UART_SetConfig+0x348>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <UART_SetConfig+0x2dc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d125      	bne.n	8006584 <UART_SetConfig+0x21c>
 8006538:	4b3e      	ldr	r3, [pc, #248]	; (8006634 <UART_SetConfig+0x2cc>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006546:	d017      	beq.n	8006578 <UART_SetConfig+0x210>
 8006548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800654c:	d817      	bhi.n	800657e <UART_SetConfig+0x216>
 800654e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006552:	d00b      	beq.n	800656c <UART_SetConfig+0x204>
 8006554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006558:	d811      	bhi.n	800657e <UART_SetConfig+0x216>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <UART_SetConfig+0x1fe>
 800655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006562:	d006      	beq.n	8006572 <UART_SetConfig+0x20a>
 8006564:	e00b      	b.n	800657e <UART_SetConfig+0x216>
 8006566:	2300      	movs	r3, #0
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e0a1      	b.n	80066b0 <UART_SetConfig+0x348>
 800656c:	2302      	movs	r3, #2
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e09e      	b.n	80066b0 <UART_SetConfig+0x348>
 8006572:	2304      	movs	r3, #4
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e09b      	b.n	80066b0 <UART_SetConfig+0x348>
 8006578:	2308      	movs	r3, #8
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e098      	b.n	80066b0 <UART_SetConfig+0x348>
 800657e:	2310      	movs	r3, #16
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e095      	b.n	80066b0 <UART_SetConfig+0x348>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <UART_SetConfig+0x2e0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d125      	bne.n	80065da <UART_SetConfig+0x272>
 800658e:	4b29      	ldr	r3, [pc, #164]	; (8006634 <UART_SetConfig+0x2cc>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800659c:	d017      	beq.n	80065ce <UART_SetConfig+0x266>
 800659e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a2:	d817      	bhi.n	80065d4 <UART_SetConfig+0x26c>
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a8:	d00b      	beq.n	80065c2 <UART_SetConfig+0x25a>
 80065aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ae:	d811      	bhi.n	80065d4 <UART_SetConfig+0x26c>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <UART_SetConfig+0x254>
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d006      	beq.n	80065c8 <UART_SetConfig+0x260>
 80065ba:	e00b      	b.n	80065d4 <UART_SetConfig+0x26c>
 80065bc:	2301      	movs	r3, #1
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e076      	b.n	80066b0 <UART_SetConfig+0x348>
 80065c2:	2302      	movs	r3, #2
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e073      	b.n	80066b0 <UART_SetConfig+0x348>
 80065c8:	2304      	movs	r3, #4
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e070      	b.n	80066b0 <UART_SetConfig+0x348>
 80065ce:	2308      	movs	r3, #8
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e06d      	b.n	80066b0 <UART_SetConfig+0x348>
 80065d4:	2310      	movs	r3, #16
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e06a      	b.n	80066b0 <UART_SetConfig+0x348>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1b      	ldr	r2, [pc, #108]	; (800664c <UART_SetConfig+0x2e4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d138      	bne.n	8006656 <UART_SetConfig+0x2ee>
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <UART_SetConfig+0x2cc>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065f2:	d017      	beq.n	8006624 <UART_SetConfig+0x2bc>
 80065f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065f8:	d82a      	bhi.n	8006650 <UART_SetConfig+0x2e8>
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	d00b      	beq.n	8006618 <UART_SetConfig+0x2b0>
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006604:	d824      	bhi.n	8006650 <UART_SetConfig+0x2e8>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <UART_SetConfig+0x2aa>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d006      	beq.n	800661e <UART_SetConfig+0x2b6>
 8006610:	e01e      	b.n	8006650 <UART_SetConfig+0x2e8>
 8006612:	2300      	movs	r3, #0
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e04b      	b.n	80066b0 <UART_SetConfig+0x348>
 8006618:	2302      	movs	r3, #2
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e048      	b.n	80066b0 <UART_SetConfig+0x348>
 800661e:	2304      	movs	r3, #4
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e045      	b.n	80066b0 <UART_SetConfig+0x348>
 8006624:	2308      	movs	r3, #8
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e042      	b.n	80066b0 <UART_SetConfig+0x348>
 800662a:	bf00      	nop
 800662c:	efff69f3 	.word	0xefff69f3
 8006630:	40011000 	.word	0x40011000
 8006634:	40023800 	.word	0x40023800
 8006638:	40004400 	.word	0x40004400
 800663c:	40004800 	.word	0x40004800
 8006640:	40004c00 	.word	0x40004c00
 8006644:	40005000 	.word	0x40005000
 8006648:	40011400 	.word	0x40011400
 800664c:	40007800 	.word	0x40007800
 8006650:	2310      	movs	r3, #16
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e02c      	b.n	80066b0 <UART_SetConfig+0x348>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a72      	ldr	r2, [pc, #456]	; (8006824 <UART_SetConfig+0x4bc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d125      	bne.n	80066ac <UART_SetConfig+0x344>
 8006660:	4b71      	ldr	r3, [pc, #452]	; (8006828 <UART_SetConfig+0x4c0>)
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800666a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800666e:	d017      	beq.n	80066a0 <UART_SetConfig+0x338>
 8006670:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006674:	d817      	bhi.n	80066a6 <UART_SetConfig+0x33e>
 8006676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667a:	d00b      	beq.n	8006694 <UART_SetConfig+0x32c>
 800667c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006680:	d811      	bhi.n	80066a6 <UART_SetConfig+0x33e>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <UART_SetConfig+0x326>
 8006686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668a:	d006      	beq.n	800669a <UART_SetConfig+0x332>
 800668c:	e00b      	b.n	80066a6 <UART_SetConfig+0x33e>
 800668e:	2300      	movs	r3, #0
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e00d      	b.n	80066b0 <UART_SetConfig+0x348>
 8006694:	2302      	movs	r3, #2
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e00a      	b.n	80066b0 <UART_SetConfig+0x348>
 800669a:	2304      	movs	r3, #4
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e007      	b.n	80066b0 <UART_SetConfig+0x348>
 80066a0:	2308      	movs	r3, #8
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e004      	b.n	80066b0 <UART_SetConfig+0x348>
 80066a6:	2310      	movs	r3, #16
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e001      	b.n	80066b0 <UART_SetConfig+0x348>
 80066ac:	2310      	movs	r3, #16
 80066ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	d15b      	bne.n	8006772 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066ba:	7ffb      	ldrb	r3, [r7, #31]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d828      	bhi.n	8006712 <UART_SetConfig+0x3aa>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x360>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	08006713 	.word	0x08006713
 80066d8:	08006703 	.word	0x08006703
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006713 	.word	0x08006713
 80066e4:	08006713 	.word	0x08006713
 80066e8:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fd fdf8 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80066f0:	61b8      	str	r0, [r7, #24]
        break;
 80066f2:	e013      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f4:	f7fd fe08 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 80066f8:	61b8      	str	r0, [r7, #24]
        break;
 80066fa:	e00f      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b4b      	ldr	r3, [pc, #300]	; (800682c <UART_SetConfig+0x4c4>)
 80066fe:	61bb      	str	r3, [r7, #24]
        break;
 8006700:	e00c      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fd fd1b 	bl	800413c <HAL_RCC_GetSysClockFreq>
 8006706:	61b8      	str	r0, [r7, #24]
        break;
 8006708:	e008      	b.n	800671c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	61bb      	str	r3, [r7, #24]
        break;
 8006710:	e004      	b.n	800671c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	77bb      	strb	r3, [r7, #30]
        break;
 800671a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d074      	beq.n	800680c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	005a      	lsls	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	441a      	add	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b0f      	cmp	r3, #15
 800673c:	d916      	bls.n	800676c <UART_SetConfig+0x404>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006744:	d212      	bcs.n	800676c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f023 030f 	bic.w	r3, r3, #15
 800674e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	085b      	lsrs	r3, r3, #1
 8006754:	b29b      	uxth	r3, r3
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	b29a      	uxth	r2, r3
 800675c:	89fb      	ldrh	r3, [r7, #14]
 800675e:	4313      	orrs	r3, r2
 8006760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	89fa      	ldrh	r2, [r7, #14]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	e04f      	b.n	800680c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	77bb      	strb	r3, [r7, #30]
 8006770:	e04c      	b.n	800680c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d828      	bhi.n	80067ca <UART_SetConfig+0x462>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0x418>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067b5 	.word	0x080067b5
 800678c:	080067cb 	.word	0x080067cb
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067cb 	.word	0x080067cb
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
 80067a0:	080067c3 	.word	0x080067c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a4:	f7fd fd9c 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80067a8:	61b8      	str	r0, [r7, #24]
        break;
 80067aa:	e013      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ac:	f7fd fdac 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 80067b0:	61b8      	str	r0, [r7, #24]
        break;
 80067b2:	e00f      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <UART_SetConfig+0x4c4>)
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e00c      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ba:	f7fd fcbf 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80067be:	61b8      	str	r0, [r7, #24]
        break;
 80067c0:	e008      	b.n	80067d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c6:	61bb      	str	r3, [r7, #24]
        break;
 80067c8:	e004      	b.n	80067d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	77bb      	strb	r3, [r7, #30]
        break;
 80067d2:	bf00      	nop
    }

    if (pclk != 0U)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	085a      	lsrs	r2, r3, #1
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	441a      	add	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d909      	bls.n	8006808 <UART_SetConfig+0x4a0>
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fa:	d205      	bcs.n	8006808 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e001      	b.n	800680c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006818:	7fbb      	ldrb	r3, [r7, #30]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40007c00 	.word	0x40007c00
 8006828:	40023800 	.word	0x40023800
 800682c:	00f42400 	.word	0x00f42400

08006830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01a      	beq.n	8006946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692e:	d10a      	bne.n	8006946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006984:	f7fc fb70 	bl	8003068 <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d10e      	bne.n	80069b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f81b 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e011      	b.n	80069da <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b09c      	sub	sp, #112	; 0x70
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	e0a7      	b.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	f000 80a3 	beq.w	8006b44 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fe:	f7fc fb33 	bl	8003068 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d13f      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a28:	667b      	str	r3, [r7, #100]	; 0x64
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e068      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d050      	beq.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab0:	d148      	bne.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
 8006adc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	613b      	str	r3, [r7, #16]
   return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b0e:	623a      	str	r2, [r7, #32]
 8006b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	69f9      	ldr	r1, [r7, #28]
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e010      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	f43f af48 	beq.w	80069f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3770      	adds	r7, #112	; 0x70
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b095      	sub	sp, #84	; 0x54
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b94:	643b      	str	r3, [r7, #64]	; 0x40
 8006b96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d118      	bne.n	8006c16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	; 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fb71 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b08f      	sub	sp, #60	; 0x3c
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c6e:	2b21      	cmp	r3, #33	; 0x21
 8006c70:	d14c      	bne.n	8006d0c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d132      	bne.n	8006ce4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	613b      	str	r3, [r7, #16]
   return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e6      	bne.n	8006cb0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006ce2:	e013      	b.n	8006d0c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d0c:	bf00      	nop
 8006d0e:	373c      	adds	r7, #60	; 0x3c
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b091      	sub	sp, #68	; 0x44
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d24:	2b21      	cmp	r3, #33	; 0x21
 8006d26:	d151      	bne.n	8006dcc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d132      	bne.n	8006d9a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	623b      	str	r3, [r7, #32]
   return(result);
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
 8006d54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e6      	bne.n	8006d34 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	617b      	str	r3, [r7, #20]
   return(result);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006d98:	e018      	b.n	8006dcc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db4:	1c9a      	adds	r2, r3, #2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006dcc:	bf00      	nop
 8006dce:	3744      	adds	r7, #68	; 0x44
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6979      	ldr	r1, [r7, #20]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff fa82 	bl	8006328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e24:	bf00      	nop
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <__errno>:
 8006e2c:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <__errno+0x8>)
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	2000000c 	.word	0x2000000c

08006e38 <__libc_init_array>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	4d0d      	ldr	r5, [pc, #52]	; (8006e70 <__libc_init_array+0x38>)
 8006e3c:	4c0d      	ldr	r4, [pc, #52]	; (8006e74 <__libc_init_array+0x3c>)
 8006e3e:	1b64      	subs	r4, r4, r5
 8006e40:	10a4      	asrs	r4, r4, #2
 8006e42:	2600      	movs	r6, #0
 8006e44:	42a6      	cmp	r6, r4
 8006e46:	d109      	bne.n	8006e5c <__libc_init_array+0x24>
 8006e48:	4d0b      	ldr	r5, [pc, #44]	; (8006e78 <__libc_init_array+0x40>)
 8006e4a:	4c0c      	ldr	r4, [pc, #48]	; (8006e7c <__libc_init_array+0x44>)
 8006e4c:	f004 fc90 	bl	800b770 <_init>
 8006e50:	1b64      	subs	r4, r4, r5
 8006e52:	10a4      	asrs	r4, r4, #2
 8006e54:	2600      	movs	r6, #0
 8006e56:	42a6      	cmp	r6, r4
 8006e58:	d105      	bne.n	8006e66 <__libc_init_array+0x2e>
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e60:	4798      	blx	r3
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7ee      	b.n	8006e44 <__libc_init_array+0xc>
 8006e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6a:	4798      	blx	r3
 8006e6c:	3601      	adds	r6, #1
 8006e6e:	e7f2      	b.n	8006e56 <__libc_init_array+0x1e>
 8006e70:	0800bcbc 	.word	0x0800bcbc
 8006e74:	0800bcbc 	.word	0x0800bcbc
 8006e78:	0800bcbc 	.word	0x0800bcbc
 8006e7c:	0800bcc0 	.word	0x0800bcc0

08006e80 <memset>:
 8006e80:	4402      	add	r2, r0
 8006e82:	4603      	mov	r3, r0
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d100      	bne.n	8006e8a <memset+0xa>
 8006e88:	4770      	bx	lr
 8006e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8e:	e7f9      	b.n	8006e84 <memset+0x4>

08006e90 <__cvt>:
 8006e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e94:	ec55 4b10 	vmov	r4, r5, d0
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	460e      	mov	r6, r1
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	bfbb      	ittet	lt
 8006ea2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ea6:	461d      	movlt	r5, r3
 8006ea8:	2300      	movge	r3, #0
 8006eaa:	232d      	movlt	r3, #45	; 0x2d
 8006eac:	700b      	strb	r3, [r1, #0]
 8006eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eb4:	4691      	mov	r9, r2
 8006eb6:	f023 0820 	bic.w	r8, r3, #32
 8006eba:	bfbc      	itt	lt
 8006ebc:	4622      	movlt	r2, r4
 8006ebe:	4614      	movlt	r4, r2
 8006ec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ec4:	d005      	beq.n	8006ed2 <__cvt+0x42>
 8006ec6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006eca:	d100      	bne.n	8006ece <__cvt+0x3e>
 8006ecc:	3601      	adds	r6, #1
 8006ece:	2102      	movs	r1, #2
 8006ed0:	e000      	b.n	8006ed4 <__cvt+0x44>
 8006ed2:	2103      	movs	r1, #3
 8006ed4:	ab03      	add	r3, sp, #12
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	ab02      	add	r3, sp, #8
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	ec45 4b10 	vmov	d0, r4, r5
 8006ee0:	4653      	mov	r3, sl
 8006ee2:	4632      	mov	r2, r6
 8006ee4:	f001 fe28 	bl	8008b38 <_dtoa_r>
 8006ee8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eec:	4607      	mov	r7, r0
 8006eee:	d102      	bne.n	8006ef6 <__cvt+0x66>
 8006ef0:	f019 0f01 	tst.w	r9, #1
 8006ef4:	d022      	beq.n	8006f3c <__cvt+0xac>
 8006ef6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006efa:	eb07 0906 	add.w	r9, r7, r6
 8006efe:	d110      	bne.n	8006f22 <__cvt+0x92>
 8006f00:	783b      	ldrb	r3, [r7, #0]
 8006f02:	2b30      	cmp	r3, #48	; 0x30
 8006f04:	d10a      	bne.n	8006f1c <__cvt+0x8c>
 8006f06:	2200      	movs	r2, #0
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	f7f9 fdfb 	bl	8000b08 <__aeabi_dcmpeq>
 8006f12:	b918      	cbnz	r0, 8006f1c <__cvt+0x8c>
 8006f14:	f1c6 0601 	rsb	r6, r6, #1
 8006f18:	f8ca 6000 	str.w	r6, [sl]
 8006f1c:	f8da 3000 	ldr.w	r3, [sl]
 8006f20:	4499      	add	r9, r3
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 fded 	bl	8000b08 <__aeabi_dcmpeq>
 8006f2e:	b108      	cbz	r0, 8006f34 <__cvt+0xa4>
 8006f30:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f34:	2230      	movs	r2, #48	; 0x30
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	454b      	cmp	r3, r9
 8006f3a:	d307      	bcc.n	8006f4c <__cvt+0xbc>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f40:	1bdb      	subs	r3, r3, r7
 8006f42:	4638      	mov	r0, r7
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	b004      	add	sp, #16
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4c:	1c59      	adds	r1, r3, #1
 8006f4e:	9103      	str	r1, [sp, #12]
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e7f0      	b.n	8006f36 <__cvt+0xa6>

08006f54 <__exponent>:
 8006f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f56:	4603      	mov	r3, r0
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	bfb8      	it	lt
 8006f5c:	4249      	neglt	r1, r1
 8006f5e:	f803 2b02 	strb.w	r2, [r3], #2
 8006f62:	bfb4      	ite	lt
 8006f64:	222d      	movlt	r2, #45	; 0x2d
 8006f66:	222b      	movge	r2, #43	; 0x2b
 8006f68:	2909      	cmp	r1, #9
 8006f6a:	7042      	strb	r2, [r0, #1]
 8006f6c:	dd2a      	ble.n	8006fc4 <__exponent+0x70>
 8006f6e:	f10d 0407 	add.w	r4, sp, #7
 8006f72:	46a4      	mov	ip, r4
 8006f74:	270a      	movs	r7, #10
 8006f76:	46a6      	mov	lr, r4
 8006f78:	460a      	mov	r2, r1
 8006f7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f7e:	fb07 1516 	mls	r5, r7, r6, r1
 8006f82:	3530      	adds	r5, #48	; 0x30
 8006f84:	2a63      	cmp	r2, #99	; 0x63
 8006f86:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f8e:	4631      	mov	r1, r6
 8006f90:	dcf1      	bgt.n	8006f76 <__exponent+0x22>
 8006f92:	3130      	adds	r1, #48	; 0x30
 8006f94:	f1ae 0502 	sub.w	r5, lr, #2
 8006f98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f9c:	1c44      	adds	r4, r0, #1
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4561      	cmp	r1, ip
 8006fa2:	d30a      	bcc.n	8006fba <__exponent+0x66>
 8006fa4:	f10d 0209 	add.w	r2, sp, #9
 8006fa8:	eba2 020e 	sub.w	r2, r2, lr
 8006fac:	4565      	cmp	r5, ip
 8006fae:	bf88      	it	hi
 8006fb0:	2200      	movhi	r2, #0
 8006fb2:	4413      	add	r3, r2
 8006fb4:	1a18      	subs	r0, r3, r0
 8006fb6:	b003      	add	sp, #12
 8006fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fbe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fc2:	e7ed      	b.n	8006fa0 <__exponent+0x4c>
 8006fc4:	2330      	movs	r3, #48	; 0x30
 8006fc6:	3130      	adds	r1, #48	; 0x30
 8006fc8:	7083      	strb	r3, [r0, #2]
 8006fca:	70c1      	strb	r1, [r0, #3]
 8006fcc:	1d03      	adds	r3, r0, #4
 8006fce:	e7f1      	b.n	8006fb4 <__exponent+0x60>

08006fd0 <_printf_float>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ed2d 8b02 	vpush	{d8}
 8006fd8:	b08d      	sub	sp, #52	; 0x34
 8006fda:	460c      	mov	r4, r1
 8006fdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	461f      	mov	r7, r3
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	f002 ff05 	bl	8009df4 <_localeconv_r>
 8006fea:	f8d0 a000 	ldr.w	sl, [r0]
 8006fee:	4650      	mov	r0, sl
 8006ff0:	f7f9 f90e 	bl	8000210 <strlen>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8007000:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007004:	3307      	adds	r3, #7
 8007006:	f023 0307 	bic.w	r3, r3, #7
 800700a:	f103 0208 	add.w	r2, r3, #8
 800700e:	f8c8 2000 	str.w	r2, [r8]
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800701a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800701e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	f8cd 8018 	str.w	r8, [sp, #24]
 8007028:	ee08 0a10 	vmov	s16, r0
 800702c:	4b9f      	ldr	r3, [pc, #636]	; (80072ac <_printf_float+0x2dc>)
 800702e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	f7f9 fd99 	bl	8000b6c <__aeabi_dcmpun>
 800703a:	bb88      	cbnz	r0, 80070a0 <_printf_float+0xd0>
 800703c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007040:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <_printf_float+0x2dc>)
 8007042:	f04f 32ff 	mov.w	r2, #4294967295
 8007046:	f7f9 fd73 	bl	8000b30 <__aeabi_dcmple>
 800704a:	bb48      	cbnz	r0, 80070a0 <_printf_float+0xd0>
 800704c:	2200      	movs	r2, #0
 800704e:	2300      	movs	r3, #0
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 fd62 	bl	8000b1c <__aeabi_dcmplt>
 8007058:	b110      	cbz	r0, 8007060 <_printf_float+0x90>
 800705a:	232d      	movs	r3, #45	; 0x2d
 800705c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007060:	4b93      	ldr	r3, [pc, #588]	; (80072b0 <_printf_float+0x2e0>)
 8007062:	4894      	ldr	r0, [pc, #592]	; (80072b4 <_printf_float+0x2e4>)
 8007064:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007068:	bf94      	ite	ls
 800706a:	4698      	movls	r8, r3
 800706c:	4680      	movhi	r8, r0
 800706e:	2303      	movs	r3, #3
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	f023 0204 	bic.w	r2, r3, #4
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	f04f 0900 	mov.w	r9, #0
 800707e:	9700      	str	r7, [sp, #0]
 8007080:	4633      	mov	r3, r6
 8007082:	aa0b      	add	r2, sp, #44	; 0x2c
 8007084:	4621      	mov	r1, r4
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f9d8 	bl	800743c <_printf_common>
 800708c:	3001      	adds	r0, #1
 800708e:	f040 8090 	bne.w	80071b2 <_printf_float+0x1e2>
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	b00d      	add	sp, #52	; 0x34
 8007098:	ecbd 8b02 	vpop	{d8}
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fd60 	bl	8000b6c <__aeabi_dcmpun>
 80070ac:	b140      	cbz	r0, 80070c0 <_printf_float+0xf0>
 80070ae:	464b      	mov	r3, r9
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bfbc      	itt	lt
 80070b4:	232d      	movlt	r3, #45	; 0x2d
 80070b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070ba:	487f      	ldr	r0, [pc, #508]	; (80072b8 <_printf_float+0x2e8>)
 80070bc:	4b7f      	ldr	r3, [pc, #508]	; (80072bc <_printf_float+0x2ec>)
 80070be:	e7d1      	b.n	8007064 <_printf_float+0x94>
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070c6:	9206      	str	r2, [sp, #24]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	d13f      	bne.n	800714c <_printf_float+0x17c>
 80070cc:	2306      	movs	r3, #6
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	9b05      	ldr	r3, [sp, #20]
 80070d2:	6861      	ldr	r1, [r4, #4]
 80070d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070d8:	2300      	movs	r3, #0
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	ab0a      	add	r3, sp, #40	; 0x28
 80070de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070e2:	ab09      	add	r3, sp, #36	; 0x24
 80070e4:	ec49 8b10 	vmov	d0, r8, r9
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070f0:	4628      	mov	r0, r5
 80070f2:	f7ff fecd 	bl	8006e90 <__cvt>
 80070f6:	9b06      	ldr	r3, [sp, #24]
 80070f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fa:	2b47      	cmp	r3, #71	; 0x47
 80070fc:	4680      	mov	r8, r0
 80070fe:	d108      	bne.n	8007112 <_printf_float+0x142>
 8007100:	1cc8      	adds	r0, r1, #3
 8007102:	db02      	blt.n	800710a <_printf_float+0x13a>
 8007104:	6863      	ldr	r3, [r4, #4]
 8007106:	4299      	cmp	r1, r3
 8007108:	dd41      	ble.n	800718e <_printf_float+0x1be>
 800710a:	f1ab 0b02 	sub.w	fp, fp, #2
 800710e:	fa5f fb8b 	uxtb.w	fp, fp
 8007112:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007116:	d820      	bhi.n	800715a <_printf_float+0x18a>
 8007118:	3901      	subs	r1, #1
 800711a:	465a      	mov	r2, fp
 800711c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007120:	9109      	str	r1, [sp, #36]	; 0x24
 8007122:	f7ff ff17 	bl	8006f54 <__exponent>
 8007126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007128:	1813      	adds	r3, r2, r0
 800712a:	2a01      	cmp	r2, #1
 800712c:	4681      	mov	r9, r0
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	dc02      	bgt.n	8007138 <_printf_float+0x168>
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	07d2      	lsls	r2, r2, #31
 8007136:	d501      	bpl.n	800713c <_printf_float+0x16c>
 8007138:	3301      	adds	r3, #1
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007140:	2b00      	cmp	r3, #0
 8007142:	d09c      	beq.n	800707e <_printf_float+0xae>
 8007144:	232d      	movs	r3, #45	; 0x2d
 8007146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714a:	e798      	b.n	800707e <_printf_float+0xae>
 800714c:	9a06      	ldr	r2, [sp, #24]
 800714e:	2a47      	cmp	r2, #71	; 0x47
 8007150:	d1be      	bne.n	80070d0 <_printf_float+0x100>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1bc      	bne.n	80070d0 <_printf_float+0x100>
 8007156:	2301      	movs	r3, #1
 8007158:	e7b9      	b.n	80070ce <_printf_float+0xfe>
 800715a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800715e:	d118      	bne.n	8007192 <_printf_float+0x1c2>
 8007160:	2900      	cmp	r1, #0
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	dd0b      	ble.n	800717e <_printf_float+0x1ae>
 8007166:	6121      	str	r1, [r4, #16]
 8007168:	b913      	cbnz	r3, 8007170 <_printf_float+0x1a0>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	07d0      	lsls	r0, r2, #31
 800716e:	d502      	bpl.n	8007176 <_printf_float+0x1a6>
 8007170:	3301      	adds	r3, #1
 8007172:	440b      	add	r3, r1
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	65a1      	str	r1, [r4, #88]	; 0x58
 8007178:	f04f 0900 	mov.w	r9, #0
 800717c:	e7de      	b.n	800713c <_printf_float+0x16c>
 800717e:	b913      	cbnz	r3, 8007186 <_printf_float+0x1b6>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	07d2      	lsls	r2, r2, #31
 8007184:	d501      	bpl.n	800718a <_printf_float+0x1ba>
 8007186:	3302      	adds	r3, #2
 8007188:	e7f4      	b.n	8007174 <_printf_float+0x1a4>
 800718a:	2301      	movs	r3, #1
 800718c:	e7f2      	b.n	8007174 <_printf_float+0x1a4>
 800718e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007194:	4299      	cmp	r1, r3
 8007196:	db05      	blt.n	80071a4 <_printf_float+0x1d4>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	6121      	str	r1, [r4, #16]
 800719c:	07d8      	lsls	r0, r3, #31
 800719e:	d5ea      	bpl.n	8007176 <_printf_float+0x1a6>
 80071a0:	1c4b      	adds	r3, r1, #1
 80071a2:	e7e7      	b.n	8007174 <_printf_float+0x1a4>
 80071a4:	2900      	cmp	r1, #0
 80071a6:	bfd4      	ite	le
 80071a8:	f1c1 0202 	rsble	r2, r1, #2
 80071ac:	2201      	movgt	r2, #1
 80071ae:	4413      	add	r3, r2
 80071b0:	e7e0      	b.n	8007174 <_printf_float+0x1a4>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	055a      	lsls	r2, r3, #21
 80071b6:	d407      	bmi.n	80071c8 <_printf_float+0x1f8>
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	4642      	mov	r2, r8
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	d12c      	bne.n	8007220 <_printf_float+0x250>
 80071c6:	e764      	b.n	8007092 <_printf_float+0xc2>
 80071c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071cc:	f240 80e0 	bls.w	8007390 <_printf_float+0x3c0>
 80071d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f7f9 fc96 	bl	8000b08 <__aeabi_dcmpeq>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d034      	beq.n	800724a <_printf_float+0x27a>
 80071e0:	4a37      	ldr	r2, [pc, #220]	; (80072c0 <_printf_float+0x2f0>)
 80071e2:	2301      	movs	r3, #1
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af51 	beq.w	8007092 <_printf_float+0xc2>
 80071f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f4:	429a      	cmp	r2, r3
 80071f6:	db02      	blt.n	80071fe <_printf_float+0x22e>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	07d8      	lsls	r0, r3, #31
 80071fc:	d510      	bpl.n	8007220 <_printf_float+0x250>
 80071fe:	ee18 3a10 	vmov	r3, s16
 8007202:	4652      	mov	r2, sl
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af41 	beq.w	8007092 <_printf_float+0xc2>
 8007210:	f04f 0800 	mov.w	r8, #0
 8007214:	f104 091a 	add.w	r9, r4, #26
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	3b01      	subs	r3, #1
 800721c:	4543      	cmp	r3, r8
 800721e:	dc09      	bgt.n	8007234 <_printf_float+0x264>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	079b      	lsls	r3, r3, #30
 8007224:	f100 8105 	bmi.w	8007432 <_printf_float+0x462>
 8007228:	68e0      	ldr	r0, [r4, #12]
 800722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722c:	4298      	cmp	r0, r3
 800722e:	bfb8      	it	lt
 8007230:	4618      	movlt	r0, r3
 8007232:	e730      	b.n	8007096 <_printf_float+0xc6>
 8007234:	2301      	movs	r3, #1
 8007236:	464a      	mov	r2, r9
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af27 	beq.w	8007092 <_printf_float+0xc2>
 8007244:	f108 0801 	add.w	r8, r8, #1
 8007248:	e7e6      	b.n	8007218 <_printf_float+0x248>
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	dc39      	bgt.n	80072c4 <_printf_float+0x2f4>
 8007250:	4a1b      	ldr	r2, [pc, #108]	; (80072c0 <_printf_float+0x2f0>)
 8007252:	2301      	movs	r3, #1
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f af19 	beq.w	8007092 <_printf_float+0xc2>
 8007260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007264:	4313      	orrs	r3, r2
 8007266:	d102      	bne.n	800726e <_printf_float+0x29e>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	d5d8      	bpl.n	8007220 <_printf_float+0x250>
 800726e:	ee18 3a10 	vmov	r3, s16
 8007272:	4652      	mov	r2, sl
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f af09 	beq.w	8007092 <_printf_float+0xc2>
 8007280:	f04f 0900 	mov.w	r9, #0
 8007284:	f104 0a1a 	add.w	sl, r4, #26
 8007288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728a:	425b      	negs	r3, r3
 800728c:	454b      	cmp	r3, r9
 800728e:	dc01      	bgt.n	8007294 <_printf_float+0x2c4>
 8007290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007292:	e792      	b.n	80071ba <_printf_float+0x1ea>
 8007294:	2301      	movs	r3, #1
 8007296:	4652      	mov	r2, sl
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f aef7 	beq.w	8007092 <_printf_float+0xc2>
 80072a4:	f109 0901 	add.w	r9, r9, #1
 80072a8:	e7ee      	b.n	8007288 <_printf_float+0x2b8>
 80072aa:	bf00      	nop
 80072ac:	7fefffff 	.word	0x7fefffff
 80072b0:	0800b810 	.word	0x0800b810
 80072b4:	0800b814 	.word	0x0800b814
 80072b8:	0800b81c 	.word	0x0800b81c
 80072bc:	0800b818 	.word	0x0800b818
 80072c0:	0800b820 	.word	0x0800b820
 80072c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bfa8      	it	ge
 80072cc:	461a      	movge	r2, r3
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	4691      	mov	r9, r2
 80072d2:	dc37      	bgt.n	8007344 <_printf_float+0x374>
 80072d4:	f04f 0b00 	mov.w	fp, #0
 80072d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072dc:	f104 021a 	add.w	r2, r4, #26
 80072e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	eba3 0309 	sub.w	r3, r3, r9
 80072e8:	455b      	cmp	r3, fp
 80072ea:	dc33      	bgt.n	8007354 <_printf_float+0x384>
 80072ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f0:	429a      	cmp	r2, r3
 80072f2:	db3b      	blt.n	800736c <_printf_float+0x39c>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07da      	lsls	r2, r3, #31
 80072f8:	d438      	bmi.n	800736c <_printf_float+0x39c>
 80072fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fc:	9a05      	ldr	r2, [sp, #20]
 80072fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007300:	1a9a      	subs	r2, r3, r2
 8007302:	eba3 0901 	sub.w	r9, r3, r1
 8007306:	4591      	cmp	r9, r2
 8007308:	bfa8      	it	ge
 800730a:	4691      	movge	r9, r2
 800730c:	f1b9 0f00 	cmp.w	r9, #0
 8007310:	dc35      	bgt.n	800737e <_printf_float+0x3ae>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800731a:	f104 0a1a 	add.w	sl, r4, #26
 800731e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	eba3 0309 	sub.w	r3, r3, r9
 8007328:	4543      	cmp	r3, r8
 800732a:	f77f af79 	ble.w	8007220 <_printf_float+0x250>
 800732e:	2301      	movs	r3, #1
 8007330:	4652      	mov	r2, sl
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f aeaa 	beq.w	8007092 <_printf_float+0xc2>
 800733e:	f108 0801 	add.w	r8, r8, #1
 8007342:	e7ec      	b.n	800731e <_printf_float+0x34e>
 8007344:	4613      	mov	r3, r2
 8007346:	4631      	mov	r1, r6
 8007348:	4642      	mov	r2, r8
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	d1c0      	bne.n	80072d4 <_printf_float+0x304>
 8007352:	e69e      	b.n	8007092 <_printf_float+0xc2>
 8007354:	2301      	movs	r3, #1
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	9205      	str	r2, [sp, #20]
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f ae97 	beq.w	8007092 <_printf_float+0xc2>
 8007364:	9a05      	ldr	r2, [sp, #20]
 8007366:	f10b 0b01 	add.w	fp, fp, #1
 800736a:	e7b9      	b.n	80072e0 <_printf_float+0x310>
 800736c:	ee18 3a10 	vmov	r3, s16
 8007370:	4652      	mov	r2, sl
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	d1be      	bne.n	80072fa <_printf_float+0x32a>
 800737c:	e689      	b.n	8007092 <_printf_float+0xc2>
 800737e:	9a05      	ldr	r2, [sp, #20]
 8007380:	464b      	mov	r3, r9
 8007382:	4442      	add	r2, r8
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	d1c1      	bne.n	8007312 <_printf_float+0x342>
 800738e:	e680      	b.n	8007092 <_printf_float+0xc2>
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	2a01      	cmp	r2, #1
 8007394:	dc01      	bgt.n	800739a <_printf_float+0x3ca>
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d538      	bpl.n	800740c <_printf_float+0x43c>
 800739a:	2301      	movs	r3, #1
 800739c:	4642      	mov	r2, r8
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae74 	beq.w	8007092 <_printf_float+0xc2>
 80073aa:	ee18 3a10 	vmov	r3, s16
 80073ae:	4652      	mov	r2, sl
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f ae6b 	beq.w	8007092 <_printf_float+0xc2>
 80073bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073c0:	2200      	movs	r2, #0
 80073c2:	2300      	movs	r3, #0
 80073c4:	f7f9 fba0 	bl	8000b08 <__aeabi_dcmpeq>
 80073c8:	b9d8      	cbnz	r0, 8007402 <_printf_float+0x432>
 80073ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073cc:	f108 0201 	add.w	r2, r8, #1
 80073d0:	3b01      	subs	r3, #1
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	d10e      	bne.n	80073fa <_printf_float+0x42a>
 80073dc:	e659      	b.n	8007092 <_printf_float+0xc2>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f ae52 	beq.w	8007092 <_printf_float+0xc2>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4543      	cmp	r3, r8
 80073f8:	dcf1      	bgt.n	80073de <_printf_float+0x40e>
 80073fa:	464b      	mov	r3, r9
 80073fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007400:	e6dc      	b.n	80071bc <_printf_float+0x1ec>
 8007402:	f04f 0800 	mov.w	r8, #0
 8007406:	f104 0a1a 	add.w	sl, r4, #26
 800740a:	e7f2      	b.n	80073f2 <_printf_float+0x422>
 800740c:	2301      	movs	r3, #1
 800740e:	4642      	mov	r2, r8
 8007410:	e7df      	b.n	80073d2 <_printf_float+0x402>
 8007412:	2301      	movs	r3, #1
 8007414:	464a      	mov	r2, r9
 8007416:	4631      	mov	r1, r6
 8007418:	4628      	mov	r0, r5
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f ae38 	beq.w	8007092 <_printf_float+0xc2>
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800742a:	1a5b      	subs	r3, r3, r1
 800742c:	4543      	cmp	r3, r8
 800742e:	dcf0      	bgt.n	8007412 <_printf_float+0x442>
 8007430:	e6fa      	b.n	8007228 <_printf_float+0x258>
 8007432:	f04f 0800 	mov.w	r8, #0
 8007436:	f104 0919 	add.w	r9, r4, #25
 800743a:	e7f4      	b.n	8007426 <_printf_float+0x456>

0800743c <_printf_common>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	4616      	mov	r6, r2
 8007442:	4699      	mov	r9, r3
 8007444:	688a      	ldr	r2, [r1, #8]
 8007446:	690b      	ldr	r3, [r1, #16]
 8007448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800744c:	4293      	cmp	r3, r2
 800744e:	bfb8      	it	lt
 8007450:	4613      	movlt	r3, r2
 8007452:	6033      	str	r3, [r6, #0]
 8007454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007458:	4607      	mov	r7, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b10a      	cbz	r2, 8007462 <_printf_common+0x26>
 800745e:	3301      	adds	r3, #1
 8007460:	6033      	str	r3, [r6, #0]
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	0699      	lsls	r1, r3, #26
 8007466:	bf42      	ittt	mi
 8007468:	6833      	ldrmi	r3, [r6, #0]
 800746a:	3302      	addmi	r3, #2
 800746c:	6033      	strmi	r3, [r6, #0]
 800746e:	6825      	ldr	r5, [r4, #0]
 8007470:	f015 0506 	ands.w	r5, r5, #6
 8007474:	d106      	bne.n	8007484 <_printf_common+0x48>
 8007476:	f104 0a19 	add.w	sl, r4, #25
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	6832      	ldr	r2, [r6, #0]
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	42ab      	cmp	r3, r5
 8007482:	dc26      	bgt.n	80074d2 <_printf_common+0x96>
 8007484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007488:	1e13      	subs	r3, r2, #0
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	bf18      	it	ne
 800748e:	2301      	movne	r3, #1
 8007490:	0692      	lsls	r2, r2, #26
 8007492:	d42b      	bmi.n	80074ec <_printf_common+0xb0>
 8007494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007498:	4649      	mov	r1, r9
 800749a:	4638      	mov	r0, r7
 800749c:	47c0      	blx	r8
 800749e:	3001      	adds	r0, #1
 80074a0:	d01e      	beq.n	80074e0 <_printf_common+0xa4>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	68e5      	ldr	r5, [r4, #12]
 80074a6:	6832      	ldr	r2, [r6, #0]
 80074a8:	f003 0306 	and.w	r3, r3, #6
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	bf08      	it	eq
 80074b0:	1aad      	subeq	r5, r5, r2
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	bf0c      	ite	eq
 80074b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074bc:	2500      	movne	r5, #0
 80074be:	4293      	cmp	r3, r2
 80074c0:	bfc4      	itt	gt
 80074c2:	1a9b      	subgt	r3, r3, r2
 80074c4:	18ed      	addgt	r5, r5, r3
 80074c6:	2600      	movs	r6, #0
 80074c8:	341a      	adds	r4, #26
 80074ca:	42b5      	cmp	r5, r6
 80074cc:	d11a      	bne.n	8007504 <_printf_common+0xc8>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e008      	b.n	80074e4 <_printf_common+0xa8>
 80074d2:	2301      	movs	r3, #1
 80074d4:	4652      	mov	r2, sl
 80074d6:	4649      	mov	r1, r9
 80074d8:	4638      	mov	r0, r7
 80074da:	47c0      	blx	r8
 80074dc:	3001      	adds	r0, #1
 80074de:	d103      	bne.n	80074e8 <_printf_common+0xac>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	3501      	adds	r5, #1
 80074ea:	e7c6      	b.n	800747a <_printf_common+0x3e>
 80074ec:	18e1      	adds	r1, r4, r3
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	2030      	movs	r0, #48	; 0x30
 80074f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074f6:	4422      	add	r2, r4
 80074f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007500:	3302      	adds	r3, #2
 8007502:	e7c7      	b.n	8007494 <_printf_common+0x58>
 8007504:	2301      	movs	r3, #1
 8007506:	4622      	mov	r2, r4
 8007508:	4649      	mov	r1, r9
 800750a:	4638      	mov	r0, r7
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d0e6      	beq.n	80074e0 <_printf_common+0xa4>
 8007512:	3601      	adds	r6, #1
 8007514:	e7d9      	b.n	80074ca <_printf_common+0x8e>
	...

08007518 <_printf_i>:
 8007518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	7e0f      	ldrb	r7, [r1, #24]
 800751e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007520:	2f78      	cmp	r7, #120	; 0x78
 8007522:	4691      	mov	r9, r2
 8007524:	4680      	mov	r8, r0
 8007526:	460c      	mov	r4, r1
 8007528:	469a      	mov	sl, r3
 800752a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800752e:	d807      	bhi.n	8007540 <_printf_i+0x28>
 8007530:	2f62      	cmp	r7, #98	; 0x62
 8007532:	d80a      	bhi.n	800754a <_printf_i+0x32>
 8007534:	2f00      	cmp	r7, #0
 8007536:	f000 80d8 	beq.w	80076ea <_printf_i+0x1d2>
 800753a:	2f58      	cmp	r7, #88	; 0x58
 800753c:	f000 80a3 	beq.w	8007686 <_printf_i+0x16e>
 8007540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007548:	e03a      	b.n	80075c0 <_printf_i+0xa8>
 800754a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800754e:	2b15      	cmp	r3, #21
 8007550:	d8f6      	bhi.n	8007540 <_printf_i+0x28>
 8007552:	a101      	add	r1, pc, #4	; (adr r1, 8007558 <_printf_i+0x40>)
 8007554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007558:	080075b1 	.word	0x080075b1
 800755c:	080075c5 	.word	0x080075c5
 8007560:	08007541 	.word	0x08007541
 8007564:	08007541 	.word	0x08007541
 8007568:	08007541 	.word	0x08007541
 800756c:	08007541 	.word	0x08007541
 8007570:	080075c5 	.word	0x080075c5
 8007574:	08007541 	.word	0x08007541
 8007578:	08007541 	.word	0x08007541
 800757c:	08007541 	.word	0x08007541
 8007580:	08007541 	.word	0x08007541
 8007584:	080076d1 	.word	0x080076d1
 8007588:	080075f5 	.word	0x080075f5
 800758c:	080076b3 	.word	0x080076b3
 8007590:	08007541 	.word	0x08007541
 8007594:	08007541 	.word	0x08007541
 8007598:	080076f3 	.word	0x080076f3
 800759c:	08007541 	.word	0x08007541
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	08007541 	.word	0x08007541
 80075a8:	08007541 	.word	0x08007541
 80075ac:	080076bb 	.word	0x080076bb
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	1d1a      	adds	r2, r3, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	602a      	str	r2, [r5, #0]
 80075b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0a3      	b.n	800770c <_printf_i+0x1f4>
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	6829      	ldr	r1, [r5, #0]
 80075c8:	0606      	lsls	r6, r0, #24
 80075ca:	f101 0304 	add.w	r3, r1, #4
 80075ce:	d50a      	bpl.n	80075e6 <_printf_i+0xce>
 80075d0:	680e      	ldr	r6, [r1, #0]
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	da03      	bge.n	80075e0 <_printf_i+0xc8>
 80075d8:	232d      	movs	r3, #45	; 0x2d
 80075da:	4276      	negs	r6, r6
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	485e      	ldr	r0, [pc, #376]	; (800775c <_printf_i+0x244>)
 80075e2:	230a      	movs	r3, #10
 80075e4:	e019      	b.n	800761a <_printf_i+0x102>
 80075e6:	680e      	ldr	r6, [r1, #0]
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075ee:	bf18      	it	ne
 80075f0:	b236      	sxthne	r6, r6
 80075f2:	e7ef      	b.n	80075d4 <_printf_i+0xbc>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	1d19      	adds	r1, r3, #4
 80075fa:	6029      	str	r1, [r5, #0]
 80075fc:	0601      	lsls	r1, r0, #24
 80075fe:	d501      	bpl.n	8007604 <_printf_i+0xec>
 8007600:	681e      	ldr	r6, [r3, #0]
 8007602:	e002      	b.n	800760a <_printf_i+0xf2>
 8007604:	0646      	lsls	r6, r0, #25
 8007606:	d5fb      	bpl.n	8007600 <_printf_i+0xe8>
 8007608:	881e      	ldrh	r6, [r3, #0]
 800760a:	4854      	ldr	r0, [pc, #336]	; (800775c <_printf_i+0x244>)
 800760c:	2f6f      	cmp	r7, #111	; 0x6f
 800760e:	bf0c      	ite	eq
 8007610:	2308      	moveq	r3, #8
 8007612:	230a      	movne	r3, #10
 8007614:	2100      	movs	r1, #0
 8007616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800761a:	6865      	ldr	r5, [r4, #4]
 800761c:	60a5      	str	r5, [r4, #8]
 800761e:	2d00      	cmp	r5, #0
 8007620:	bfa2      	ittt	ge
 8007622:	6821      	ldrge	r1, [r4, #0]
 8007624:	f021 0104 	bicge.w	r1, r1, #4
 8007628:	6021      	strge	r1, [r4, #0]
 800762a:	b90e      	cbnz	r6, 8007630 <_printf_i+0x118>
 800762c:	2d00      	cmp	r5, #0
 800762e:	d04d      	beq.n	80076cc <_printf_i+0x1b4>
 8007630:	4615      	mov	r5, r2
 8007632:	fbb6 f1f3 	udiv	r1, r6, r3
 8007636:	fb03 6711 	mls	r7, r3, r1, r6
 800763a:	5dc7      	ldrb	r7, [r0, r7]
 800763c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007640:	4637      	mov	r7, r6
 8007642:	42bb      	cmp	r3, r7
 8007644:	460e      	mov	r6, r1
 8007646:	d9f4      	bls.n	8007632 <_printf_i+0x11a>
 8007648:	2b08      	cmp	r3, #8
 800764a:	d10b      	bne.n	8007664 <_printf_i+0x14c>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07de      	lsls	r6, r3, #31
 8007650:	d508      	bpl.n	8007664 <_printf_i+0x14c>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	6861      	ldr	r1, [r4, #4]
 8007656:	4299      	cmp	r1, r3
 8007658:	bfde      	ittt	le
 800765a:	2330      	movle	r3, #48	; 0x30
 800765c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007664:	1b52      	subs	r2, r2, r5
 8007666:	6122      	str	r2, [r4, #16]
 8007668:	f8cd a000 	str.w	sl, [sp]
 800766c:	464b      	mov	r3, r9
 800766e:	aa03      	add	r2, sp, #12
 8007670:	4621      	mov	r1, r4
 8007672:	4640      	mov	r0, r8
 8007674:	f7ff fee2 	bl	800743c <_printf_common>
 8007678:	3001      	adds	r0, #1
 800767a:	d14c      	bne.n	8007716 <_printf_i+0x1fe>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	4835      	ldr	r0, [pc, #212]	; (800775c <_printf_i+0x244>)
 8007688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800768c:	6829      	ldr	r1, [r5, #0]
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f851 6b04 	ldr.w	r6, [r1], #4
 8007694:	6029      	str	r1, [r5, #0]
 8007696:	061d      	lsls	r5, r3, #24
 8007698:	d514      	bpl.n	80076c4 <_printf_i+0x1ac>
 800769a:	07df      	lsls	r7, r3, #31
 800769c:	bf44      	itt	mi
 800769e:	f043 0320 	orrmi.w	r3, r3, #32
 80076a2:	6023      	strmi	r3, [r4, #0]
 80076a4:	b91e      	cbnz	r6, 80076ae <_printf_i+0x196>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f023 0320 	bic.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	2310      	movs	r3, #16
 80076b0:	e7b0      	b.n	8007614 <_printf_i+0xfc>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f043 0320 	orr.w	r3, r3, #32
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	2378      	movs	r3, #120	; 0x78
 80076bc:	4828      	ldr	r0, [pc, #160]	; (8007760 <_printf_i+0x248>)
 80076be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076c2:	e7e3      	b.n	800768c <_printf_i+0x174>
 80076c4:	0659      	lsls	r1, r3, #25
 80076c6:	bf48      	it	mi
 80076c8:	b2b6      	uxthmi	r6, r6
 80076ca:	e7e6      	b.n	800769a <_printf_i+0x182>
 80076cc:	4615      	mov	r5, r2
 80076ce:	e7bb      	b.n	8007648 <_printf_i+0x130>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	6826      	ldr	r6, [r4, #0]
 80076d4:	6961      	ldr	r1, [r4, #20]
 80076d6:	1d18      	adds	r0, r3, #4
 80076d8:	6028      	str	r0, [r5, #0]
 80076da:	0635      	lsls	r5, r6, #24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	d501      	bpl.n	80076e4 <_printf_i+0x1cc>
 80076e0:	6019      	str	r1, [r3, #0]
 80076e2:	e002      	b.n	80076ea <_printf_i+0x1d2>
 80076e4:	0670      	lsls	r0, r6, #25
 80076e6:	d5fb      	bpl.n	80076e0 <_printf_i+0x1c8>
 80076e8:	8019      	strh	r1, [r3, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	4615      	mov	r5, r2
 80076f0:	e7ba      	b.n	8007668 <_printf_i+0x150>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	1d1a      	adds	r2, r3, #4
 80076f6:	602a      	str	r2, [r5, #0]
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	2100      	movs	r1, #0
 80076fe:	4628      	mov	r0, r5
 8007700:	f7f8 fd8e 	bl	8000220 <memchr>
 8007704:	b108      	cbz	r0, 800770a <_printf_i+0x1f2>
 8007706:	1b40      	subs	r0, r0, r5
 8007708:	6060      	str	r0, [r4, #4]
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	2300      	movs	r3, #0
 8007710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007714:	e7a8      	b.n	8007668 <_printf_i+0x150>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	462a      	mov	r2, r5
 800771a:	4649      	mov	r1, r9
 800771c:	4640      	mov	r0, r8
 800771e:	47d0      	blx	sl
 8007720:	3001      	adds	r0, #1
 8007722:	d0ab      	beq.n	800767c <_printf_i+0x164>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	079b      	lsls	r3, r3, #30
 8007728:	d413      	bmi.n	8007752 <_printf_i+0x23a>
 800772a:	68e0      	ldr	r0, [r4, #12]
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	4298      	cmp	r0, r3
 8007730:	bfb8      	it	lt
 8007732:	4618      	movlt	r0, r3
 8007734:	e7a4      	b.n	8007680 <_printf_i+0x168>
 8007736:	2301      	movs	r3, #1
 8007738:	4632      	mov	r2, r6
 800773a:	4649      	mov	r1, r9
 800773c:	4640      	mov	r0, r8
 800773e:	47d0      	blx	sl
 8007740:	3001      	adds	r0, #1
 8007742:	d09b      	beq.n	800767c <_printf_i+0x164>
 8007744:	3501      	adds	r5, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	9903      	ldr	r1, [sp, #12]
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	42ab      	cmp	r3, r5
 800774e:	dcf2      	bgt.n	8007736 <_printf_i+0x21e>
 8007750:	e7eb      	b.n	800772a <_printf_i+0x212>
 8007752:	2500      	movs	r5, #0
 8007754:	f104 0619 	add.w	r6, r4, #25
 8007758:	e7f5      	b.n	8007746 <_printf_i+0x22e>
 800775a:	bf00      	nop
 800775c:	0800b822 	.word	0x0800b822
 8007760:	0800b833 	.word	0x0800b833

08007764 <_scanf_float>:
 8007764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	b087      	sub	sp, #28
 800776a:	4617      	mov	r7, r2
 800776c:	9303      	str	r3, [sp, #12]
 800776e:	688b      	ldr	r3, [r1, #8]
 8007770:	1e5a      	subs	r2, r3, #1
 8007772:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007776:	bf83      	ittte	hi
 8007778:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800777c:	195b      	addhi	r3, r3, r5
 800777e:	9302      	strhi	r3, [sp, #8]
 8007780:	2300      	movls	r3, #0
 8007782:	bf86      	itte	hi
 8007784:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007788:	608b      	strhi	r3, [r1, #8]
 800778a:	9302      	strls	r3, [sp, #8]
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	468b      	mov	fp, r1
 8007790:	2500      	movs	r5, #0
 8007792:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007796:	f84b 3b1c 	str.w	r3, [fp], #28
 800779a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800779e:	4680      	mov	r8, r0
 80077a0:	460c      	mov	r4, r1
 80077a2:	465e      	mov	r6, fp
 80077a4:	46aa      	mov	sl, r5
 80077a6:	46a9      	mov	r9, r5
 80077a8:	9501      	str	r5, [sp, #4]
 80077aa:	68a2      	ldr	r2, [r4, #8]
 80077ac:	b152      	cbz	r2, 80077c4 <_scanf_float+0x60>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b4e      	cmp	r3, #78	; 0x4e
 80077b4:	d864      	bhi.n	8007880 <_scanf_float+0x11c>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d83c      	bhi.n	8007834 <_scanf_float+0xd0>
 80077ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80077be:	b2c8      	uxtb	r0, r1
 80077c0:	280e      	cmp	r0, #14
 80077c2:	d93a      	bls.n	800783a <_scanf_float+0xd6>
 80077c4:	f1b9 0f00 	cmp.w	r9, #0
 80077c8:	d003      	beq.n	80077d2 <_scanf_float+0x6e>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077d6:	f1ba 0f01 	cmp.w	sl, #1
 80077da:	f200 8113 	bhi.w	8007a04 <_scanf_float+0x2a0>
 80077de:	455e      	cmp	r6, fp
 80077e0:	f200 8105 	bhi.w	80079ee <_scanf_float+0x28a>
 80077e4:	2501      	movs	r5, #1
 80077e6:	4628      	mov	r0, r5
 80077e8:	b007      	add	sp, #28
 80077ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80077f2:	2a0d      	cmp	r2, #13
 80077f4:	d8e6      	bhi.n	80077c4 <_scanf_float+0x60>
 80077f6:	a101      	add	r1, pc, #4	; (adr r1, 80077fc <_scanf_float+0x98>)
 80077f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077fc:	0800793b 	.word	0x0800793b
 8007800:	080077c5 	.word	0x080077c5
 8007804:	080077c5 	.word	0x080077c5
 8007808:	080077c5 	.word	0x080077c5
 800780c:	0800799b 	.word	0x0800799b
 8007810:	08007973 	.word	0x08007973
 8007814:	080077c5 	.word	0x080077c5
 8007818:	080077c5 	.word	0x080077c5
 800781c:	08007949 	.word	0x08007949
 8007820:	080077c5 	.word	0x080077c5
 8007824:	080077c5 	.word	0x080077c5
 8007828:	080077c5 	.word	0x080077c5
 800782c:	080077c5 	.word	0x080077c5
 8007830:	08007901 	.word	0x08007901
 8007834:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007838:	e7db      	b.n	80077f2 <_scanf_float+0x8e>
 800783a:	290e      	cmp	r1, #14
 800783c:	d8c2      	bhi.n	80077c4 <_scanf_float+0x60>
 800783e:	a001      	add	r0, pc, #4	; (adr r0, 8007844 <_scanf_float+0xe0>)
 8007840:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007844:	080078f3 	.word	0x080078f3
 8007848:	080077c5 	.word	0x080077c5
 800784c:	080078f3 	.word	0x080078f3
 8007850:	08007987 	.word	0x08007987
 8007854:	080077c5 	.word	0x080077c5
 8007858:	080078a1 	.word	0x080078a1
 800785c:	080078dd 	.word	0x080078dd
 8007860:	080078dd 	.word	0x080078dd
 8007864:	080078dd 	.word	0x080078dd
 8007868:	080078dd 	.word	0x080078dd
 800786c:	080078dd 	.word	0x080078dd
 8007870:	080078dd 	.word	0x080078dd
 8007874:	080078dd 	.word	0x080078dd
 8007878:	080078dd 	.word	0x080078dd
 800787c:	080078dd 	.word	0x080078dd
 8007880:	2b6e      	cmp	r3, #110	; 0x6e
 8007882:	d809      	bhi.n	8007898 <_scanf_float+0x134>
 8007884:	2b60      	cmp	r3, #96	; 0x60
 8007886:	d8b2      	bhi.n	80077ee <_scanf_float+0x8a>
 8007888:	2b54      	cmp	r3, #84	; 0x54
 800788a:	d077      	beq.n	800797c <_scanf_float+0x218>
 800788c:	2b59      	cmp	r3, #89	; 0x59
 800788e:	d199      	bne.n	80077c4 <_scanf_float+0x60>
 8007890:	2d07      	cmp	r5, #7
 8007892:	d197      	bne.n	80077c4 <_scanf_float+0x60>
 8007894:	2508      	movs	r5, #8
 8007896:	e029      	b.n	80078ec <_scanf_float+0x188>
 8007898:	2b74      	cmp	r3, #116	; 0x74
 800789a:	d06f      	beq.n	800797c <_scanf_float+0x218>
 800789c:	2b79      	cmp	r3, #121	; 0x79
 800789e:	e7f6      	b.n	800788e <_scanf_float+0x12a>
 80078a0:	6821      	ldr	r1, [r4, #0]
 80078a2:	05c8      	lsls	r0, r1, #23
 80078a4:	d51a      	bpl.n	80078dc <_scanf_float+0x178>
 80078a6:	9b02      	ldr	r3, [sp, #8]
 80078a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078ac:	6021      	str	r1, [r4, #0]
 80078ae:	f109 0901 	add.w	r9, r9, #1
 80078b2:	b11b      	cbz	r3, 80078bc <_scanf_float+0x158>
 80078b4:	3b01      	subs	r3, #1
 80078b6:	3201      	adds	r2, #1
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	60a2      	str	r2, [r4, #8]
 80078bc:	68a3      	ldr	r3, [r4, #8]
 80078be:	3b01      	subs	r3, #1
 80078c0:	60a3      	str	r3, [r4, #8]
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	3301      	adds	r3, #1
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	f340 8084 	ble.w	80079dc <_scanf_float+0x278>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	3301      	adds	r3, #1
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	e766      	b.n	80077aa <_scanf_float+0x46>
 80078dc:	eb1a 0f05 	cmn.w	sl, r5
 80078e0:	f47f af70 	bne.w	80077c4 <_scanf_float+0x60>
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80078ea:	6022      	str	r2, [r4, #0]
 80078ec:	f806 3b01 	strb.w	r3, [r6], #1
 80078f0:	e7e4      	b.n	80078bc <_scanf_float+0x158>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	0610      	lsls	r0, r2, #24
 80078f6:	f57f af65 	bpl.w	80077c4 <_scanf_float+0x60>
 80078fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078fe:	e7f4      	b.n	80078ea <_scanf_float+0x186>
 8007900:	f1ba 0f00 	cmp.w	sl, #0
 8007904:	d10e      	bne.n	8007924 <_scanf_float+0x1c0>
 8007906:	f1b9 0f00 	cmp.w	r9, #0
 800790a:	d10e      	bne.n	800792a <_scanf_float+0x1c6>
 800790c:	6822      	ldr	r2, [r4, #0]
 800790e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007912:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007916:	d108      	bne.n	800792a <_scanf_float+0x1c6>
 8007918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800791c:	6022      	str	r2, [r4, #0]
 800791e:	f04f 0a01 	mov.w	sl, #1
 8007922:	e7e3      	b.n	80078ec <_scanf_float+0x188>
 8007924:	f1ba 0f02 	cmp.w	sl, #2
 8007928:	d055      	beq.n	80079d6 <_scanf_float+0x272>
 800792a:	2d01      	cmp	r5, #1
 800792c:	d002      	beq.n	8007934 <_scanf_float+0x1d0>
 800792e:	2d04      	cmp	r5, #4
 8007930:	f47f af48 	bne.w	80077c4 <_scanf_float+0x60>
 8007934:	3501      	adds	r5, #1
 8007936:	b2ed      	uxtb	r5, r5
 8007938:	e7d8      	b.n	80078ec <_scanf_float+0x188>
 800793a:	f1ba 0f01 	cmp.w	sl, #1
 800793e:	f47f af41 	bne.w	80077c4 <_scanf_float+0x60>
 8007942:	f04f 0a02 	mov.w	sl, #2
 8007946:	e7d1      	b.n	80078ec <_scanf_float+0x188>
 8007948:	b97d      	cbnz	r5, 800796a <_scanf_float+0x206>
 800794a:	f1b9 0f00 	cmp.w	r9, #0
 800794e:	f47f af3c 	bne.w	80077ca <_scanf_float+0x66>
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007958:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800795c:	f47f af39 	bne.w	80077d2 <_scanf_float+0x6e>
 8007960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	2501      	movs	r5, #1
 8007968:	e7c0      	b.n	80078ec <_scanf_float+0x188>
 800796a:	2d03      	cmp	r5, #3
 800796c:	d0e2      	beq.n	8007934 <_scanf_float+0x1d0>
 800796e:	2d05      	cmp	r5, #5
 8007970:	e7de      	b.n	8007930 <_scanf_float+0x1cc>
 8007972:	2d02      	cmp	r5, #2
 8007974:	f47f af26 	bne.w	80077c4 <_scanf_float+0x60>
 8007978:	2503      	movs	r5, #3
 800797a:	e7b7      	b.n	80078ec <_scanf_float+0x188>
 800797c:	2d06      	cmp	r5, #6
 800797e:	f47f af21 	bne.w	80077c4 <_scanf_float+0x60>
 8007982:	2507      	movs	r5, #7
 8007984:	e7b2      	b.n	80078ec <_scanf_float+0x188>
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	0591      	lsls	r1, r2, #22
 800798a:	f57f af1b 	bpl.w	80077c4 <_scanf_float+0x60>
 800798e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007992:	6022      	str	r2, [r4, #0]
 8007994:	f8cd 9004 	str.w	r9, [sp, #4]
 8007998:	e7a8      	b.n	80078ec <_scanf_float+0x188>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80079a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80079a4:	d006      	beq.n	80079b4 <_scanf_float+0x250>
 80079a6:	0550      	lsls	r0, r2, #21
 80079a8:	f57f af0c 	bpl.w	80077c4 <_scanf_float+0x60>
 80079ac:	f1b9 0f00 	cmp.w	r9, #0
 80079b0:	f43f af0f 	beq.w	80077d2 <_scanf_float+0x6e>
 80079b4:	0591      	lsls	r1, r2, #22
 80079b6:	bf58      	it	pl
 80079b8:	9901      	ldrpl	r1, [sp, #4]
 80079ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079be:	bf58      	it	pl
 80079c0:	eba9 0101 	subpl.w	r1, r9, r1
 80079c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80079c8:	bf58      	it	pl
 80079ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80079ce:	6022      	str	r2, [r4, #0]
 80079d0:	f04f 0900 	mov.w	r9, #0
 80079d4:	e78a      	b.n	80078ec <_scanf_float+0x188>
 80079d6:	f04f 0a03 	mov.w	sl, #3
 80079da:	e787      	b.n	80078ec <_scanf_float+0x188>
 80079dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079e0:	4639      	mov	r1, r7
 80079e2:	4640      	mov	r0, r8
 80079e4:	4798      	blx	r3
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f43f aedf 	beq.w	80077aa <_scanf_float+0x46>
 80079ec:	e6ea      	b.n	80077c4 <_scanf_float+0x60>
 80079ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079f6:	463a      	mov	r2, r7
 80079f8:	4640      	mov	r0, r8
 80079fa:	4798      	blx	r3
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	e6ec      	b.n	80077de <_scanf_float+0x7a>
 8007a04:	1e6b      	subs	r3, r5, #1
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d825      	bhi.n	8007a56 <_scanf_float+0x2f2>
 8007a0a:	2d02      	cmp	r5, #2
 8007a0c:	d836      	bhi.n	8007a7c <_scanf_float+0x318>
 8007a0e:	455e      	cmp	r6, fp
 8007a10:	f67f aee8 	bls.w	80077e4 <_scanf_float+0x80>
 8007a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a1c:	463a      	mov	r2, r7
 8007a1e:	4640      	mov	r0, r8
 8007a20:	4798      	blx	r3
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	e7f1      	b.n	8007a0e <_scanf_float+0x2aa>
 8007a2a:	9802      	ldr	r0, [sp, #8]
 8007a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a34:	9002      	str	r0, [sp, #8]
 8007a36:	463a      	mov	r2, r7
 8007a38:	4640      	mov	r0, r8
 8007a3a:	4798      	blx	r3
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a46:	fa5f fa8a 	uxtb.w	sl, sl
 8007a4a:	f1ba 0f02 	cmp.w	sl, #2
 8007a4e:	d1ec      	bne.n	8007a2a <_scanf_float+0x2c6>
 8007a50:	3d03      	subs	r5, #3
 8007a52:	b2ed      	uxtb	r5, r5
 8007a54:	1b76      	subs	r6, r6, r5
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	05da      	lsls	r2, r3, #23
 8007a5a:	d52f      	bpl.n	8007abc <_scanf_float+0x358>
 8007a5c:	055b      	lsls	r3, r3, #21
 8007a5e:	d510      	bpl.n	8007a82 <_scanf_float+0x31e>
 8007a60:	455e      	cmp	r6, fp
 8007a62:	f67f aebf 	bls.w	80077e4 <_scanf_float+0x80>
 8007a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a6e:	463a      	mov	r2, r7
 8007a70:	4640      	mov	r0, r8
 8007a72:	4798      	blx	r3
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	6123      	str	r3, [r4, #16]
 8007a7a:	e7f1      	b.n	8007a60 <_scanf_float+0x2fc>
 8007a7c:	46aa      	mov	sl, r5
 8007a7e:	9602      	str	r6, [sp, #8]
 8007a80:	e7df      	b.n	8007a42 <_scanf_float+0x2de>
 8007a82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	2965      	cmp	r1, #101	; 0x65
 8007a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	d00c      	beq.n	8007ab0 <_scanf_float+0x34c>
 8007a96:	2945      	cmp	r1, #69	; 0x45
 8007a98:	d00a      	beq.n	8007ab0 <_scanf_float+0x34c>
 8007a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4798      	blx	r3
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	1eb5      	subs	r5, r6, #2
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4798      	blx	r3
 8007aba:	462e      	mov	r6, r5
 8007abc:	6825      	ldr	r5, [r4, #0]
 8007abe:	f015 0510 	ands.w	r5, r5, #16
 8007ac2:	d159      	bne.n	8007b78 <_scanf_float+0x414>
 8007ac4:	7035      	strb	r5, [r6, #0]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d11b      	bne.n	8007b0a <_scanf_float+0x3a6>
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	454b      	cmp	r3, r9
 8007ad6:	eba3 0209 	sub.w	r2, r3, r9
 8007ada:	d123      	bne.n	8007b24 <_scanf_float+0x3c0>
 8007adc:	2200      	movs	r2, #0
 8007ade:	4659      	mov	r1, fp
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	f000 feef 	bl	80088c4 <_strtod_r>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	f012 0f02 	tst.w	r2, #2
 8007aee:	ec57 6b10 	vmov	r6, r7, d0
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	d021      	beq.n	8007b3a <_scanf_float+0x3d6>
 8007af6:	9903      	ldr	r1, [sp, #12]
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	600a      	str	r2, [r1, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	e9c3 6700 	strd	r6, r7, [r3]
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60e3      	str	r3, [r4, #12]
 8007b08:	e66d      	b.n	80077e6 <_scanf_float+0x82>
 8007b0a:	9b04      	ldr	r3, [sp, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0e5      	beq.n	8007adc <_scanf_float+0x378>
 8007b10:	9905      	ldr	r1, [sp, #20]
 8007b12:	230a      	movs	r3, #10
 8007b14:	462a      	mov	r2, r5
 8007b16:	3101      	adds	r1, #1
 8007b18:	4640      	mov	r0, r8
 8007b1a:	f000 ff5b 	bl	80089d4 <_strtol_r>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	9e05      	ldr	r6, [sp, #20]
 8007b22:	1ac2      	subs	r2, r0, r3
 8007b24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b28:	429e      	cmp	r6, r3
 8007b2a:	bf28      	it	cs
 8007b2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b30:	4912      	ldr	r1, [pc, #72]	; (8007b7c <_scanf_float+0x418>)
 8007b32:	4630      	mov	r0, r6
 8007b34:	f000 f82c 	bl	8007b90 <siprintf>
 8007b38:	e7d0      	b.n	8007adc <_scanf_float+0x378>
 8007b3a:	9903      	ldr	r1, [sp, #12]
 8007b3c:	f012 0f04 	tst.w	r2, #4
 8007b40:	f103 0204 	add.w	r2, r3, #4
 8007b44:	600a      	str	r2, [r1, #0]
 8007b46:	d1d9      	bne.n	8007afc <_scanf_float+0x398>
 8007b48:	f8d3 8000 	ldr.w	r8, [r3]
 8007b4c:	ee10 2a10 	vmov	r2, s0
 8007b50:	ee10 0a10 	vmov	r0, s0
 8007b54:	463b      	mov	r3, r7
 8007b56:	4639      	mov	r1, r7
 8007b58:	f7f9 f808 	bl	8000b6c <__aeabi_dcmpun>
 8007b5c:	b128      	cbz	r0, 8007b6a <_scanf_float+0x406>
 8007b5e:	4808      	ldr	r0, [pc, #32]	; (8007b80 <_scanf_float+0x41c>)
 8007b60:	f000 f810 	bl	8007b84 <nanf>
 8007b64:	ed88 0a00 	vstr	s0, [r8]
 8007b68:	e7cb      	b.n	8007b02 <_scanf_float+0x39e>
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	f7f9 f85b 	bl	8000c28 <__aeabi_d2f>
 8007b72:	f8c8 0000 	str.w	r0, [r8]
 8007b76:	e7c4      	b.n	8007b02 <_scanf_float+0x39e>
 8007b78:	2500      	movs	r5, #0
 8007b7a:	e634      	b.n	80077e6 <_scanf_float+0x82>
 8007b7c:	0800b844 	.word	0x0800b844
 8007b80:	0800bc50 	.word	0x0800bc50

08007b84 <nanf>:
 8007b84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b8c <nanf+0x8>
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	7fc00000 	.word	0x7fc00000

08007b90 <siprintf>:
 8007b90:	b40e      	push	{r1, r2, r3}
 8007b92:	b500      	push	{lr}
 8007b94:	b09c      	sub	sp, #112	; 0x70
 8007b96:	ab1d      	add	r3, sp, #116	; 0x74
 8007b98:	9002      	str	r0, [sp, #8]
 8007b9a:	9006      	str	r0, [sp, #24]
 8007b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ba0:	4809      	ldr	r0, [pc, #36]	; (8007bc8 <siprintf+0x38>)
 8007ba2:	9107      	str	r1, [sp, #28]
 8007ba4:	9104      	str	r1, [sp, #16]
 8007ba6:	4909      	ldr	r1, [pc, #36]	; (8007bcc <siprintf+0x3c>)
 8007ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bac:	9105      	str	r1, [sp, #20]
 8007bae:	6800      	ldr	r0, [r0, #0]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	a902      	add	r1, sp, #8
 8007bb4:	f002 ff70 	bl	800aa98 <_svfiprintf_r>
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	b01c      	add	sp, #112	; 0x70
 8007bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bc4:	b003      	add	sp, #12
 8007bc6:	4770      	bx	lr
 8007bc8:	2000000c 	.word	0x2000000c
 8007bcc:	ffff0208 	.word	0xffff0208

08007bd0 <__sread>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd8:	f003 f85e 	bl	800ac98 <_read_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	bfab      	itete	ge
 8007be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007be2:	89a3      	ldrhlt	r3, [r4, #12]
 8007be4:	181b      	addge	r3, r3, r0
 8007be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bea:	bfac      	ite	ge
 8007bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bee:	81a3      	strhlt	r3, [r4, #12]
 8007bf0:	bd10      	pop	{r4, pc}

08007bf2 <__swrite>:
 8007bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	05db      	lsls	r3, r3, #23
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	4616      	mov	r6, r2
 8007c02:	d505      	bpl.n	8007c10 <__swrite+0x1e>
 8007c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c08:	2302      	movs	r3, #2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f002 f8f6 	bl	8009dfc <_lseek_r>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	463b      	mov	r3, r7
 8007c20:	4628      	mov	r0, r5
 8007c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c26:	f000 bed7 	b.w	80089d8 <_write_r>

08007c2a <__sseek>:
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f002 f8e3 	bl	8009dfc <_lseek_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	bf15      	itete	ne
 8007c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c46:	81a3      	strheq	r3, [r4, #12]
 8007c48:	bf18      	it	ne
 8007c4a:	81a3      	strhne	r3, [r4, #12]
 8007c4c:	bd10      	pop	{r4, pc}

08007c4e <__sclose>:
 8007c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c52:	f000 bed3 	b.w	80089fc <_close_r>

08007c56 <strncmp>:
 8007c56:	b510      	push	{r4, lr}
 8007c58:	b17a      	cbz	r2, 8007c7a <strncmp+0x24>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	3901      	subs	r1, #1
 8007c5e:	1884      	adds	r4, r0, r2
 8007c60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007c68:	4290      	cmp	r0, r2
 8007c6a:	d101      	bne.n	8007c70 <strncmp+0x1a>
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d101      	bne.n	8007c74 <strncmp+0x1e>
 8007c70:	1a80      	subs	r0, r0, r2
 8007c72:	bd10      	pop	{r4, pc}
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d1f3      	bne.n	8007c60 <strncmp+0xa>
 8007c78:	e7fa      	b.n	8007c70 <strncmp+0x1a>
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	e7f9      	b.n	8007c72 <strncmp+0x1c>

08007c7e <sulp>:
 8007c7e:	b570      	push	{r4, r5, r6, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	ec45 4b10 	vmov	d0, r4, r5
 8007c88:	4616      	mov	r6, r2
 8007c8a:	f002 fc63 	bl	800a554 <__ulp>
 8007c8e:	ec51 0b10 	vmov	r0, r1, d0
 8007c92:	b17e      	cbz	r6, 8007cb4 <sulp+0x36>
 8007c94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd09      	ble.n	8007cb4 <sulp+0x36>
 8007ca0:	051b      	lsls	r3, r3, #20
 8007ca2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cac:	4622      	mov	r2, r4
 8007cae:	462b      	mov	r3, r5
 8007cb0:	f7f8 fcc2 	bl	8000638 <__aeabi_dmul>
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cb8 <_strtod_l>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	ed2d 8b02 	vpush	{d8}
 8007cc0:	b09d      	sub	sp, #116	; 0x74
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9318      	str	r3, [sp, #96]	; 0x60
 8007cc8:	4ba2      	ldr	r3, [pc, #648]	; (8007f54 <_strtod_l+0x29c>)
 8007cca:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	9305      	str	r3, [sp, #20]
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	4688      	mov	r8, r1
 8007cd6:	f7f8 fa9b 	bl	8000210 <strlen>
 8007cda:	f04f 0a00 	mov.w	sl, #0
 8007cde:	4605      	mov	r5, r0
 8007ce0:	f04f 0b00 	mov.w	fp, #0
 8007ce4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cea:	781a      	ldrb	r2, [r3, #0]
 8007cec:	2a2b      	cmp	r2, #43	; 0x2b
 8007cee:	d04e      	beq.n	8007d8e <_strtod_l+0xd6>
 8007cf0:	d83b      	bhi.n	8007d6a <_strtod_l+0xb2>
 8007cf2:	2a0d      	cmp	r2, #13
 8007cf4:	d834      	bhi.n	8007d60 <_strtod_l+0xa8>
 8007cf6:	2a08      	cmp	r2, #8
 8007cf8:	d834      	bhi.n	8007d64 <_strtod_l+0xac>
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d03e      	beq.n	8007d7c <_strtod_l+0xc4>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	930a      	str	r3, [sp, #40]	; 0x28
 8007d02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d04:	7833      	ldrb	r3, [r6, #0]
 8007d06:	2b30      	cmp	r3, #48	; 0x30
 8007d08:	f040 80b0 	bne.w	8007e6c <_strtod_l+0x1b4>
 8007d0c:	7873      	ldrb	r3, [r6, #1]
 8007d0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d12:	2b58      	cmp	r3, #88	; 0x58
 8007d14:	d168      	bne.n	8007de8 <_strtod_l+0x130>
 8007d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	ab18      	add	r3, sp, #96	; 0x60
 8007d1c:	9702      	str	r7, [sp, #8]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4a8d      	ldr	r2, [pc, #564]	; (8007f58 <_strtod_l+0x2a0>)
 8007d22:	ab19      	add	r3, sp, #100	; 0x64
 8007d24:	a917      	add	r1, sp, #92	; 0x5c
 8007d26:	4620      	mov	r0, r4
 8007d28:	f001 fd5c 	bl	80097e4 <__gethex>
 8007d2c:	f010 0707 	ands.w	r7, r0, #7
 8007d30:	4605      	mov	r5, r0
 8007d32:	d005      	beq.n	8007d40 <_strtod_l+0x88>
 8007d34:	2f06      	cmp	r7, #6
 8007d36:	d12c      	bne.n	8007d92 <_strtod_l+0xda>
 8007d38:	3601      	adds	r6, #1
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f040 8590 	bne.w	8008868 <_strtod_l+0xbb0>
 8007d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4a:	b1eb      	cbz	r3, 8007d88 <_strtod_l+0xd0>
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d52:	ec43 2b10 	vmov	d0, r2, r3
 8007d56:	b01d      	add	sp, #116	; 0x74
 8007d58:	ecbd 8b02 	vpop	{d8}
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	2a20      	cmp	r2, #32
 8007d62:	d1cc      	bne.n	8007cfe <_strtod_l+0x46>
 8007d64:	3301      	adds	r3, #1
 8007d66:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d68:	e7be      	b.n	8007ce8 <_strtod_l+0x30>
 8007d6a:	2a2d      	cmp	r2, #45	; 0x2d
 8007d6c:	d1c7      	bne.n	8007cfe <_strtod_l+0x46>
 8007d6e:	2201      	movs	r2, #1
 8007d70:	920a      	str	r2, [sp, #40]	; 0x28
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1c2      	bne.n	8007d02 <_strtod_l+0x4a>
 8007d7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 856e 	bne.w	8008864 <_strtod_l+0xbac>
 8007d88:	4652      	mov	r2, sl
 8007d8a:	465b      	mov	r3, fp
 8007d8c:	e7e1      	b.n	8007d52 <_strtod_l+0x9a>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	e7ee      	b.n	8007d70 <_strtod_l+0xb8>
 8007d92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d94:	b13a      	cbz	r2, 8007da6 <_strtod_l+0xee>
 8007d96:	2135      	movs	r1, #53	; 0x35
 8007d98:	a81a      	add	r0, sp, #104	; 0x68
 8007d9a:	f002 fce6 	bl	800a76a <__copybits>
 8007d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007da0:	4620      	mov	r0, r4
 8007da2:	f002 f8a5 	bl	8009ef0 <_Bfree>
 8007da6:	3f01      	subs	r7, #1
 8007da8:	2f04      	cmp	r7, #4
 8007daa:	d806      	bhi.n	8007dba <_strtod_l+0x102>
 8007dac:	e8df f007 	tbb	[pc, r7]
 8007db0:	1714030a 	.word	0x1714030a
 8007db4:	0a          	.byte	0x0a
 8007db5:	00          	.byte	0x00
 8007db6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007dba:	0728      	lsls	r0, r5, #28
 8007dbc:	d5c0      	bpl.n	8007d40 <_strtod_l+0x88>
 8007dbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007dc2:	e7bd      	b.n	8007d40 <_strtod_l+0x88>
 8007dc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007dc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007dd6:	e7f0      	b.n	8007dba <_strtod_l+0x102>
 8007dd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007f5c <_strtod_l+0x2a4>
 8007ddc:	e7ed      	b.n	8007dba <_strtod_l+0x102>
 8007dde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007de2:	f04f 3aff 	mov.w	sl, #4294967295
 8007de6:	e7e8      	b.n	8007dba <_strtod_l+0x102>
 8007de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	d0f9      	beq.n	8007de8 <_strtod_l+0x130>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0a3      	beq.n	8007d40 <_strtod_l+0x88>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f04f 0900 	mov.w	r9, #0
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e02:	9308      	str	r3, [sp, #32]
 8007e04:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e08:	464f      	mov	r7, r9
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e0e:	7806      	ldrb	r6, [r0, #0]
 8007e10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e14:	b2d9      	uxtb	r1, r3
 8007e16:	2909      	cmp	r1, #9
 8007e18:	d92a      	bls.n	8007e70 <_strtod_l+0x1b8>
 8007e1a:	9905      	ldr	r1, [sp, #20]
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	f7ff ff1a 	bl	8007c56 <strncmp>
 8007e22:	b398      	cbz	r0, 8007e8c <_strtod_l+0x1d4>
 8007e24:	2000      	movs	r0, #0
 8007e26:	4632      	mov	r2, r6
 8007e28:	463d      	mov	r5, r7
 8007e2a:	9005      	str	r0, [sp, #20]
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2a65      	cmp	r2, #101	; 0x65
 8007e30:	d001      	beq.n	8007e36 <_strtod_l+0x17e>
 8007e32:	2a45      	cmp	r2, #69	; 0x45
 8007e34:	d118      	bne.n	8007e68 <_strtod_l+0x1b0>
 8007e36:	b91d      	cbnz	r5, 8007e40 <_strtod_l+0x188>
 8007e38:	9a04      	ldr	r2, [sp, #16]
 8007e3a:	4302      	orrs	r2, r0
 8007e3c:	d09e      	beq.n	8007d7c <_strtod_l+0xc4>
 8007e3e:	2500      	movs	r5, #0
 8007e40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007e44:	f108 0201 	add.w	r2, r8, #1
 8007e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007e4e:	2a2b      	cmp	r2, #43	; 0x2b
 8007e50:	d075      	beq.n	8007f3e <_strtod_l+0x286>
 8007e52:	2a2d      	cmp	r2, #45	; 0x2d
 8007e54:	d07b      	beq.n	8007f4e <_strtod_l+0x296>
 8007e56:	f04f 0c00 	mov.w	ip, #0
 8007e5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e5e:	2909      	cmp	r1, #9
 8007e60:	f240 8082 	bls.w	8007f68 <_strtod_l+0x2b0>
 8007e64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e68:	2600      	movs	r6, #0
 8007e6a:	e09d      	b.n	8007fa8 <_strtod_l+0x2f0>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e7c4      	b.n	8007dfa <_strtod_l+0x142>
 8007e70:	2f08      	cmp	r7, #8
 8007e72:	bfd8      	it	le
 8007e74:	9907      	ldrle	r1, [sp, #28]
 8007e76:	f100 0001 	add.w	r0, r0, #1
 8007e7a:	bfda      	itte	le
 8007e7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e80:	9307      	strle	r3, [sp, #28]
 8007e82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e86:	3701      	adds	r7, #1
 8007e88:	9017      	str	r0, [sp, #92]	; 0x5c
 8007e8a:	e7bf      	b.n	8007e0c <_strtod_l+0x154>
 8007e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e8e:	195a      	adds	r2, r3, r5
 8007e90:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e92:	5d5a      	ldrb	r2, [r3, r5]
 8007e94:	2f00      	cmp	r7, #0
 8007e96:	d037      	beq.n	8007f08 <_strtod_l+0x250>
 8007e98:	9005      	str	r0, [sp, #20]
 8007e9a:	463d      	mov	r5, r7
 8007e9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d912      	bls.n	8007eca <_strtod_l+0x212>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e7c2      	b.n	8007e2e <_strtod_l+0x176>
 8007ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	9217      	str	r2, [sp, #92]	; 0x5c
 8007eae:	785a      	ldrb	r2, [r3, #1]
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	2a30      	cmp	r2, #48	; 0x30
 8007eb4:	d0f8      	beq.n	8007ea8 <_strtod_l+0x1f0>
 8007eb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	f200 84d9 	bhi.w	8008872 <_strtod_l+0xbba>
 8007ec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec2:	9005      	str	r0, [sp, #20]
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	9308      	str	r3, [sp, #32]
 8007ec8:	4605      	mov	r5, r0
 8007eca:	3a30      	subs	r2, #48	; 0x30
 8007ecc:	f100 0301 	add.w	r3, r0, #1
 8007ed0:	d014      	beq.n	8007efc <_strtod_l+0x244>
 8007ed2:	9905      	ldr	r1, [sp, #20]
 8007ed4:	4419      	add	r1, r3
 8007ed6:	9105      	str	r1, [sp, #20]
 8007ed8:	462b      	mov	r3, r5
 8007eda:	eb00 0e05 	add.w	lr, r0, r5
 8007ede:	210a      	movs	r1, #10
 8007ee0:	4573      	cmp	r3, lr
 8007ee2:	d113      	bne.n	8007f0c <_strtod_l+0x254>
 8007ee4:	182b      	adds	r3, r5, r0
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	f105 0501 	add.w	r5, r5, #1
 8007eec:	4405      	add	r5, r0
 8007eee:	dc1c      	bgt.n	8007f2a <_strtod_l+0x272>
 8007ef0:	9907      	ldr	r1, [sp, #28]
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	fb03 2301 	mla	r3, r3, r1, r2
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007efe:	1c51      	adds	r1, r2, #1
 8007f00:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f02:	7852      	ldrb	r2, [r2, #1]
 8007f04:	4618      	mov	r0, r3
 8007f06:	e7c9      	b.n	8007e9c <_strtod_l+0x1e4>
 8007f08:	4638      	mov	r0, r7
 8007f0a:	e7d2      	b.n	8007eb2 <_strtod_l+0x1fa>
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	dc04      	bgt.n	8007f1a <_strtod_l+0x262>
 8007f10:	9e07      	ldr	r6, [sp, #28]
 8007f12:	434e      	muls	r6, r1
 8007f14:	9607      	str	r6, [sp, #28]
 8007f16:	3301      	adds	r3, #1
 8007f18:	e7e2      	b.n	8007ee0 <_strtod_l+0x228>
 8007f1a:	f103 0c01 	add.w	ip, r3, #1
 8007f1e:	f1bc 0f10 	cmp.w	ip, #16
 8007f22:	bfd8      	it	le
 8007f24:	fb01 f909 	mulle.w	r9, r1, r9
 8007f28:	e7f5      	b.n	8007f16 <_strtod_l+0x25e>
 8007f2a:	2d10      	cmp	r5, #16
 8007f2c:	bfdc      	itt	le
 8007f2e:	230a      	movle	r3, #10
 8007f30:	fb03 2909 	mlale	r9, r3, r9, r2
 8007f34:	e7e1      	b.n	8007efa <_strtod_l+0x242>
 8007f36:	2300      	movs	r3, #0
 8007f38:	9305      	str	r3, [sp, #20]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e77c      	b.n	8007e38 <_strtod_l+0x180>
 8007f3e:	f04f 0c00 	mov.w	ip, #0
 8007f42:	f108 0202 	add.w	r2, r8, #2
 8007f46:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f48:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007f4c:	e785      	b.n	8007e5a <_strtod_l+0x1a2>
 8007f4e:	f04f 0c01 	mov.w	ip, #1
 8007f52:	e7f6      	b.n	8007f42 <_strtod_l+0x28a>
 8007f54:	0800ba98 	.word	0x0800ba98
 8007f58:	0800b84c 	.word	0x0800b84c
 8007f5c:	7ff00000 	.word	0x7ff00000
 8007f60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f62:	1c51      	adds	r1, r2, #1
 8007f64:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f66:	7852      	ldrb	r2, [r2, #1]
 8007f68:	2a30      	cmp	r2, #48	; 0x30
 8007f6a:	d0f9      	beq.n	8007f60 <_strtod_l+0x2a8>
 8007f6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f70:	2908      	cmp	r1, #8
 8007f72:	f63f af79 	bhi.w	8007e68 <_strtod_l+0x1b0>
 8007f76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007f7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f7c:	9206      	str	r2, [sp, #24]
 8007f7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f80:	1c51      	adds	r1, r2, #1
 8007f82:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f84:	7852      	ldrb	r2, [r2, #1]
 8007f86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007f8a:	2e09      	cmp	r6, #9
 8007f8c:	d937      	bls.n	8007ffe <_strtod_l+0x346>
 8007f8e:	9e06      	ldr	r6, [sp, #24]
 8007f90:	1b89      	subs	r1, r1, r6
 8007f92:	2908      	cmp	r1, #8
 8007f94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f98:	dc02      	bgt.n	8007fa0 <_strtod_l+0x2e8>
 8007f9a:	4576      	cmp	r6, lr
 8007f9c:	bfa8      	it	ge
 8007f9e:	4676      	movge	r6, lr
 8007fa0:	f1bc 0f00 	cmp.w	ip, #0
 8007fa4:	d000      	beq.n	8007fa8 <_strtod_l+0x2f0>
 8007fa6:	4276      	negs	r6, r6
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	d14d      	bne.n	8008048 <_strtod_l+0x390>
 8007fac:	9904      	ldr	r1, [sp, #16]
 8007fae:	4301      	orrs	r1, r0
 8007fb0:	f47f aec6 	bne.w	8007d40 <_strtod_l+0x88>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f47f aee1 	bne.w	8007d7c <_strtod_l+0xc4>
 8007fba:	2a69      	cmp	r2, #105	; 0x69
 8007fbc:	d027      	beq.n	800800e <_strtod_l+0x356>
 8007fbe:	dc24      	bgt.n	800800a <_strtod_l+0x352>
 8007fc0:	2a49      	cmp	r2, #73	; 0x49
 8007fc2:	d024      	beq.n	800800e <_strtod_l+0x356>
 8007fc4:	2a4e      	cmp	r2, #78	; 0x4e
 8007fc6:	f47f aed9 	bne.w	8007d7c <_strtod_l+0xc4>
 8007fca:	499f      	ldr	r1, [pc, #636]	; (8008248 <_strtod_l+0x590>)
 8007fcc:	a817      	add	r0, sp, #92	; 0x5c
 8007fce:	f001 fe61 	bl	8009c94 <__match>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f43f aed2 	beq.w	8007d7c <_strtod_l+0xc4>
 8007fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b28      	cmp	r3, #40	; 0x28
 8007fde:	d12d      	bne.n	800803c <_strtod_l+0x384>
 8007fe0:	499a      	ldr	r1, [pc, #616]	; (800824c <_strtod_l+0x594>)
 8007fe2:	aa1a      	add	r2, sp, #104	; 0x68
 8007fe4:	a817      	add	r0, sp, #92	; 0x5c
 8007fe6:	f001 fe69 	bl	8009cbc <__hexnan>
 8007fea:	2805      	cmp	r0, #5
 8007fec:	d126      	bne.n	800803c <_strtod_l+0x384>
 8007fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ff0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007ff4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ff8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ffc:	e6a0      	b.n	8007d40 <_strtod_l+0x88>
 8007ffe:	210a      	movs	r1, #10
 8008000:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008004:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008008:	e7b9      	b.n	8007f7e <_strtod_l+0x2c6>
 800800a:	2a6e      	cmp	r2, #110	; 0x6e
 800800c:	e7db      	b.n	8007fc6 <_strtod_l+0x30e>
 800800e:	4990      	ldr	r1, [pc, #576]	; (8008250 <_strtod_l+0x598>)
 8008010:	a817      	add	r0, sp, #92	; 0x5c
 8008012:	f001 fe3f 	bl	8009c94 <__match>
 8008016:	2800      	cmp	r0, #0
 8008018:	f43f aeb0 	beq.w	8007d7c <_strtod_l+0xc4>
 800801c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800801e:	498d      	ldr	r1, [pc, #564]	; (8008254 <_strtod_l+0x59c>)
 8008020:	3b01      	subs	r3, #1
 8008022:	a817      	add	r0, sp, #92	; 0x5c
 8008024:	9317      	str	r3, [sp, #92]	; 0x5c
 8008026:	f001 fe35 	bl	8009c94 <__match>
 800802a:	b910      	cbnz	r0, 8008032 <_strtod_l+0x37a>
 800802c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800802e:	3301      	adds	r3, #1
 8008030:	9317      	str	r3, [sp, #92]	; 0x5c
 8008032:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008264 <_strtod_l+0x5ac>
 8008036:	f04f 0a00 	mov.w	sl, #0
 800803a:	e681      	b.n	8007d40 <_strtod_l+0x88>
 800803c:	4886      	ldr	r0, [pc, #536]	; (8008258 <_strtod_l+0x5a0>)
 800803e:	f002 fe3f 	bl	800acc0 <nan>
 8008042:	ec5b ab10 	vmov	sl, fp, d0
 8008046:	e67b      	b.n	8007d40 <_strtod_l+0x88>
 8008048:	9b05      	ldr	r3, [sp, #20]
 800804a:	9807      	ldr	r0, [sp, #28]
 800804c:	1af3      	subs	r3, r6, r3
 800804e:	2f00      	cmp	r7, #0
 8008050:	bf08      	it	eq
 8008052:	462f      	moveq	r7, r5
 8008054:	2d10      	cmp	r5, #16
 8008056:	9306      	str	r3, [sp, #24]
 8008058:	46a8      	mov	r8, r5
 800805a:	bfa8      	it	ge
 800805c:	f04f 0810 	movge.w	r8, #16
 8008060:	f7f8 fa70 	bl	8000544 <__aeabi_ui2d>
 8008064:	2d09      	cmp	r5, #9
 8008066:	4682      	mov	sl, r0
 8008068:	468b      	mov	fp, r1
 800806a:	dd13      	ble.n	8008094 <_strtod_l+0x3dc>
 800806c:	4b7b      	ldr	r3, [pc, #492]	; (800825c <_strtod_l+0x5a4>)
 800806e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008072:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008076:	f7f8 fadf 	bl	8000638 <__aeabi_dmul>
 800807a:	4682      	mov	sl, r0
 800807c:	4648      	mov	r0, r9
 800807e:	468b      	mov	fp, r1
 8008080:	f7f8 fa60 	bl	8000544 <__aeabi_ui2d>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4650      	mov	r0, sl
 800808a:	4659      	mov	r1, fp
 800808c:	f7f8 f91e 	bl	80002cc <__adddf3>
 8008090:	4682      	mov	sl, r0
 8008092:	468b      	mov	fp, r1
 8008094:	2d0f      	cmp	r5, #15
 8008096:	dc38      	bgt.n	800810a <_strtod_l+0x452>
 8008098:	9b06      	ldr	r3, [sp, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	f43f ae50 	beq.w	8007d40 <_strtod_l+0x88>
 80080a0:	dd24      	ble.n	80080ec <_strtod_l+0x434>
 80080a2:	2b16      	cmp	r3, #22
 80080a4:	dc0b      	bgt.n	80080be <_strtod_l+0x406>
 80080a6:	496d      	ldr	r1, [pc, #436]	; (800825c <_strtod_l+0x5a4>)
 80080a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b0:	4652      	mov	r2, sl
 80080b2:	465b      	mov	r3, fp
 80080b4:	f7f8 fac0 	bl	8000638 <__aeabi_dmul>
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	e640      	b.n	8007d40 <_strtod_l+0x88>
 80080be:	9a06      	ldr	r2, [sp, #24]
 80080c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080c4:	4293      	cmp	r3, r2
 80080c6:	db20      	blt.n	800810a <_strtod_l+0x452>
 80080c8:	4c64      	ldr	r4, [pc, #400]	; (800825c <_strtod_l+0x5a4>)
 80080ca:	f1c5 050f 	rsb	r5, r5, #15
 80080ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080da:	f7f8 faad 	bl	8000638 <__aeabi_dmul>
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	1b5d      	subs	r5, r3, r5
 80080e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080ea:	e7e3      	b.n	80080b4 <_strtod_l+0x3fc>
 80080ec:	9b06      	ldr	r3, [sp, #24]
 80080ee:	3316      	adds	r3, #22
 80080f0:	db0b      	blt.n	800810a <_strtod_l+0x452>
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	1b9e      	subs	r6, r3, r6
 80080f6:	4b59      	ldr	r3, [pc, #356]	; (800825c <_strtod_l+0x5a4>)
 80080f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80080fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 fbc2 	bl	800088c <__aeabi_ddiv>
 8008108:	e7d6      	b.n	80080b8 <_strtod_l+0x400>
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	eba5 0808 	sub.w	r8, r5, r8
 8008110:	4498      	add	r8, r3
 8008112:	f1b8 0f00 	cmp.w	r8, #0
 8008116:	dd74      	ble.n	8008202 <_strtod_l+0x54a>
 8008118:	f018 030f 	ands.w	r3, r8, #15
 800811c:	d00a      	beq.n	8008134 <_strtod_l+0x47c>
 800811e:	494f      	ldr	r1, [pc, #316]	; (800825c <_strtod_l+0x5a4>)
 8008120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008124:	4652      	mov	r2, sl
 8008126:	465b      	mov	r3, fp
 8008128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812c:	f7f8 fa84 	bl	8000638 <__aeabi_dmul>
 8008130:	4682      	mov	sl, r0
 8008132:	468b      	mov	fp, r1
 8008134:	f038 080f 	bics.w	r8, r8, #15
 8008138:	d04f      	beq.n	80081da <_strtod_l+0x522>
 800813a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800813e:	dd22      	ble.n	8008186 <_strtod_l+0x4ce>
 8008140:	2500      	movs	r5, #0
 8008142:	462e      	mov	r6, r5
 8008144:	9507      	str	r5, [sp, #28]
 8008146:	9505      	str	r5, [sp, #20]
 8008148:	2322      	movs	r3, #34	; 0x22
 800814a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008264 <_strtod_l+0x5ac>
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	f04f 0a00 	mov.w	sl, #0
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f43f adf2 	beq.w	8007d40 <_strtod_l+0x88>
 800815c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800815e:	4620      	mov	r0, r4
 8008160:	f001 fec6 	bl	8009ef0 <_Bfree>
 8008164:	9905      	ldr	r1, [sp, #20]
 8008166:	4620      	mov	r0, r4
 8008168:	f001 fec2 	bl	8009ef0 <_Bfree>
 800816c:	4631      	mov	r1, r6
 800816e:	4620      	mov	r0, r4
 8008170:	f001 febe 	bl	8009ef0 <_Bfree>
 8008174:	9907      	ldr	r1, [sp, #28]
 8008176:	4620      	mov	r0, r4
 8008178:	f001 feba 	bl	8009ef0 <_Bfree>
 800817c:	4629      	mov	r1, r5
 800817e:	4620      	mov	r0, r4
 8008180:	f001 feb6 	bl	8009ef0 <_Bfree>
 8008184:	e5dc      	b.n	8007d40 <_strtod_l+0x88>
 8008186:	4b36      	ldr	r3, [pc, #216]	; (8008260 <_strtod_l+0x5a8>)
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	2300      	movs	r3, #0
 800818c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	4699      	mov	r9, r3
 8008196:	f1b8 0f01 	cmp.w	r8, #1
 800819a:	dc21      	bgt.n	80081e0 <_strtod_l+0x528>
 800819c:	b10b      	cbz	r3, 80081a2 <_strtod_l+0x4ea>
 800819e:	4682      	mov	sl, r0
 80081a0:	468b      	mov	fp, r1
 80081a2:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <_strtod_l+0x5a8>)
 80081a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80081ac:	4652      	mov	r2, sl
 80081ae:	465b      	mov	r3, fp
 80081b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081b4:	f7f8 fa40 	bl	8000638 <__aeabi_dmul>
 80081b8:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <_strtod_l+0x5ac>)
 80081ba:	460a      	mov	r2, r1
 80081bc:	400b      	ands	r3, r1
 80081be:	492a      	ldr	r1, [pc, #168]	; (8008268 <_strtod_l+0x5b0>)
 80081c0:	428b      	cmp	r3, r1
 80081c2:	4682      	mov	sl, r0
 80081c4:	d8bc      	bhi.n	8008140 <_strtod_l+0x488>
 80081c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081ca:	428b      	cmp	r3, r1
 80081cc:	bf86      	itte	hi
 80081ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800826c <_strtod_l+0x5b4>
 80081d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80081d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081da:	2300      	movs	r3, #0
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	e084      	b.n	80082ea <_strtod_l+0x632>
 80081e0:	f018 0f01 	tst.w	r8, #1
 80081e4:	d005      	beq.n	80081f2 <_strtod_l+0x53a>
 80081e6:	9b04      	ldr	r3, [sp, #16]
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 fa24 	bl	8000638 <__aeabi_dmul>
 80081f0:	2301      	movs	r3, #1
 80081f2:	9a04      	ldr	r2, [sp, #16]
 80081f4:	3208      	adds	r2, #8
 80081f6:	f109 0901 	add.w	r9, r9, #1
 80081fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081fe:	9204      	str	r2, [sp, #16]
 8008200:	e7c9      	b.n	8008196 <_strtod_l+0x4de>
 8008202:	d0ea      	beq.n	80081da <_strtod_l+0x522>
 8008204:	f1c8 0800 	rsb	r8, r8, #0
 8008208:	f018 020f 	ands.w	r2, r8, #15
 800820c:	d00a      	beq.n	8008224 <_strtod_l+0x56c>
 800820e:	4b13      	ldr	r3, [pc, #76]	; (800825c <_strtod_l+0x5a4>)
 8008210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008214:	4650      	mov	r0, sl
 8008216:	4659      	mov	r1, fp
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 fb36 	bl	800088c <__aeabi_ddiv>
 8008220:	4682      	mov	sl, r0
 8008222:	468b      	mov	fp, r1
 8008224:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008228:	d0d7      	beq.n	80081da <_strtod_l+0x522>
 800822a:	f1b8 0f1f 	cmp.w	r8, #31
 800822e:	dd1f      	ble.n	8008270 <_strtod_l+0x5b8>
 8008230:	2500      	movs	r5, #0
 8008232:	462e      	mov	r6, r5
 8008234:	9507      	str	r5, [sp, #28]
 8008236:	9505      	str	r5, [sp, #20]
 8008238:	2322      	movs	r3, #34	; 0x22
 800823a:	f04f 0a00 	mov.w	sl, #0
 800823e:	f04f 0b00 	mov.w	fp, #0
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	e786      	b.n	8008154 <_strtod_l+0x49c>
 8008246:	bf00      	nop
 8008248:	0800b81d 	.word	0x0800b81d
 800824c:	0800b860 	.word	0x0800b860
 8008250:	0800b815 	.word	0x0800b815
 8008254:	0800b9a4 	.word	0x0800b9a4
 8008258:	0800bc50 	.word	0x0800bc50
 800825c:	0800bb30 	.word	0x0800bb30
 8008260:	0800bb08 	.word	0x0800bb08
 8008264:	7ff00000 	.word	0x7ff00000
 8008268:	7ca00000 	.word	0x7ca00000
 800826c:	7fefffff 	.word	0x7fefffff
 8008270:	f018 0310 	ands.w	r3, r8, #16
 8008274:	bf18      	it	ne
 8008276:	236a      	movne	r3, #106	; 0x6a
 8008278:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008628 <_strtod_l+0x970>
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	4650      	mov	r0, sl
 8008280:	4659      	mov	r1, fp
 8008282:	2300      	movs	r3, #0
 8008284:	f018 0f01 	tst.w	r8, #1
 8008288:	d004      	beq.n	8008294 <_strtod_l+0x5dc>
 800828a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800828e:	f7f8 f9d3 	bl	8000638 <__aeabi_dmul>
 8008292:	2301      	movs	r3, #1
 8008294:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008298:	f109 0908 	add.w	r9, r9, #8
 800829c:	d1f2      	bne.n	8008284 <_strtod_l+0x5cc>
 800829e:	b10b      	cbz	r3, 80082a4 <_strtod_l+0x5ec>
 80082a0:	4682      	mov	sl, r0
 80082a2:	468b      	mov	fp, r1
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	b1c3      	cbz	r3, 80082da <_strtod_l+0x622>
 80082a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	4659      	mov	r1, fp
 80082b4:	dd11      	ble.n	80082da <_strtod_l+0x622>
 80082b6:	2b1f      	cmp	r3, #31
 80082b8:	f340 8124 	ble.w	8008504 <_strtod_l+0x84c>
 80082bc:	2b34      	cmp	r3, #52	; 0x34
 80082be:	bfde      	ittt	le
 80082c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082c4:	f04f 33ff 	movle.w	r3, #4294967295
 80082c8:	fa03 f202 	lslle.w	r2, r3, r2
 80082cc:	f04f 0a00 	mov.w	sl, #0
 80082d0:	bfcc      	ite	gt
 80082d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082d6:	ea02 0b01 	andle.w	fp, r2, r1
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4650      	mov	r0, sl
 80082e0:	4659      	mov	r1, fp
 80082e2:	f7f8 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1a2      	bne.n	8008230 <_strtod_l+0x578>
 80082ea:	9b07      	ldr	r3, [sp, #28]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	9908      	ldr	r1, [sp, #32]
 80082f0:	462b      	mov	r3, r5
 80082f2:	463a      	mov	r2, r7
 80082f4:	4620      	mov	r0, r4
 80082f6:	f001 fe63 	bl	8009fc0 <__s2b>
 80082fa:	9007      	str	r0, [sp, #28]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f af1f 	beq.w	8008140 <_strtod_l+0x488>
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	1b9e      	subs	r6, r3, r6
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bfb4      	ite	lt
 800830c:	4633      	movlt	r3, r6
 800830e:	2300      	movge	r3, #0
 8008310:	930c      	str	r3, [sp, #48]	; 0x30
 8008312:	9b06      	ldr	r3, [sp, #24]
 8008314:	2500      	movs	r5, #0
 8008316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800831a:	9312      	str	r3, [sp, #72]	; 0x48
 800831c:	462e      	mov	r6, r5
 800831e:	9b07      	ldr	r3, [sp, #28]
 8008320:	4620      	mov	r0, r4
 8008322:	6859      	ldr	r1, [r3, #4]
 8008324:	f001 fda4 	bl	8009e70 <_Balloc>
 8008328:	9005      	str	r0, [sp, #20]
 800832a:	2800      	cmp	r0, #0
 800832c:	f43f af0c 	beq.w	8008148 <_strtod_l+0x490>
 8008330:	9b07      	ldr	r3, [sp, #28]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	3202      	adds	r2, #2
 8008336:	f103 010c 	add.w	r1, r3, #12
 800833a:	0092      	lsls	r2, r2, #2
 800833c:	300c      	adds	r0, #12
 800833e:	f001 fd89 	bl	8009e54 <memcpy>
 8008342:	ec4b ab10 	vmov	d0, sl, fp
 8008346:	aa1a      	add	r2, sp, #104	; 0x68
 8008348:	a919      	add	r1, sp, #100	; 0x64
 800834a:	4620      	mov	r0, r4
 800834c:	f002 f97e 	bl	800a64c <__d2b>
 8008350:	ec4b ab18 	vmov	d8, sl, fp
 8008354:	9018      	str	r0, [sp, #96]	; 0x60
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f aef6 	beq.w	8008148 <_strtod_l+0x490>
 800835c:	2101      	movs	r1, #1
 800835e:	4620      	mov	r0, r4
 8008360:	f001 fec8 	bl	800a0f4 <__i2b>
 8008364:	4606      	mov	r6, r0
 8008366:	2800      	cmp	r0, #0
 8008368:	f43f aeee 	beq.w	8008148 <_strtod_l+0x490>
 800836c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800836e:	9904      	ldr	r1, [sp, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfab      	itete	ge
 8008374:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008376:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008378:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800837a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800837e:	bfac      	ite	ge
 8008380:	eb03 0902 	addge.w	r9, r3, r2
 8008384:	1ad7      	sublt	r7, r2, r3
 8008386:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008388:	eba3 0801 	sub.w	r8, r3, r1
 800838c:	4490      	add	r8, r2
 800838e:	4ba1      	ldr	r3, [pc, #644]	; (8008614 <_strtod_l+0x95c>)
 8008390:	f108 38ff 	add.w	r8, r8, #4294967295
 8008394:	4598      	cmp	r8, r3
 8008396:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800839a:	f280 80c7 	bge.w	800852c <_strtod_l+0x874>
 800839e:	eba3 0308 	sub.w	r3, r3, r8
 80083a2:	2b1f      	cmp	r3, #31
 80083a4:	eba2 0203 	sub.w	r2, r2, r3
 80083a8:	f04f 0101 	mov.w	r1, #1
 80083ac:	f300 80b1 	bgt.w	8008512 <_strtod_l+0x85a>
 80083b0:	fa01 f303 	lsl.w	r3, r1, r3
 80083b4:	930d      	str	r3, [sp, #52]	; 0x34
 80083b6:	2300      	movs	r3, #0
 80083b8:	9308      	str	r3, [sp, #32]
 80083ba:	eb09 0802 	add.w	r8, r9, r2
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	45c1      	cmp	r9, r8
 80083c2:	4417      	add	r7, r2
 80083c4:	441f      	add	r7, r3
 80083c6:	464b      	mov	r3, r9
 80083c8:	bfa8      	it	ge
 80083ca:	4643      	movge	r3, r8
 80083cc:	42bb      	cmp	r3, r7
 80083ce:	bfa8      	it	ge
 80083d0:	463b      	movge	r3, r7
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bfc2      	ittt	gt
 80083d6:	eba8 0803 	subgt.w	r8, r8, r3
 80083da:	1aff      	subgt	r7, r7, r3
 80083dc:	eba9 0903 	subgt.w	r9, r9, r3
 80083e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dd17      	ble.n	8008416 <_strtod_l+0x75e>
 80083e6:	4631      	mov	r1, r6
 80083e8:	461a      	mov	r2, r3
 80083ea:	4620      	mov	r0, r4
 80083ec:	f001 ff42 	bl	800a274 <__pow5mult>
 80083f0:	4606      	mov	r6, r0
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f43f aea8 	beq.w	8008148 <_strtod_l+0x490>
 80083f8:	4601      	mov	r1, r0
 80083fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083fc:	4620      	mov	r0, r4
 80083fe:	f001 fe8f 	bl	800a120 <__multiply>
 8008402:	900b      	str	r0, [sp, #44]	; 0x2c
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f ae9f 	beq.w	8008148 <_strtod_l+0x490>
 800840a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800840c:	4620      	mov	r0, r4
 800840e:	f001 fd6f 	bl	8009ef0 <_Bfree>
 8008412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008414:	9318      	str	r3, [sp, #96]	; 0x60
 8008416:	f1b8 0f00 	cmp.w	r8, #0
 800841a:	f300 808c 	bgt.w	8008536 <_strtod_l+0x87e>
 800841e:	9b06      	ldr	r3, [sp, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	dd08      	ble.n	8008436 <_strtod_l+0x77e>
 8008424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008426:	9905      	ldr	r1, [sp, #20]
 8008428:	4620      	mov	r0, r4
 800842a:	f001 ff23 	bl	800a274 <__pow5mult>
 800842e:	9005      	str	r0, [sp, #20]
 8008430:	2800      	cmp	r0, #0
 8008432:	f43f ae89 	beq.w	8008148 <_strtod_l+0x490>
 8008436:	2f00      	cmp	r7, #0
 8008438:	dd08      	ble.n	800844c <_strtod_l+0x794>
 800843a:	9905      	ldr	r1, [sp, #20]
 800843c:	463a      	mov	r2, r7
 800843e:	4620      	mov	r0, r4
 8008440:	f001 ff72 	bl	800a328 <__lshift>
 8008444:	9005      	str	r0, [sp, #20]
 8008446:	2800      	cmp	r0, #0
 8008448:	f43f ae7e 	beq.w	8008148 <_strtod_l+0x490>
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	dd08      	ble.n	8008464 <_strtod_l+0x7ac>
 8008452:	4631      	mov	r1, r6
 8008454:	464a      	mov	r2, r9
 8008456:	4620      	mov	r0, r4
 8008458:	f001 ff66 	bl	800a328 <__lshift>
 800845c:	4606      	mov	r6, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f ae72 	beq.w	8008148 <_strtod_l+0x490>
 8008464:	9a05      	ldr	r2, [sp, #20]
 8008466:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008468:	4620      	mov	r0, r4
 800846a:	f001 ffe9 	bl	800a440 <__mdiff>
 800846e:	4605      	mov	r5, r0
 8008470:	2800      	cmp	r0, #0
 8008472:	f43f ae69 	beq.w	8008148 <_strtod_l+0x490>
 8008476:	68c3      	ldr	r3, [r0, #12]
 8008478:	930b      	str	r3, [sp, #44]	; 0x2c
 800847a:	2300      	movs	r3, #0
 800847c:	60c3      	str	r3, [r0, #12]
 800847e:	4631      	mov	r1, r6
 8008480:	f001 ffc2 	bl	800a408 <__mcmp>
 8008484:	2800      	cmp	r0, #0
 8008486:	da60      	bge.n	800854a <_strtod_l+0x892>
 8008488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800848a:	ea53 030a 	orrs.w	r3, r3, sl
 800848e:	f040 8082 	bne.w	8008596 <_strtod_l+0x8de>
 8008492:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008496:	2b00      	cmp	r3, #0
 8008498:	d17d      	bne.n	8008596 <_strtod_l+0x8de>
 800849a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800849e:	0d1b      	lsrs	r3, r3, #20
 80084a0:	051b      	lsls	r3, r3, #20
 80084a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084a6:	d976      	bls.n	8008596 <_strtod_l+0x8de>
 80084a8:	696b      	ldr	r3, [r5, #20]
 80084aa:	b913      	cbnz	r3, 80084b2 <_strtod_l+0x7fa>
 80084ac:	692b      	ldr	r3, [r5, #16]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	dd71      	ble.n	8008596 <_strtod_l+0x8de>
 80084b2:	4629      	mov	r1, r5
 80084b4:	2201      	movs	r2, #1
 80084b6:	4620      	mov	r0, r4
 80084b8:	f001 ff36 	bl	800a328 <__lshift>
 80084bc:	4631      	mov	r1, r6
 80084be:	4605      	mov	r5, r0
 80084c0:	f001 ffa2 	bl	800a408 <__mcmp>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	dd66      	ble.n	8008596 <_strtod_l+0x8de>
 80084c8:	9904      	ldr	r1, [sp, #16]
 80084ca:	4a53      	ldr	r2, [pc, #332]	; (8008618 <_strtod_l+0x960>)
 80084cc:	465b      	mov	r3, fp
 80084ce:	2900      	cmp	r1, #0
 80084d0:	f000 8081 	beq.w	80085d6 <_strtod_l+0x91e>
 80084d4:	ea02 010b 	and.w	r1, r2, fp
 80084d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084dc:	dc7b      	bgt.n	80085d6 <_strtod_l+0x91e>
 80084de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084e2:	f77f aea9 	ble.w	8008238 <_strtod_l+0x580>
 80084e6:	4b4d      	ldr	r3, [pc, #308]	; (800861c <_strtod_l+0x964>)
 80084e8:	4650      	mov	r0, sl
 80084ea:	4659      	mov	r1, fp
 80084ec:	2200      	movs	r2, #0
 80084ee:	f7f8 f8a3 	bl	8000638 <__aeabi_dmul>
 80084f2:	460b      	mov	r3, r1
 80084f4:	4303      	orrs	r3, r0
 80084f6:	bf08      	it	eq
 80084f8:	2322      	moveq	r3, #34	; 0x22
 80084fa:	4682      	mov	sl, r0
 80084fc:	468b      	mov	fp, r1
 80084fe:	bf08      	it	eq
 8008500:	6023      	streq	r3, [r4, #0]
 8008502:	e62b      	b.n	800815c <_strtod_l+0x4a4>
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	ea03 0a0a 	and.w	sl, r3, sl
 8008510:	e6e3      	b.n	80082da <_strtod_l+0x622>
 8008512:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008516:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800851a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800851e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008522:	fa01 f308 	lsl.w	r3, r1, r8
 8008526:	9308      	str	r3, [sp, #32]
 8008528:	910d      	str	r1, [sp, #52]	; 0x34
 800852a:	e746      	b.n	80083ba <_strtod_l+0x702>
 800852c:	2300      	movs	r3, #0
 800852e:	9308      	str	r3, [sp, #32]
 8008530:	2301      	movs	r3, #1
 8008532:	930d      	str	r3, [sp, #52]	; 0x34
 8008534:	e741      	b.n	80083ba <_strtod_l+0x702>
 8008536:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008538:	4642      	mov	r2, r8
 800853a:	4620      	mov	r0, r4
 800853c:	f001 fef4 	bl	800a328 <__lshift>
 8008540:	9018      	str	r0, [sp, #96]	; 0x60
 8008542:	2800      	cmp	r0, #0
 8008544:	f47f af6b 	bne.w	800841e <_strtod_l+0x766>
 8008548:	e5fe      	b.n	8008148 <_strtod_l+0x490>
 800854a:	465f      	mov	r7, fp
 800854c:	d16e      	bne.n	800862c <_strtod_l+0x974>
 800854e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008554:	b342      	cbz	r2, 80085a8 <_strtod_l+0x8f0>
 8008556:	4a32      	ldr	r2, [pc, #200]	; (8008620 <_strtod_l+0x968>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d128      	bne.n	80085ae <_strtod_l+0x8f6>
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	4651      	mov	r1, sl
 8008560:	b1eb      	cbz	r3, 800859e <_strtod_l+0x8e6>
 8008562:	4b2d      	ldr	r3, [pc, #180]	; (8008618 <_strtod_l+0x960>)
 8008564:	403b      	ands	r3, r7
 8008566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800856a:	f04f 32ff 	mov.w	r2, #4294967295
 800856e:	d819      	bhi.n	80085a4 <_strtod_l+0x8ec>
 8008570:	0d1b      	lsrs	r3, r3, #20
 8008572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	4299      	cmp	r1, r3
 800857c:	d117      	bne.n	80085ae <_strtod_l+0x8f6>
 800857e:	4b29      	ldr	r3, [pc, #164]	; (8008624 <_strtod_l+0x96c>)
 8008580:	429f      	cmp	r7, r3
 8008582:	d102      	bne.n	800858a <_strtod_l+0x8d2>
 8008584:	3101      	adds	r1, #1
 8008586:	f43f addf 	beq.w	8008148 <_strtod_l+0x490>
 800858a:	4b23      	ldr	r3, [pc, #140]	; (8008618 <_strtod_l+0x960>)
 800858c:	403b      	ands	r3, r7
 800858e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008592:	f04f 0a00 	mov.w	sl, #0
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1a4      	bne.n	80084e6 <_strtod_l+0x82e>
 800859c:	e5de      	b.n	800815c <_strtod_l+0x4a4>
 800859e:	f04f 33ff 	mov.w	r3, #4294967295
 80085a2:	e7ea      	b.n	800857a <_strtod_l+0x8c2>
 80085a4:	4613      	mov	r3, r2
 80085a6:	e7e8      	b.n	800857a <_strtod_l+0x8c2>
 80085a8:	ea53 030a 	orrs.w	r3, r3, sl
 80085ac:	d08c      	beq.n	80084c8 <_strtod_l+0x810>
 80085ae:	9b08      	ldr	r3, [sp, #32]
 80085b0:	b1db      	cbz	r3, 80085ea <_strtod_l+0x932>
 80085b2:	423b      	tst	r3, r7
 80085b4:	d0ef      	beq.n	8008596 <_strtod_l+0x8de>
 80085b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b8:	9a04      	ldr	r2, [sp, #16]
 80085ba:	4650      	mov	r0, sl
 80085bc:	4659      	mov	r1, fp
 80085be:	b1c3      	cbz	r3, 80085f2 <_strtod_l+0x93a>
 80085c0:	f7ff fb5d 	bl	8007c7e <sulp>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	ec51 0b18 	vmov	r0, r1, d8
 80085cc:	f7f7 fe7e 	bl	80002cc <__adddf3>
 80085d0:	4682      	mov	sl, r0
 80085d2:	468b      	mov	fp, r1
 80085d4:	e7df      	b.n	8008596 <_strtod_l+0x8de>
 80085d6:	4013      	ands	r3, r2
 80085d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085e4:	f04f 3aff 	mov.w	sl, #4294967295
 80085e8:	e7d5      	b.n	8008596 <_strtod_l+0x8de>
 80085ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ec:	ea13 0f0a 	tst.w	r3, sl
 80085f0:	e7e0      	b.n	80085b4 <_strtod_l+0x8fc>
 80085f2:	f7ff fb44 	bl	8007c7e <sulp>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	ec51 0b18 	vmov	r0, r1, d8
 80085fe:	f7f7 fe63 	bl	80002c8 <__aeabi_dsub>
 8008602:	2200      	movs	r2, #0
 8008604:	2300      	movs	r3, #0
 8008606:	4682      	mov	sl, r0
 8008608:	468b      	mov	fp, r1
 800860a:	f7f8 fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 800860e:	2800      	cmp	r0, #0
 8008610:	d0c1      	beq.n	8008596 <_strtod_l+0x8de>
 8008612:	e611      	b.n	8008238 <_strtod_l+0x580>
 8008614:	fffffc02 	.word	0xfffffc02
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	39500000 	.word	0x39500000
 8008620:	000fffff 	.word	0x000fffff
 8008624:	7fefffff 	.word	0x7fefffff
 8008628:	0800b878 	.word	0x0800b878
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	f002 f868 	bl	800a704 <__ratio>
 8008634:	ec59 8b10 	vmov	r8, r9, d0
 8008638:	ee10 0a10 	vmov	r0, s0
 800863c:	2200      	movs	r2, #0
 800863e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008642:	4649      	mov	r1, r9
 8008644:	f7f8 fa74 	bl	8000b30 <__aeabi_dcmple>
 8008648:	2800      	cmp	r0, #0
 800864a:	d07a      	beq.n	8008742 <_strtod_l+0xa8a>
 800864c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04a      	beq.n	80086e8 <_strtod_l+0xa30>
 8008652:	4b95      	ldr	r3, [pc, #596]	; (80088a8 <_strtod_l+0xbf0>)
 8008654:	2200      	movs	r2, #0
 8008656:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800865a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80088a8 <_strtod_l+0xbf0>
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	4b92      	ldr	r3, [pc, #584]	; (80088ac <_strtod_l+0xbf4>)
 8008664:	403b      	ands	r3, r7
 8008666:	930d      	str	r3, [sp, #52]	; 0x34
 8008668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800866a:	4b91      	ldr	r3, [pc, #580]	; (80088b0 <_strtod_l+0xbf8>)
 800866c:	429a      	cmp	r2, r3
 800866e:	f040 80b0 	bne.w	80087d2 <_strtod_l+0xb1a>
 8008672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008676:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800867a:	ec4b ab10 	vmov	d0, sl, fp
 800867e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008682:	f001 ff67 	bl	800a554 <__ulp>
 8008686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800868a:	ec53 2b10 	vmov	r2, r3, d0
 800868e:	f7f7 ffd3 	bl	8000638 <__aeabi_dmul>
 8008692:	4652      	mov	r2, sl
 8008694:	465b      	mov	r3, fp
 8008696:	f7f7 fe19 	bl	80002cc <__adddf3>
 800869a:	460b      	mov	r3, r1
 800869c:	4983      	ldr	r1, [pc, #524]	; (80088ac <_strtod_l+0xbf4>)
 800869e:	4a85      	ldr	r2, [pc, #532]	; (80088b4 <_strtod_l+0xbfc>)
 80086a0:	4019      	ands	r1, r3
 80086a2:	4291      	cmp	r1, r2
 80086a4:	4682      	mov	sl, r0
 80086a6:	d960      	bls.n	800876a <_strtod_l+0xab2>
 80086a8:	ee18 3a90 	vmov	r3, s17
 80086ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d104      	bne.n	80086be <_strtod_l+0xa06>
 80086b4:	ee18 3a10 	vmov	r3, s16
 80086b8:	3301      	adds	r3, #1
 80086ba:	f43f ad45 	beq.w	8008148 <_strtod_l+0x490>
 80086be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80088c0 <_strtod_l+0xc08>
 80086c2:	f04f 3aff 	mov.w	sl, #4294967295
 80086c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086c8:	4620      	mov	r0, r4
 80086ca:	f001 fc11 	bl	8009ef0 <_Bfree>
 80086ce:	9905      	ldr	r1, [sp, #20]
 80086d0:	4620      	mov	r0, r4
 80086d2:	f001 fc0d 	bl	8009ef0 <_Bfree>
 80086d6:	4631      	mov	r1, r6
 80086d8:	4620      	mov	r0, r4
 80086da:	f001 fc09 	bl	8009ef0 <_Bfree>
 80086de:	4629      	mov	r1, r5
 80086e0:	4620      	mov	r0, r4
 80086e2:	f001 fc05 	bl	8009ef0 <_Bfree>
 80086e6:	e61a      	b.n	800831e <_strtod_l+0x666>
 80086e8:	f1ba 0f00 	cmp.w	sl, #0
 80086ec:	d11b      	bne.n	8008726 <_strtod_l+0xa6e>
 80086ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086f2:	b9f3      	cbnz	r3, 8008732 <_strtod_l+0xa7a>
 80086f4:	4b6c      	ldr	r3, [pc, #432]	; (80088a8 <_strtod_l+0xbf0>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	4640      	mov	r0, r8
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f8 fa0e 	bl	8000b1c <__aeabi_dcmplt>
 8008700:	b9d0      	cbnz	r0, 8008738 <_strtod_l+0xa80>
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	4b6c      	ldr	r3, [pc, #432]	; (80088b8 <_strtod_l+0xc00>)
 8008708:	2200      	movs	r2, #0
 800870a:	f7f7 ff95 	bl	8000638 <__aeabi_dmul>
 800870e:	4680      	mov	r8, r0
 8008710:	4689      	mov	r9, r1
 8008712:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008716:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800871a:	9315      	str	r3, [sp, #84]	; 0x54
 800871c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008724:	e79d      	b.n	8008662 <_strtod_l+0x9aa>
 8008726:	f1ba 0f01 	cmp.w	sl, #1
 800872a:	d102      	bne.n	8008732 <_strtod_l+0xa7a>
 800872c:	2f00      	cmp	r7, #0
 800872e:	f43f ad83 	beq.w	8008238 <_strtod_l+0x580>
 8008732:	4b62      	ldr	r3, [pc, #392]	; (80088bc <_strtod_l+0xc04>)
 8008734:	2200      	movs	r2, #0
 8008736:	e78e      	b.n	8008656 <_strtod_l+0x99e>
 8008738:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80088b8 <_strtod_l+0xc00>
 800873c:	f04f 0800 	mov.w	r8, #0
 8008740:	e7e7      	b.n	8008712 <_strtod_l+0xa5a>
 8008742:	4b5d      	ldr	r3, [pc, #372]	; (80088b8 <_strtod_l+0xc00>)
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	2200      	movs	r2, #0
 800874a:	f7f7 ff75 	bl	8000638 <__aeabi_dmul>
 800874e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008750:	4680      	mov	r8, r0
 8008752:	4689      	mov	r9, r1
 8008754:	b933      	cbnz	r3, 8008764 <_strtod_l+0xaac>
 8008756:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800875a:	900e      	str	r0, [sp, #56]	; 0x38
 800875c:	930f      	str	r3, [sp, #60]	; 0x3c
 800875e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008762:	e7dd      	b.n	8008720 <_strtod_l+0xa68>
 8008764:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008768:	e7f9      	b.n	800875e <_strtod_l+0xaa6>
 800876a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1a8      	bne.n	80086c6 <_strtod_l+0xa0e>
 8008774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800877a:	0d1b      	lsrs	r3, r3, #20
 800877c:	051b      	lsls	r3, r3, #20
 800877e:	429a      	cmp	r2, r3
 8008780:	d1a1      	bne.n	80086c6 <_strtod_l+0xa0e>
 8008782:	4640      	mov	r0, r8
 8008784:	4649      	mov	r1, r9
 8008786:	f7f8 fab7 	bl	8000cf8 <__aeabi_d2lz>
 800878a:	f7f7 ff27 	bl	80005dc <__aeabi_l2d>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f7 fd97 	bl	80002c8 <__aeabi_dsub>
 800879a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800879c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087a0:	ea43 030a 	orr.w	r3, r3, sl
 80087a4:	4313      	orrs	r3, r2
 80087a6:	4680      	mov	r8, r0
 80087a8:	4689      	mov	r9, r1
 80087aa:	d055      	beq.n	8008858 <_strtod_l+0xba0>
 80087ac:	a336      	add	r3, pc, #216	; (adr r3, 8008888 <_strtod_l+0xbd0>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f8 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f47f acd0 	bne.w	800815c <_strtod_l+0x4a4>
 80087bc:	a334      	add	r3, pc, #208	; (adr r3, 8008890 <_strtod_l+0xbd8>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f8 f9c7 	bl	8000b58 <__aeabi_dcmpgt>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	f43f af7b 	beq.w	80086c6 <_strtod_l+0xa0e>
 80087d0:	e4c4      	b.n	800815c <_strtod_l+0x4a4>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	b333      	cbz	r3, 8008824 <_strtod_l+0xb6c>
 80087d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087dc:	d822      	bhi.n	8008824 <_strtod_l+0xb6c>
 80087de:	a32e      	add	r3, pc, #184	; (adr r3, 8008898 <_strtod_l+0xbe0>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	4640      	mov	r0, r8
 80087e6:	4649      	mov	r1, r9
 80087e8:	f7f8 f9a2 	bl	8000b30 <__aeabi_dcmple>
 80087ec:	b1a0      	cbz	r0, 8008818 <_strtod_l+0xb60>
 80087ee:	4649      	mov	r1, r9
 80087f0:	4640      	mov	r0, r8
 80087f2:	f7f8 f9f9 	bl	8000be8 <__aeabi_d2uiz>
 80087f6:	2801      	cmp	r0, #1
 80087f8:	bf38      	it	cc
 80087fa:	2001      	movcc	r0, #1
 80087fc:	f7f7 fea2 	bl	8000544 <__aeabi_ui2d>
 8008800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008802:	4680      	mov	r8, r0
 8008804:	4689      	mov	r9, r1
 8008806:	bb23      	cbnz	r3, 8008852 <_strtod_l+0xb9a>
 8008808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800880c:	9010      	str	r0, [sp, #64]	; 0x40
 800880e:	9311      	str	r3, [sp, #68]	; 0x44
 8008810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008814:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800881c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	9309      	str	r3, [sp, #36]	; 0x24
 8008824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008828:	eeb0 0a48 	vmov.f32	s0, s16
 800882c:	eef0 0a68 	vmov.f32	s1, s17
 8008830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008834:	f001 fe8e 	bl	800a554 <__ulp>
 8008838:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800883c:	ec53 2b10 	vmov	r2, r3, d0
 8008840:	f7f7 fefa 	bl	8000638 <__aeabi_dmul>
 8008844:	ec53 2b18 	vmov	r2, r3, d8
 8008848:	f7f7 fd40 	bl	80002cc <__adddf3>
 800884c:	4682      	mov	sl, r0
 800884e:	468b      	mov	fp, r1
 8008850:	e78d      	b.n	800876e <_strtod_l+0xab6>
 8008852:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008856:	e7db      	b.n	8008810 <_strtod_l+0xb58>
 8008858:	a311      	add	r3, pc, #68	; (adr r3, 80088a0 <_strtod_l+0xbe8>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f8 f95d 	bl	8000b1c <__aeabi_dcmplt>
 8008862:	e7b2      	b.n	80087ca <_strtod_l+0xb12>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	; 0x28
 8008868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800886a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	f7ff ba6b 	b.w	8007d48 <_strtod_l+0x90>
 8008872:	2a65      	cmp	r2, #101	; 0x65
 8008874:	f43f ab5f 	beq.w	8007f36 <_strtod_l+0x27e>
 8008878:	2a45      	cmp	r2, #69	; 0x45
 800887a:	f43f ab5c 	beq.w	8007f36 <_strtod_l+0x27e>
 800887e:	2301      	movs	r3, #1
 8008880:	f7ff bb94 	b.w	8007fac <_strtod_l+0x2f4>
 8008884:	f3af 8000 	nop.w
 8008888:	94a03595 	.word	0x94a03595
 800888c:	3fdfffff 	.word	0x3fdfffff
 8008890:	35afe535 	.word	0x35afe535
 8008894:	3fe00000 	.word	0x3fe00000
 8008898:	ffc00000 	.word	0xffc00000
 800889c:	41dfffff 	.word	0x41dfffff
 80088a0:	94a03595 	.word	0x94a03595
 80088a4:	3fcfffff 	.word	0x3fcfffff
 80088a8:	3ff00000 	.word	0x3ff00000
 80088ac:	7ff00000 	.word	0x7ff00000
 80088b0:	7fe00000 	.word	0x7fe00000
 80088b4:	7c9fffff 	.word	0x7c9fffff
 80088b8:	3fe00000 	.word	0x3fe00000
 80088bc:	bff00000 	.word	0xbff00000
 80088c0:	7fefffff 	.word	0x7fefffff

080088c4 <_strtod_r>:
 80088c4:	4b01      	ldr	r3, [pc, #4]	; (80088cc <_strtod_r+0x8>)
 80088c6:	f7ff b9f7 	b.w	8007cb8 <_strtod_l>
 80088ca:	bf00      	nop
 80088cc:	20000074 	.word	0x20000074

080088d0 <_strtol_l.constprop.0>:
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d6:	d001      	beq.n	80088dc <_strtol_l.constprop.0+0xc>
 80088d8:	2b24      	cmp	r3, #36	; 0x24
 80088da:	d906      	bls.n	80088ea <_strtol_l.constprop.0+0x1a>
 80088dc:	f7fe faa6 	bl	8006e2c <__errno>
 80088e0:	2316      	movs	r3, #22
 80088e2:	6003      	str	r3, [r0, #0]
 80088e4:	2000      	movs	r0, #0
 80088e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80089d0 <_strtol_l.constprop.0+0x100>
 80088ee:	460d      	mov	r5, r1
 80088f0:	462e      	mov	r6, r5
 80088f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80088fa:	f017 0708 	ands.w	r7, r7, #8
 80088fe:	d1f7      	bne.n	80088f0 <_strtol_l.constprop.0+0x20>
 8008900:	2c2d      	cmp	r4, #45	; 0x2d
 8008902:	d132      	bne.n	800896a <_strtol_l.constprop.0+0x9a>
 8008904:	782c      	ldrb	r4, [r5, #0]
 8008906:	2701      	movs	r7, #1
 8008908:	1cb5      	adds	r5, r6, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d05b      	beq.n	80089c6 <_strtol_l.constprop.0+0xf6>
 800890e:	2b10      	cmp	r3, #16
 8008910:	d109      	bne.n	8008926 <_strtol_l.constprop.0+0x56>
 8008912:	2c30      	cmp	r4, #48	; 0x30
 8008914:	d107      	bne.n	8008926 <_strtol_l.constprop.0+0x56>
 8008916:	782c      	ldrb	r4, [r5, #0]
 8008918:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800891c:	2c58      	cmp	r4, #88	; 0x58
 800891e:	d14d      	bne.n	80089bc <_strtol_l.constprop.0+0xec>
 8008920:	786c      	ldrb	r4, [r5, #1]
 8008922:	2310      	movs	r3, #16
 8008924:	3502      	adds	r5, #2
 8008926:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800892a:	f108 38ff 	add.w	r8, r8, #4294967295
 800892e:	f04f 0c00 	mov.w	ip, #0
 8008932:	fbb8 f9f3 	udiv	r9, r8, r3
 8008936:	4666      	mov	r6, ip
 8008938:	fb03 8a19 	mls	sl, r3, r9, r8
 800893c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008940:	f1be 0f09 	cmp.w	lr, #9
 8008944:	d816      	bhi.n	8008974 <_strtol_l.constprop.0+0xa4>
 8008946:	4674      	mov	r4, lr
 8008948:	42a3      	cmp	r3, r4
 800894a:	dd24      	ble.n	8008996 <_strtol_l.constprop.0+0xc6>
 800894c:	f1bc 0f00 	cmp.w	ip, #0
 8008950:	db1e      	blt.n	8008990 <_strtol_l.constprop.0+0xc0>
 8008952:	45b1      	cmp	r9, r6
 8008954:	d31c      	bcc.n	8008990 <_strtol_l.constprop.0+0xc0>
 8008956:	d101      	bne.n	800895c <_strtol_l.constprop.0+0x8c>
 8008958:	45a2      	cmp	sl, r4
 800895a:	db19      	blt.n	8008990 <_strtol_l.constprop.0+0xc0>
 800895c:	fb06 4603 	mla	r6, r6, r3, r4
 8008960:	f04f 0c01 	mov.w	ip, #1
 8008964:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008968:	e7e8      	b.n	800893c <_strtol_l.constprop.0+0x6c>
 800896a:	2c2b      	cmp	r4, #43	; 0x2b
 800896c:	bf04      	itt	eq
 800896e:	782c      	ldrbeq	r4, [r5, #0]
 8008970:	1cb5      	addeq	r5, r6, #2
 8008972:	e7ca      	b.n	800890a <_strtol_l.constprop.0+0x3a>
 8008974:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008978:	f1be 0f19 	cmp.w	lr, #25
 800897c:	d801      	bhi.n	8008982 <_strtol_l.constprop.0+0xb2>
 800897e:	3c37      	subs	r4, #55	; 0x37
 8008980:	e7e2      	b.n	8008948 <_strtol_l.constprop.0+0x78>
 8008982:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008986:	f1be 0f19 	cmp.w	lr, #25
 800898a:	d804      	bhi.n	8008996 <_strtol_l.constprop.0+0xc6>
 800898c:	3c57      	subs	r4, #87	; 0x57
 800898e:	e7db      	b.n	8008948 <_strtol_l.constprop.0+0x78>
 8008990:	f04f 3cff 	mov.w	ip, #4294967295
 8008994:	e7e6      	b.n	8008964 <_strtol_l.constprop.0+0x94>
 8008996:	f1bc 0f00 	cmp.w	ip, #0
 800899a:	da05      	bge.n	80089a8 <_strtol_l.constprop.0+0xd8>
 800899c:	2322      	movs	r3, #34	; 0x22
 800899e:	6003      	str	r3, [r0, #0]
 80089a0:	4646      	mov	r6, r8
 80089a2:	b942      	cbnz	r2, 80089b6 <_strtol_l.constprop.0+0xe6>
 80089a4:	4630      	mov	r0, r6
 80089a6:	e79e      	b.n	80088e6 <_strtol_l.constprop.0+0x16>
 80089a8:	b107      	cbz	r7, 80089ac <_strtol_l.constprop.0+0xdc>
 80089aa:	4276      	negs	r6, r6
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d0f9      	beq.n	80089a4 <_strtol_l.constprop.0+0xd4>
 80089b0:	f1bc 0f00 	cmp.w	ip, #0
 80089b4:	d000      	beq.n	80089b8 <_strtol_l.constprop.0+0xe8>
 80089b6:	1e69      	subs	r1, r5, #1
 80089b8:	6011      	str	r1, [r2, #0]
 80089ba:	e7f3      	b.n	80089a4 <_strtol_l.constprop.0+0xd4>
 80089bc:	2430      	movs	r4, #48	; 0x30
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1b1      	bne.n	8008926 <_strtol_l.constprop.0+0x56>
 80089c2:	2308      	movs	r3, #8
 80089c4:	e7af      	b.n	8008926 <_strtol_l.constprop.0+0x56>
 80089c6:	2c30      	cmp	r4, #48	; 0x30
 80089c8:	d0a5      	beq.n	8008916 <_strtol_l.constprop.0+0x46>
 80089ca:	230a      	movs	r3, #10
 80089cc:	e7ab      	b.n	8008926 <_strtol_l.constprop.0+0x56>
 80089ce:	bf00      	nop
 80089d0:	0800b8a1 	.word	0x0800b8a1

080089d4 <_strtol_r>:
 80089d4:	f7ff bf7c 	b.w	80088d0 <_strtol_l.constprop.0>

080089d8 <_write_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d07      	ldr	r5, [pc, #28]	; (80089f8 <_write_r+0x20>)
 80089dc:	4604      	mov	r4, r0
 80089de:	4608      	mov	r0, r1
 80089e0:	4611      	mov	r1, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7f9 fc8f 	bl	800230a <_write>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_write_r+0x1e>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_write_r+0x1e>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	20000988 	.word	0x20000988

080089fc <_close_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d06      	ldr	r5, [pc, #24]	; (8008a18 <_close_r+0x1c>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	f7f9 fc9b 	bl	8002342 <_close>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_close_r+0x1a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_close_r+0x1a>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	20000988 	.word	0x20000988

08008a1c <quorem>:
 8008a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	6903      	ldr	r3, [r0, #16]
 8008a22:	690c      	ldr	r4, [r1, #16]
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	4607      	mov	r7, r0
 8008a28:	f2c0 8081 	blt.w	8008b2e <quorem+0x112>
 8008a2c:	3c01      	subs	r4, #1
 8008a2e:	f101 0814 	add.w	r8, r1, #20
 8008a32:	f100 0514 	add.w	r5, r0, #20
 8008a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a44:	3301      	adds	r3, #1
 8008a46:	429a      	cmp	r2, r3
 8008a48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a50:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a54:	d331      	bcc.n	8008aba <quorem+0x9e>
 8008a56:	f04f 0e00 	mov.w	lr, #0
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	46ac      	mov	ip, r5
 8008a5e:	46f2      	mov	sl, lr
 8008a60:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a64:	b293      	uxth	r3, r2
 8008a66:	fb06 e303 	mla	r3, r6, r3, lr
 8008a6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	ebaa 0303 	sub.w	r3, sl, r3
 8008a74:	f8dc a000 	ldr.w	sl, [ip]
 8008a78:	0c12      	lsrs	r2, r2, #16
 8008a7a:	fa13 f38a 	uxtah	r3, r3, sl
 8008a7e:	fb06 e202 	mla	r2, r6, r2, lr
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	9b00      	ldr	r3, [sp, #0]
 8008a86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a8a:	b292      	uxth	r2, r2
 8008a8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a94:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a98:	4581      	cmp	r9, r0
 8008a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a9e:	f84c 3b04 	str.w	r3, [ip], #4
 8008aa2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aa6:	d2db      	bcs.n	8008a60 <quorem+0x44>
 8008aa8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008aac:	b92b      	cbnz	r3, 8008aba <quorem+0x9e>
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	429d      	cmp	r5, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	d32e      	bcc.n	8008b16 <quorem+0xfa>
 8008ab8:	613c      	str	r4, [r7, #16]
 8008aba:	4638      	mov	r0, r7
 8008abc:	f001 fca4 	bl	800a408 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	db24      	blt.n	8008b0e <quorem+0xf2>
 8008ac4:	3601      	adds	r6, #1
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f04f 0c00 	mov.w	ip, #0
 8008acc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ad0:	f8d0 e000 	ldr.w	lr, [r0]
 8008ad4:	b293      	uxth	r3, r2
 8008ad6:	ebac 0303 	sub.w	r3, ip, r3
 8008ada:	0c12      	lsrs	r2, r2, #16
 8008adc:	fa13 f38e 	uxtah	r3, r3, lr
 8008ae0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ae4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aee:	45c1      	cmp	r9, r8
 8008af0:	f840 3b04 	str.w	r3, [r0], #4
 8008af4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008af8:	d2e8      	bcs.n	8008acc <quorem+0xb0>
 8008afa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b02:	b922      	cbnz	r2, 8008b0e <quorem+0xf2>
 8008b04:	3b04      	subs	r3, #4
 8008b06:	429d      	cmp	r5, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	d30a      	bcc.n	8008b22 <quorem+0x106>
 8008b0c:	613c      	str	r4, [r7, #16]
 8008b0e:	4630      	mov	r0, r6
 8008b10:	b003      	add	sp, #12
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d1cc      	bne.n	8008ab8 <quorem+0x9c>
 8008b1e:	3c01      	subs	r4, #1
 8008b20:	e7c7      	b.n	8008ab2 <quorem+0x96>
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	d1f0      	bne.n	8008b0c <quorem+0xf0>
 8008b2a:	3c01      	subs	r4, #1
 8008b2c:	e7eb      	b.n	8008b06 <quorem+0xea>
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e7ee      	b.n	8008b10 <quorem+0xf4>
 8008b32:	0000      	movs	r0, r0
 8008b34:	0000      	movs	r0, r0
	...

08008b38 <_dtoa_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ed2d 8b04 	vpush	{d8-d9}
 8008b40:	ec57 6b10 	vmov	r6, r7, d0
 8008b44:	b093      	sub	sp, #76	; 0x4c
 8008b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b4c:	9106      	str	r1, [sp, #24]
 8008b4e:	ee10 aa10 	vmov	sl, s0
 8008b52:	4604      	mov	r4, r0
 8008b54:	9209      	str	r2, [sp, #36]	; 0x24
 8008b56:	930c      	str	r3, [sp, #48]	; 0x30
 8008b58:	46bb      	mov	fp, r7
 8008b5a:	b975      	cbnz	r5, 8008b7a <_dtoa_r+0x42>
 8008b5c:	2010      	movs	r0, #16
 8008b5e:	f001 f95f 	bl	8009e20 <malloc>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6260      	str	r0, [r4, #36]	; 0x24
 8008b66:	b920      	cbnz	r0, 8008b72 <_dtoa_r+0x3a>
 8008b68:	4ba7      	ldr	r3, [pc, #668]	; (8008e08 <_dtoa_r+0x2d0>)
 8008b6a:	21ea      	movs	r1, #234	; 0xea
 8008b6c:	48a7      	ldr	r0, [pc, #668]	; (8008e0c <_dtoa_r+0x2d4>)
 8008b6e:	f002 f8cd 	bl	800ad0c <__assert_func>
 8008b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b76:	6005      	str	r5, [r0, #0]
 8008b78:	60c5      	str	r5, [r0, #12]
 8008b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	b151      	cbz	r1, 8008b96 <_dtoa_r+0x5e>
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	604a      	str	r2, [r1, #4]
 8008b84:	2301      	movs	r3, #1
 8008b86:	4093      	lsls	r3, r2
 8008b88:	608b      	str	r3, [r1, #8]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f001 f9b0 	bl	8009ef0 <_Bfree>
 8008b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	1e3b      	subs	r3, r7, #0
 8008b98:	bfaa      	itet	ge
 8008b9a:	2300      	movge	r3, #0
 8008b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ba0:	f8c8 3000 	strge.w	r3, [r8]
 8008ba4:	4b9a      	ldr	r3, [pc, #616]	; (8008e10 <_dtoa_r+0x2d8>)
 8008ba6:	bfbc      	itt	lt
 8008ba8:	2201      	movlt	r2, #1
 8008baa:	f8c8 2000 	strlt.w	r2, [r8]
 8008bae:	ea33 030b 	bics.w	r3, r3, fp
 8008bb2:	d11b      	bne.n	8008bec <_dtoa_r+0xb4>
 8008bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bc0:	4333      	orrs	r3, r6
 8008bc2:	f000 8592 	beq.w	80096ea <_dtoa_r+0xbb2>
 8008bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bc8:	b963      	cbnz	r3, 8008be4 <_dtoa_r+0xac>
 8008bca:	4b92      	ldr	r3, [pc, #584]	; (8008e14 <_dtoa_r+0x2dc>)
 8008bcc:	e022      	b.n	8008c14 <_dtoa_r+0xdc>
 8008bce:	4b92      	ldr	r3, [pc, #584]	; (8008e18 <_dtoa_r+0x2e0>)
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	9801      	ldr	r0, [sp, #4]
 8008bda:	b013      	add	sp, #76	; 0x4c
 8008bdc:	ecbd 8b04 	vpop	{d8-d9}
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	4b8b      	ldr	r3, [pc, #556]	; (8008e14 <_dtoa_r+0x2dc>)
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	3303      	adds	r3, #3
 8008bea:	e7f3      	b.n	8008bd4 <_dtoa_r+0x9c>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	f7f7 ff88 	bl	8000b08 <__aeabi_dcmpeq>
 8008bf8:	ec4b ab19 	vmov	d9, sl, fp
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	b158      	cbz	r0, 8008c18 <_dtoa_r+0xe0>
 8008c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c02:	2301      	movs	r3, #1
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 856b 	beq.w	80096e4 <_dtoa_r+0xbac>
 8008c0e:	4883      	ldr	r0, [pc, #524]	; (8008e1c <_dtoa_r+0x2e4>)
 8008c10:	6018      	str	r0, [r3, #0]
 8008c12:	1e43      	subs	r3, r0, #1
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	e7df      	b.n	8008bd8 <_dtoa_r+0xa0>
 8008c18:	ec4b ab10 	vmov	d0, sl, fp
 8008c1c:	aa10      	add	r2, sp, #64	; 0x40
 8008c1e:	a911      	add	r1, sp, #68	; 0x44
 8008c20:	4620      	mov	r0, r4
 8008c22:	f001 fd13 	bl	800a64c <__d2b>
 8008c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c2a:	ee08 0a10 	vmov	s16, r0
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	f000 8084 	beq.w	8008d3c <_dtoa_r+0x204>
 8008c34:	ee19 3a90 	vmov	r3, s19
 8008c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c40:	4656      	mov	r6, sl
 8008c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c4e:	4b74      	ldr	r3, [pc, #464]	; (8008e20 <_dtoa_r+0x2e8>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 fb37 	bl	80002c8 <__aeabi_dsub>
 8008c5a:	a365      	add	r3, pc, #404	; (adr r3, 8008df0 <_dtoa_r+0x2b8>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fcea 	bl	8000638 <__aeabi_dmul>
 8008c64:	a364      	add	r3, pc, #400	; (adr r3, 8008df8 <_dtoa_r+0x2c0>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb2f 	bl	80002cc <__adddf3>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	4628      	mov	r0, r5
 8008c72:	460f      	mov	r7, r1
 8008c74:	f7f7 fc76 	bl	8000564 <__aeabi_i2d>
 8008c78:	a361      	add	r3, pc, #388	; (adr r3, 8008e00 <_dtoa_r+0x2c8>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fcdb 	bl	8000638 <__aeabi_dmul>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4630      	mov	r0, r6
 8008c88:	4639      	mov	r1, r7
 8008c8a:	f7f7 fb1f 	bl	80002cc <__adddf3>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	f7f7 ff81 	bl	8000b98 <__aeabi_d2iz>
 8008c96:	2200      	movs	r2, #0
 8008c98:	9000      	str	r0, [sp, #0]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8008ca4:	b150      	cbz	r0, 8008cbc <_dtoa_r+0x184>
 8008ca6:	9800      	ldr	r0, [sp, #0]
 8008ca8:	f7f7 fc5c 	bl	8000564 <__aeabi_i2d>
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	f7f7 ff2a 	bl	8000b08 <__aeabi_dcmpeq>
 8008cb4:	b910      	cbnz	r0, 8008cbc <_dtoa_r+0x184>
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	2b16      	cmp	r3, #22
 8008cc0:	d85a      	bhi.n	8008d78 <_dtoa_r+0x240>
 8008cc2:	9a00      	ldr	r2, [sp, #0]
 8008cc4:	4b57      	ldr	r3, [pc, #348]	; (8008e24 <_dtoa_r+0x2ec>)
 8008cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	ec51 0b19 	vmov	r0, r1, d9
 8008cd2:	f7f7 ff23 	bl	8000b1c <__aeabi_dcmplt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d050      	beq.n	8008d7c <_dtoa_r+0x244>
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ce6:	1b5d      	subs	r5, r3, r5
 8008ce8:	1e6b      	subs	r3, r5, #1
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	bf45      	ittet	mi
 8008cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cf2:	9304      	strmi	r3, [sp, #16]
 8008cf4:	2300      	movpl	r3, #0
 8008cf6:	2300      	movmi	r3, #0
 8008cf8:	bf4c      	ite	mi
 8008cfa:	9305      	strmi	r3, [sp, #20]
 8008cfc:	9304      	strpl	r3, [sp, #16]
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	db3d      	blt.n	8008d80 <_dtoa_r+0x248>
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	9a00      	ldr	r2, [sp, #0]
 8008d08:	920a      	str	r2, [sp, #40]	; 0x28
 8008d0a:	4413      	add	r3, r2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b09      	cmp	r3, #9
 8008d16:	f200 8089 	bhi.w	8008e2c <_dtoa_r+0x2f4>
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	bfc4      	itt	gt
 8008d1e:	3b04      	subgt	r3, #4
 8008d20:	9306      	strgt	r3, [sp, #24]
 8008d22:	9b06      	ldr	r3, [sp, #24]
 8008d24:	f1a3 0302 	sub.w	r3, r3, #2
 8008d28:	bfcc      	ite	gt
 8008d2a:	2500      	movgt	r5, #0
 8008d2c:	2501      	movle	r5, #1
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	f200 8087 	bhi.w	8008e42 <_dtoa_r+0x30a>
 8008d34:	e8df f003 	tbb	[pc, r3]
 8008d38:	59383a2d 	.word	0x59383a2d
 8008d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d40:	441d      	add	r5, r3
 8008d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	bfc1      	itttt	gt
 8008d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d5a:	bfda      	itte	le
 8008d5c:	f1c3 0320 	rsble	r3, r3, #32
 8008d60:	fa06 f003 	lslle.w	r0, r6, r3
 8008d64:	4318      	orrgt	r0, r3
 8008d66:	f7f7 fbed 	bl	8000544 <__aeabi_ui2d>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d72:	3d01      	subs	r5, #1
 8008d74:	930e      	str	r3, [sp, #56]	; 0x38
 8008d76:	e76a      	b.n	8008c4e <_dtoa_r+0x116>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7b2      	b.n	8008ce2 <_dtoa_r+0x1aa>
 8008d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d7e:	e7b1      	b.n	8008ce4 <_dtoa_r+0x1ac>
 8008d80:	9b04      	ldr	r3, [sp, #16]
 8008d82:	9a00      	ldr	r2, [sp, #0]
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	4253      	negs	r3, r2
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d90:	e7bf      	b.n	8008d12 <_dtoa_r+0x1da>
 8008d92:	2300      	movs	r3, #0
 8008d94:	9308      	str	r3, [sp, #32]
 8008d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc55      	bgt.n	8008e48 <_dtoa_r+0x310>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008da2:	461a      	mov	r2, r3
 8008da4:	9209      	str	r2, [sp, #36]	; 0x24
 8008da6:	e00c      	b.n	8008dc2 <_dtoa_r+0x28a>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7f3      	b.n	8008d94 <_dtoa_r+0x25c>
 8008dac:	2300      	movs	r3, #0
 8008dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db0:	9308      	str	r3, [sp, #32]
 8008db2:	9b00      	ldr	r3, [sp, #0]
 8008db4:	4413      	add	r3, r2
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	3301      	adds	r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	9303      	str	r3, [sp, #12]
 8008dbe:	bfb8      	it	lt
 8008dc0:	2301      	movlt	r3, #1
 8008dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6042      	str	r2, [r0, #4]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	f102 0614 	add.w	r6, r2, #20
 8008dce:	429e      	cmp	r6, r3
 8008dd0:	6841      	ldr	r1, [r0, #4]
 8008dd2:	d93d      	bls.n	8008e50 <_dtoa_r+0x318>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f001 f84b 	bl	8009e70 <_Balloc>
 8008dda:	9001      	str	r0, [sp, #4]
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d13b      	bne.n	8008e58 <_dtoa_r+0x320>
 8008de0:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <_dtoa_r+0x2f0>)
 8008de2:	4602      	mov	r2, r0
 8008de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008de8:	e6c0      	b.n	8008b6c <_dtoa_r+0x34>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e7df      	b.n	8008dae <_dtoa_r+0x276>
 8008dee:	bf00      	nop
 8008df0:	636f4361 	.word	0x636f4361
 8008df4:	3fd287a7 	.word	0x3fd287a7
 8008df8:	8b60c8b3 	.word	0x8b60c8b3
 8008dfc:	3fc68a28 	.word	0x3fc68a28
 8008e00:	509f79fb 	.word	0x509f79fb
 8008e04:	3fd34413 	.word	0x3fd34413
 8008e08:	0800b9ae 	.word	0x0800b9ae
 8008e0c:	0800b9c5 	.word	0x0800b9c5
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	0800b9aa 	.word	0x0800b9aa
 8008e18:	0800b9a1 	.word	0x0800b9a1
 8008e1c:	0800b821 	.word	0x0800b821
 8008e20:	3ff80000 	.word	0x3ff80000
 8008e24:	0800bb30 	.word	0x0800bb30
 8008e28:	0800ba20 	.word	0x0800ba20
 8008e2c:	2501      	movs	r5, #1
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9306      	str	r3, [sp, #24]
 8008e32:	9508      	str	r5, [sp, #32]
 8008e34:	f04f 33ff 	mov.w	r3, #4294967295
 8008e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2312      	movs	r3, #18
 8008e40:	e7b0      	b.n	8008da4 <_dtoa_r+0x26c>
 8008e42:	2301      	movs	r3, #1
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	e7f5      	b.n	8008e34 <_dtoa_r+0x2fc>
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e4e:	e7b8      	b.n	8008dc2 <_dtoa_r+0x28a>
 8008e50:	3101      	adds	r1, #1
 8008e52:	6041      	str	r1, [r0, #4]
 8008e54:	0052      	lsls	r2, r2, #1
 8008e56:	e7b8      	b.n	8008dca <_dtoa_r+0x292>
 8008e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5a:	9a01      	ldr	r2, [sp, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	2b0e      	cmp	r3, #14
 8008e62:	f200 809d 	bhi.w	8008fa0 <_dtoa_r+0x468>
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	f000 809a 	beq.w	8008fa0 <_dtoa_r+0x468>
 8008e6c:	9b00      	ldr	r3, [sp, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dd32      	ble.n	8008ed8 <_dtoa_r+0x3a0>
 8008e72:	4ab7      	ldr	r2, [pc, #732]	; (8009150 <_dtoa_r+0x618>)
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e80:	9b00      	ldr	r3, [sp, #0]
 8008e82:	05d8      	lsls	r0, r3, #23
 8008e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e88:	d516      	bpl.n	8008eb8 <_dtoa_r+0x380>
 8008e8a:	4bb2      	ldr	r3, [pc, #712]	; (8009154 <_dtoa_r+0x61c>)
 8008e8c:	ec51 0b19 	vmov	r0, r1, d9
 8008e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e94:	f7f7 fcfa 	bl	800088c <__aeabi_ddiv>
 8008e98:	f007 070f 	and.w	r7, r7, #15
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	468b      	mov	fp, r1
 8008ea0:	2503      	movs	r5, #3
 8008ea2:	4eac      	ldr	r6, [pc, #688]	; (8009154 <_dtoa_r+0x61c>)
 8008ea4:	b957      	cbnz	r7, 8008ebc <_dtoa_r+0x384>
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	4650      	mov	r0, sl
 8008eac:	4659      	mov	r1, fp
 8008eae:	f7f7 fced 	bl	800088c <__aeabi_ddiv>
 8008eb2:	4682      	mov	sl, r0
 8008eb4:	468b      	mov	fp, r1
 8008eb6:	e028      	b.n	8008f0a <_dtoa_r+0x3d2>
 8008eb8:	2502      	movs	r5, #2
 8008eba:	e7f2      	b.n	8008ea2 <_dtoa_r+0x36a>
 8008ebc:	07f9      	lsls	r1, r7, #31
 8008ebe:	d508      	bpl.n	8008ed2 <_dtoa_r+0x39a>
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ec8:	f7f7 fbb6 	bl	8000638 <__aeabi_dmul>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	107f      	asrs	r7, r7, #1
 8008ed4:	3608      	adds	r6, #8
 8008ed6:	e7e5      	b.n	8008ea4 <_dtoa_r+0x36c>
 8008ed8:	f000 809b 	beq.w	8009012 <_dtoa_r+0x4da>
 8008edc:	9b00      	ldr	r3, [sp, #0]
 8008ede:	4f9d      	ldr	r7, [pc, #628]	; (8009154 <_dtoa_r+0x61c>)
 8008ee0:	425e      	negs	r6, r3
 8008ee2:	4b9b      	ldr	r3, [pc, #620]	; (8009150 <_dtoa_r+0x618>)
 8008ee4:	f006 020f 	and.w	r2, r6, #15
 8008ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	ec51 0b19 	vmov	r0, r1, d9
 8008ef4:	f7f7 fba0 	bl	8000638 <__aeabi_dmul>
 8008ef8:	1136      	asrs	r6, r6, #4
 8008efa:	4682      	mov	sl, r0
 8008efc:	468b      	mov	fp, r1
 8008efe:	2300      	movs	r3, #0
 8008f00:	2502      	movs	r5, #2
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d17a      	bne.n	8008ffc <_dtoa_r+0x4c4>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1d3      	bne.n	8008eb2 <_dtoa_r+0x37a>
 8008f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8082 	beq.w	8009016 <_dtoa_r+0x4de>
 8008f12:	4b91      	ldr	r3, [pc, #580]	; (8009158 <_dtoa_r+0x620>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	4650      	mov	r0, sl
 8008f18:	4659      	mov	r1, fp
 8008f1a:	f7f7 fdff 	bl	8000b1c <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d079      	beq.n	8009016 <_dtoa_r+0x4de>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d076      	beq.n	8009016 <_dtoa_r+0x4de>
 8008f28:	9b02      	ldr	r3, [sp, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dd36      	ble.n	8008f9c <_dtoa_r+0x464>
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	4650      	mov	r0, sl
 8008f32:	4659      	mov	r1, fp
 8008f34:	1e5f      	subs	r7, r3, #1
 8008f36:	2200      	movs	r2, #0
 8008f38:	4b88      	ldr	r3, [pc, #544]	; (800915c <_dtoa_r+0x624>)
 8008f3a:	f7f7 fb7d 	bl	8000638 <__aeabi_dmul>
 8008f3e:	9e02      	ldr	r6, [sp, #8]
 8008f40:	4682      	mov	sl, r0
 8008f42:	468b      	mov	fp, r1
 8008f44:	3501      	adds	r5, #1
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7f7 fb0c 	bl	8000564 <__aeabi_i2d>
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	f7f7 fb72 	bl	8000638 <__aeabi_dmul>
 8008f54:	4b82      	ldr	r3, [pc, #520]	; (8009160 <_dtoa_r+0x628>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	f7f7 f9b8 	bl	80002cc <__adddf3>
 8008f5c:	46d0      	mov	r8, sl
 8008f5e:	46d9      	mov	r9, fp
 8008f60:	4682      	mov	sl, r0
 8008f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	d158      	bne.n	800901c <_dtoa_r+0x4e4>
 8008f6a:	4b7e      	ldr	r3, [pc, #504]	; (8009164 <_dtoa_r+0x62c>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 f9a9 	bl	80002c8 <__aeabi_dsub>
 8008f76:	4652      	mov	r2, sl
 8008f78:	465b      	mov	r3, fp
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	f7f7 fdeb 	bl	8000b58 <__aeabi_dcmpgt>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f040 8295 	bne.w	80094b2 <_dtoa_r+0x97a>
 8008f88:	4652      	mov	r2, sl
 8008f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fdc3 	bl	8000b1c <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f040 8289 	bne.w	80094ae <_dtoa_r+0x976>
 8008f9c:	ec5b ab19 	vmov	sl, fp, d9
 8008fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f2c0 8148 	blt.w	8009238 <_dtoa_r+0x700>
 8008fa8:	9a00      	ldr	r2, [sp, #0]
 8008faa:	2a0e      	cmp	r2, #14
 8008fac:	f300 8144 	bgt.w	8009238 <_dtoa_r+0x700>
 8008fb0:	4b67      	ldr	r3, [pc, #412]	; (8009150 <_dtoa_r+0x618>)
 8008fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f280 80d5 	bge.w	800916c <_dtoa_r+0x634>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f300 80d1 	bgt.w	800916c <_dtoa_r+0x634>
 8008fca:	f040 826f 	bne.w	80094ac <_dtoa_r+0x974>
 8008fce:	4b65      	ldr	r3, [pc, #404]	; (8009164 <_dtoa_r+0x62c>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fb2f 	bl	8000638 <__aeabi_dmul>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	f7f7 fdb1 	bl	8000b44 <__aeabi_dcmpge>
 8008fe2:	9e03      	ldr	r6, [sp, #12]
 8008fe4:	4637      	mov	r7, r6
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f040 8245 	bne.w	8009476 <_dtoa_r+0x93e>
 8008fec:	9d01      	ldr	r5, [sp, #4]
 8008fee:	2331      	movs	r3, #49	; 0x31
 8008ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ff4:	9b00      	ldr	r3, [sp, #0]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	e240      	b.n	800947e <_dtoa_r+0x946>
 8008ffc:	07f2      	lsls	r2, r6, #31
 8008ffe:	d505      	bpl.n	800900c <_dtoa_r+0x4d4>
 8009000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009004:	f7f7 fb18 	bl	8000638 <__aeabi_dmul>
 8009008:	3501      	adds	r5, #1
 800900a:	2301      	movs	r3, #1
 800900c:	1076      	asrs	r6, r6, #1
 800900e:	3708      	adds	r7, #8
 8009010:	e777      	b.n	8008f02 <_dtoa_r+0x3ca>
 8009012:	2502      	movs	r5, #2
 8009014:	e779      	b.n	8008f0a <_dtoa_r+0x3d2>
 8009016:	9f00      	ldr	r7, [sp, #0]
 8009018:	9e03      	ldr	r6, [sp, #12]
 800901a:	e794      	b.n	8008f46 <_dtoa_r+0x40e>
 800901c:	9901      	ldr	r1, [sp, #4]
 800901e:	4b4c      	ldr	r3, [pc, #304]	; (8009150 <_dtoa_r+0x618>)
 8009020:	4431      	add	r1, r6
 8009022:	910d      	str	r1, [sp, #52]	; 0x34
 8009024:	9908      	ldr	r1, [sp, #32]
 8009026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800902a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800902e:	2900      	cmp	r1, #0
 8009030:	d043      	beq.n	80090ba <_dtoa_r+0x582>
 8009032:	494d      	ldr	r1, [pc, #308]	; (8009168 <_dtoa_r+0x630>)
 8009034:	2000      	movs	r0, #0
 8009036:	f7f7 fc29 	bl	800088c <__aeabi_ddiv>
 800903a:	4652      	mov	r2, sl
 800903c:	465b      	mov	r3, fp
 800903e:	f7f7 f943 	bl	80002c8 <__aeabi_dsub>
 8009042:	9d01      	ldr	r5, [sp, #4]
 8009044:	4682      	mov	sl, r0
 8009046:	468b      	mov	fp, r1
 8009048:	4649      	mov	r1, r9
 800904a:	4640      	mov	r0, r8
 800904c:	f7f7 fda4 	bl	8000b98 <__aeabi_d2iz>
 8009050:	4606      	mov	r6, r0
 8009052:	f7f7 fa87 	bl	8000564 <__aeabi_i2d>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 f933 	bl	80002c8 <__aeabi_dsub>
 8009062:	3630      	adds	r6, #48	; 0x30
 8009064:	f805 6b01 	strb.w	r6, [r5], #1
 8009068:	4652      	mov	r2, sl
 800906a:	465b      	mov	r3, fp
 800906c:	4680      	mov	r8, r0
 800906e:	4689      	mov	r9, r1
 8009070:	f7f7 fd54 	bl	8000b1c <__aeabi_dcmplt>
 8009074:	2800      	cmp	r0, #0
 8009076:	d163      	bne.n	8009140 <_dtoa_r+0x608>
 8009078:	4642      	mov	r2, r8
 800907a:	464b      	mov	r3, r9
 800907c:	4936      	ldr	r1, [pc, #216]	; (8009158 <_dtoa_r+0x620>)
 800907e:	2000      	movs	r0, #0
 8009080:	f7f7 f922 	bl	80002c8 <__aeabi_dsub>
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	f7f7 fd48 	bl	8000b1c <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	f040 80b5 	bne.w	80091fc <_dtoa_r+0x6c4>
 8009092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009094:	429d      	cmp	r5, r3
 8009096:	d081      	beq.n	8008f9c <_dtoa_r+0x464>
 8009098:	4b30      	ldr	r3, [pc, #192]	; (800915c <_dtoa_r+0x624>)
 800909a:	2200      	movs	r2, #0
 800909c:	4650      	mov	r0, sl
 800909e:	4659      	mov	r1, fp
 80090a0:	f7f7 faca 	bl	8000638 <__aeabi_dmul>
 80090a4:	4b2d      	ldr	r3, [pc, #180]	; (800915c <_dtoa_r+0x624>)
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	2200      	movs	r2, #0
 80090b0:	f7f7 fac2 	bl	8000638 <__aeabi_dmul>
 80090b4:	4680      	mov	r8, r0
 80090b6:	4689      	mov	r9, r1
 80090b8:	e7c6      	b.n	8009048 <_dtoa_r+0x510>
 80090ba:	4650      	mov	r0, sl
 80090bc:	4659      	mov	r1, fp
 80090be:	f7f7 fabb 	bl	8000638 <__aeabi_dmul>
 80090c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c4:	9d01      	ldr	r5, [sp, #4]
 80090c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090c8:	4682      	mov	sl, r0
 80090ca:	468b      	mov	fp, r1
 80090cc:	4649      	mov	r1, r9
 80090ce:	4640      	mov	r0, r8
 80090d0:	f7f7 fd62 	bl	8000b98 <__aeabi_d2iz>
 80090d4:	4606      	mov	r6, r0
 80090d6:	f7f7 fa45 	bl	8000564 <__aeabi_i2d>
 80090da:	3630      	adds	r6, #48	; 0x30
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4640      	mov	r0, r8
 80090e2:	4649      	mov	r1, r9
 80090e4:	f7f7 f8f0 	bl	80002c8 <__aeabi_dsub>
 80090e8:	f805 6b01 	strb.w	r6, [r5], #1
 80090ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ee:	429d      	cmp	r5, r3
 80090f0:	4680      	mov	r8, r0
 80090f2:	4689      	mov	r9, r1
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	d124      	bne.n	8009144 <_dtoa_r+0x60c>
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <_dtoa_r+0x630>)
 80090fc:	4650      	mov	r0, sl
 80090fe:	4659      	mov	r1, fp
 8009100:	f7f7 f8e4 	bl	80002cc <__adddf3>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 fd24 	bl	8000b58 <__aeabi_dcmpgt>
 8009110:	2800      	cmp	r0, #0
 8009112:	d173      	bne.n	80091fc <_dtoa_r+0x6c4>
 8009114:	4652      	mov	r2, sl
 8009116:	465b      	mov	r3, fp
 8009118:	4913      	ldr	r1, [pc, #76]	; (8009168 <_dtoa_r+0x630>)
 800911a:	2000      	movs	r0, #0
 800911c:	f7f7 f8d4 	bl	80002c8 <__aeabi_dsub>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800912c:	2800      	cmp	r0, #0
 800912e:	f43f af35 	beq.w	8008f9c <_dtoa_r+0x464>
 8009132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009134:	1e6b      	subs	r3, r5, #1
 8009136:	930f      	str	r3, [sp, #60]	; 0x3c
 8009138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800913c:	2b30      	cmp	r3, #48	; 0x30
 800913e:	d0f8      	beq.n	8009132 <_dtoa_r+0x5fa>
 8009140:	9700      	str	r7, [sp, #0]
 8009142:	e049      	b.n	80091d8 <_dtoa_r+0x6a0>
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <_dtoa_r+0x624>)
 8009146:	f7f7 fa77 	bl	8000638 <__aeabi_dmul>
 800914a:	4680      	mov	r8, r0
 800914c:	4689      	mov	r9, r1
 800914e:	e7bd      	b.n	80090cc <_dtoa_r+0x594>
 8009150:	0800bb30 	.word	0x0800bb30
 8009154:	0800bb08 	.word	0x0800bb08
 8009158:	3ff00000 	.word	0x3ff00000
 800915c:	40240000 	.word	0x40240000
 8009160:	401c0000 	.word	0x401c0000
 8009164:	40140000 	.word	0x40140000
 8009168:	3fe00000 	.word	0x3fe00000
 800916c:	9d01      	ldr	r5, [sp, #4]
 800916e:	4656      	mov	r6, sl
 8009170:	465f      	mov	r7, fp
 8009172:	4642      	mov	r2, r8
 8009174:	464b      	mov	r3, r9
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fb87 	bl	800088c <__aeabi_ddiv>
 800917e:	f7f7 fd0b 	bl	8000b98 <__aeabi_d2iz>
 8009182:	4682      	mov	sl, r0
 8009184:	f7f7 f9ee 	bl	8000564 <__aeabi_i2d>
 8009188:	4642      	mov	r2, r8
 800918a:	464b      	mov	r3, r9
 800918c:	f7f7 fa54 	bl	8000638 <__aeabi_dmul>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800919c:	f7f7 f894 	bl	80002c8 <__aeabi_dsub>
 80091a0:	f805 6b01 	strb.w	r6, [r5], #1
 80091a4:	9e01      	ldr	r6, [sp, #4]
 80091a6:	9f03      	ldr	r7, [sp, #12]
 80091a8:	1bae      	subs	r6, r5, r6
 80091aa:	42b7      	cmp	r7, r6
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	d135      	bne.n	800921e <_dtoa_r+0x6e6>
 80091b2:	f7f7 f88b 	bl	80002cc <__adddf3>
 80091b6:	4642      	mov	r2, r8
 80091b8:	464b      	mov	r3, r9
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	f7f7 fccb 	bl	8000b58 <__aeabi_dcmpgt>
 80091c2:	b9d0      	cbnz	r0, 80091fa <_dtoa_r+0x6c2>
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	4630      	mov	r0, r6
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f7 fc9c 	bl	8000b08 <__aeabi_dcmpeq>
 80091d0:	b110      	cbz	r0, 80091d8 <_dtoa_r+0x6a0>
 80091d2:	f01a 0f01 	tst.w	sl, #1
 80091d6:	d110      	bne.n	80091fa <_dtoa_r+0x6c2>
 80091d8:	4620      	mov	r0, r4
 80091da:	ee18 1a10 	vmov	r1, s16
 80091de:	f000 fe87 	bl	8009ef0 <_Bfree>
 80091e2:	2300      	movs	r3, #0
 80091e4:	9800      	ldr	r0, [sp, #0]
 80091e6:	702b      	strb	r3, [r5, #0]
 80091e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ea:	3001      	adds	r0, #1
 80091ec:	6018      	str	r0, [r3, #0]
 80091ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f43f acf1 	beq.w	8008bd8 <_dtoa_r+0xa0>
 80091f6:	601d      	str	r5, [r3, #0]
 80091f8:	e4ee      	b.n	8008bd8 <_dtoa_r+0xa0>
 80091fa:	9f00      	ldr	r7, [sp, #0]
 80091fc:	462b      	mov	r3, r5
 80091fe:	461d      	mov	r5, r3
 8009200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009204:	2a39      	cmp	r2, #57	; 0x39
 8009206:	d106      	bne.n	8009216 <_dtoa_r+0x6de>
 8009208:	9a01      	ldr	r2, [sp, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	d1f7      	bne.n	80091fe <_dtoa_r+0x6c6>
 800920e:	9901      	ldr	r1, [sp, #4]
 8009210:	2230      	movs	r2, #48	; 0x30
 8009212:	3701      	adds	r7, #1
 8009214:	700a      	strb	r2, [r1, #0]
 8009216:	781a      	ldrb	r2, [r3, #0]
 8009218:	3201      	adds	r2, #1
 800921a:	701a      	strb	r2, [r3, #0]
 800921c:	e790      	b.n	8009140 <_dtoa_r+0x608>
 800921e:	4ba6      	ldr	r3, [pc, #664]	; (80094b8 <_dtoa_r+0x980>)
 8009220:	2200      	movs	r2, #0
 8009222:	f7f7 fa09 	bl	8000638 <__aeabi_dmul>
 8009226:	2200      	movs	r2, #0
 8009228:	2300      	movs	r3, #0
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	f7f7 fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 8009232:	2800      	cmp	r0, #0
 8009234:	d09d      	beq.n	8009172 <_dtoa_r+0x63a>
 8009236:	e7cf      	b.n	80091d8 <_dtoa_r+0x6a0>
 8009238:	9a08      	ldr	r2, [sp, #32]
 800923a:	2a00      	cmp	r2, #0
 800923c:	f000 80d7 	beq.w	80093ee <_dtoa_r+0x8b6>
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	2a01      	cmp	r2, #1
 8009244:	f300 80ba 	bgt.w	80093bc <_dtoa_r+0x884>
 8009248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800924a:	2a00      	cmp	r2, #0
 800924c:	f000 80b2 	beq.w	80093b4 <_dtoa_r+0x87c>
 8009250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009254:	9e07      	ldr	r6, [sp, #28]
 8009256:	9d04      	ldr	r5, [sp, #16]
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	441a      	add	r2, r3
 800925c:	9204      	str	r2, [sp, #16]
 800925e:	9a05      	ldr	r2, [sp, #20]
 8009260:	2101      	movs	r1, #1
 8009262:	441a      	add	r2, r3
 8009264:	4620      	mov	r0, r4
 8009266:	9205      	str	r2, [sp, #20]
 8009268:	f000 ff44 	bl	800a0f4 <__i2b>
 800926c:	4607      	mov	r7, r0
 800926e:	2d00      	cmp	r5, #0
 8009270:	dd0c      	ble.n	800928c <_dtoa_r+0x754>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd09      	ble.n	800928c <_dtoa_r+0x754>
 8009278:	42ab      	cmp	r3, r5
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	bfa8      	it	ge
 800927e:	462b      	movge	r3, r5
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	9204      	str	r2, [sp, #16]
 8009284:	9a05      	ldr	r2, [sp, #20]
 8009286:	1aed      	subs	r5, r5, r3
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	b31b      	cbz	r3, 80092d8 <_dtoa_r+0x7a0>
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80af 	beq.w	80093f6 <_dtoa_r+0x8be>
 8009298:	2e00      	cmp	r6, #0
 800929a:	dd13      	ble.n	80092c4 <_dtoa_r+0x78c>
 800929c:	4639      	mov	r1, r7
 800929e:	4632      	mov	r2, r6
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 ffe7 	bl	800a274 <__pow5mult>
 80092a6:	ee18 2a10 	vmov	r2, s16
 80092aa:	4601      	mov	r1, r0
 80092ac:	4607      	mov	r7, r0
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 ff36 	bl	800a120 <__multiply>
 80092b4:	ee18 1a10 	vmov	r1, s16
 80092b8:	4680      	mov	r8, r0
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fe18 	bl	8009ef0 <_Bfree>
 80092c0:	ee08 8a10 	vmov	s16, r8
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	1b9a      	subs	r2, r3, r6
 80092c8:	d006      	beq.n	80092d8 <_dtoa_r+0x7a0>
 80092ca:	ee18 1a10 	vmov	r1, s16
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 ffd0 	bl	800a274 <__pow5mult>
 80092d4:	ee08 0a10 	vmov	s16, r0
 80092d8:	2101      	movs	r1, #1
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 ff0a 	bl	800a0f4 <__i2b>
 80092e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	4606      	mov	r6, r0
 80092e6:	f340 8088 	ble.w	80093fa <_dtoa_r+0x8c2>
 80092ea:	461a      	mov	r2, r3
 80092ec:	4601      	mov	r1, r0
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 ffc0 	bl	800a274 <__pow5mult>
 80092f4:	9b06      	ldr	r3, [sp, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	4606      	mov	r6, r0
 80092fa:	f340 8081 	ble.w	8009400 <_dtoa_r+0x8c8>
 80092fe:	f04f 0800 	mov.w	r8, #0
 8009302:	6933      	ldr	r3, [r6, #16]
 8009304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009308:	6918      	ldr	r0, [r3, #16]
 800930a:	f000 fea3 	bl	800a054 <__hi0bits>
 800930e:	f1c0 0020 	rsb	r0, r0, #32
 8009312:	9b05      	ldr	r3, [sp, #20]
 8009314:	4418      	add	r0, r3
 8009316:	f010 001f 	ands.w	r0, r0, #31
 800931a:	f000 8092 	beq.w	8009442 <_dtoa_r+0x90a>
 800931e:	f1c0 0320 	rsb	r3, r0, #32
 8009322:	2b04      	cmp	r3, #4
 8009324:	f340 808a 	ble.w	800943c <_dtoa_r+0x904>
 8009328:	f1c0 001c 	rsb	r0, r0, #28
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	4403      	add	r3, r0
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	9b05      	ldr	r3, [sp, #20]
 8009334:	4403      	add	r3, r0
 8009336:	4405      	add	r5, r0
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd07      	ble.n	8009350 <_dtoa_r+0x818>
 8009340:	ee18 1a10 	vmov	r1, s16
 8009344:	461a      	mov	r2, r3
 8009346:	4620      	mov	r0, r4
 8009348:	f000 ffee 	bl	800a328 <__lshift>
 800934c:	ee08 0a10 	vmov	s16, r0
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd05      	ble.n	8009362 <_dtoa_r+0x82a>
 8009356:	4631      	mov	r1, r6
 8009358:	461a      	mov	r2, r3
 800935a:	4620      	mov	r0, r4
 800935c:	f000 ffe4 	bl	800a328 <__lshift>
 8009360:	4606      	mov	r6, r0
 8009362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d06e      	beq.n	8009446 <_dtoa_r+0x90e>
 8009368:	ee18 0a10 	vmov	r0, s16
 800936c:	4631      	mov	r1, r6
 800936e:	f001 f84b 	bl	800a408 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	da67      	bge.n	8009446 <_dtoa_r+0x90e>
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	ee18 1a10 	vmov	r1, s16
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	220a      	movs	r2, #10
 8009382:	2300      	movs	r3, #0
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fdd5 	bl	8009f34 <__multadd>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	ee08 0a10 	vmov	s16, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 81b1 	beq.w	80096f8 <_dtoa_r+0xbc0>
 8009396:	2300      	movs	r3, #0
 8009398:	4639      	mov	r1, r7
 800939a:	220a      	movs	r2, #10
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fdc9 	bl	8009f34 <__multadd>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	4607      	mov	r7, r0
 80093a8:	f300 808e 	bgt.w	80094c8 <_dtoa_r+0x990>
 80093ac:	9b06      	ldr	r3, [sp, #24]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	dc51      	bgt.n	8009456 <_dtoa_r+0x91e>
 80093b2:	e089      	b.n	80094c8 <_dtoa_r+0x990>
 80093b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ba:	e74b      	b.n	8009254 <_dtoa_r+0x71c>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	1e5e      	subs	r6, r3, #1
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	42b3      	cmp	r3, r6
 80093c4:	bfbf      	itttt	lt
 80093c6:	9b07      	ldrlt	r3, [sp, #28]
 80093c8:	9607      	strlt	r6, [sp, #28]
 80093ca:	1af2      	sublt	r2, r6, r3
 80093cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093ce:	bfb6      	itet	lt
 80093d0:	189b      	addlt	r3, r3, r2
 80093d2:	1b9e      	subge	r6, r3, r6
 80093d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	bfb8      	it	lt
 80093da:	2600      	movlt	r6, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bfb7      	itett	lt
 80093e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093e8:	1a9d      	sublt	r5, r3, r2
 80093ea:	2300      	movlt	r3, #0
 80093ec:	e734      	b.n	8009258 <_dtoa_r+0x720>
 80093ee:	9e07      	ldr	r6, [sp, #28]
 80093f0:	9d04      	ldr	r5, [sp, #16]
 80093f2:	9f08      	ldr	r7, [sp, #32]
 80093f4:	e73b      	b.n	800926e <_dtoa_r+0x736>
 80093f6:	9a07      	ldr	r2, [sp, #28]
 80093f8:	e767      	b.n	80092ca <_dtoa_r+0x792>
 80093fa:	9b06      	ldr	r3, [sp, #24]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	dc18      	bgt.n	8009432 <_dtoa_r+0x8fa>
 8009400:	f1ba 0f00 	cmp.w	sl, #0
 8009404:	d115      	bne.n	8009432 <_dtoa_r+0x8fa>
 8009406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800940a:	b993      	cbnz	r3, 8009432 <_dtoa_r+0x8fa>
 800940c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009410:	0d1b      	lsrs	r3, r3, #20
 8009412:	051b      	lsls	r3, r3, #20
 8009414:	b183      	cbz	r3, 8009438 <_dtoa_r+0x900>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	9b05      	ldr	r3, [sp, #20]
 800941e:	3301      	adds	r3, #1
 8009420:	9305      	str	r3, [sp, #20]
 8009422:	f04f 0801 	mov.w	r8, #1
 8009426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	f47f af6a 	bne.w	8009302 <_dtoa_r+0x7ca>
 800942e:	2001      	movs	r0, #1
 8009430:	e76f      	b.n	8009312 <_dtoa_r+0x7da>
 8009432:	f04f 0800 	mov.w	r8, #0
 8009436:	e7f6      	b.n	8009426 <_dtoa_r+0x8ee>
 8009438:	4698      	mov	r8, r3
 800943a:	e7f4      	b.n	8009426 <_dtoa_r+0x8ee>
 800943c:	f43f af7d 	beq.w	800933a <_dtoa_r+0x802>
 8009440:	4618      	mov	r0, r3
 8009442:	301c      	adds	r0, #28
 8009444:	e772      	b.n	800932c <_dtoa_r+0x7f4>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	dc37      	bgt.n	80094bc <_dtoa_r+0x984>
 800944c:	9b06      	ldr	r3, [sp, #24]
 800944e:	2b02      	cmp	r3, #2
 8009450:	dd34      	ble.n	80094bc <_dtoa_r+0x984>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	9302      	str	r3, [sp, #8]
 8009456:	9b02      	ldr	r3, [sp, #8]
 8009458:	b96b      	cbnz	r3, 8009476 <_dtoa_r+0x93e>
 800945a:	4631      	mov	r1, r6
 800945c:	2205      	movs	r2, #5
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fd68 	bl	8009f34 <__multadd>
 8009464:	4601      	mov	r1, r0
 8009466:	4606      	mov	r6, r0
 8009468:	ee18 0a10 	vmov	r0, s16
 800946c:	f000 ffcc 	bl	800a408 <__mcmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	f73f adbb 	bgt.w	8008fec <_dtoa_r+0x4b4>
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	9d01      	ldr	r5, [sp, #4]
 800947a:	43db      	mvns	r3, r3
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	4631      	mov	r1, r6
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fd33 	bl	8009ef0 <_Bfree>
 800948a:	2f00      	cmp	r7, #0
 800948c:	f43f aea4 	beq.w	80091d8 <_dtoa_r+0x6a0>
 8009490:	f1b8 0f00 	cmp.w	r8, #0
 8009494:	d005      	beq.n	80094a2 <_dtoa_r+0x96a>
 8009496:	45b8      	cmp	r8, r7
 8009498:	d003      	beq.n	80094a2 <_dtoa_r+0x96a>
 800949a:	4641      	mov	r1, r8
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fd27 	bl	8009ef0 <_Bfree>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 fd23 	bl	8009ef0 <_Bfree>
 80094aa:	e695      	b.n	80091d8 <_dtoa_r+0x6a0>
 80094ac:	2600      	movs	r6, #0
 80094ae:	4637      	mov	r7, r6
 80094b0:	e7e1      	b.n	8009476 <_dtoa_r+0x93e>
 80094b2:	9700      	str	r7, [sp, #0]
 80094b4:	4637      	mov	r7, r6
 80094b6:	e599      	b.n	8008fec <_dtoa_r+0x4b4>
 80094b8:	40240000 	.word	0x40240000
 80094bc:	9b08      	ldr	r3, [sp, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 80ca 	beq.w	8009658 <_dtoa_r+0xb20>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	dd05      	ble.n	80094d8 <_dtoa_r+0x9a0>
 80094cc:	4639      	mov	r1, r7
 80094ce:	462a      	mov	r2, r5
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 ff29 	bl	800a328 <__lshift>
 80094d6:	4607      	mov	r7, r0
 80094d8:	f1b8 0f00 	cmp.w	r8, #0
 80094dc:	d05b      	beq.n	8009596 <_dtoa_r+0xa5e>
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fcc5 	bl	8009e70 <_Balloc>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b928      	cbnz	r0, 80094f6 <_dtoa_r+0x9be>
 80094ea:	4b87      	ldr	r3, [pc, #540]	; (8009708 <_dtoa_r+0xbd0>)
 80094ec:	4602      	mov	r2, r0
 80094ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094f2:	f7ff bb3b 	b.w	8008b6c <_dtoa_r+0x34>
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	3202      	adds	r2, #2
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	f107 010c 	add.w	r1, r7, #12
 8009500:	300c      	adds	r0, #12
 8009502:	f000 fca7 	bl	8009e54 <memcpy>
 8009506:	2201      	movs	r2, #1
 8009508:	4629      	mov	r1, r5
 800950a:	4620      	mov	r0, r4
 800950c:	f000 ff0c 	bl	800a328 <__lshift>
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	f103 0901 	add.w	r9, r3, #1
 8009516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800951a:	4413      	add	r3, r2
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	f00a 0301 	and.w	r3, sl, #1
 8009522:	46b8      	mov	r8, r7
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	4607      	mov	r7, r0
 8009528:	4631      	mov	r1, r6
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f7ff fa75 	bl	8008a1c <quorem>
 8009532:	4641      	mov	r1, r8
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800953a:	ee18 0a10 	vmov	r0, s16
 800953e:	f000 ff63 	bl	800a408 <__mcmp>
 8009542:	463a      	mov	r2, r7
 8009544:	9003      	str	r0, [sp, #12]
 8009546:	4631      	mov	r1, r6
 8009548:	4620      	mov	r0, r4
 800954a:	f000 ff79 	bl	800a440 <__mdiff>
 800954e:	68c2      	ldr	r2, [r0, #12]
 8009550:	f109 3bff 	add.w	fp, r9, #4294967295
 8009554:	4605      	mov	r5, r0
 8009556:	bb02      	cbnz	r2, 800959a <_dtoa_r+0xa62>
 8009558:	4601      	mov	r1, r0
 800955a:	ee18 0a10 	vmov	r0, s16
 800955e:	f000 ff53 	bl	800a408 <__mcmp>
 8009562:	4602      	mov	r2, r0
 8009564:	4629      	mov	r1, r5
 8009566:	4620      	mov	r0, r4
 8009568:	9207      	str	r2, [sp, #28]
 800956a:	f000 fcc1 	bl	8009ef0 <_Bfree>
 800956e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009572:	ea43 0102 	orr.w	r1, r3, r2
 8009576:	9b04      	ldr	r3, [sp, #16]
 8009578:	430b      	orrs	r3, r1
 800957a:	464d      	mov	r5, r9
 800957c:	d10f      	bne.n	800959e <_dtoa_r+0xa66>
 800957e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009582:	d02a      	beq.n	80095da <_dtoa_r+0xaa2>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd02      	ble.n	8009590 <_dtoa_r+0xa58>
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009590:	f88b a000 	strb.w	sl, [fp]
 8009594:	e775      	b.n	8009482 <_dtoa_r+0x94a>
 8009596:	4638      	mov	r0, r7
 8009598:	e7ba      	b.n	8009510 <_dtoa_r+0x9d8>
 800959a:	2201      	movs	r2, #1
 800959c:	e7e2      	b.n	8009564 <_dtoa_r+0xa2c>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	db04      	blt.n	80095ae <_dtoa_r+0xa76>
 80095a4:	9906      	ldr	r1, [sp, #24]
 80095a6:	430b      	orrs	r3, r1
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	430b      	orrs	r3, r1
 80095ac:	d122      	bne.n	80095f4 <_dtoa_r+0xabc>
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	ddee      	ble.n	8009590 <_dtoa_r+0xa58>
 80095b2:	ee18 1a10 	vmov	r1, s16
 80095b6:	2201      	movs	r2, #1
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 feb5 	bl	800a328 <__lshift>
 80095be:	4631      	mov	r1, r6
 80095c0:	ee08 0a10 	vmov	s16, r0
 80095c4:	f000 ff20 	bl	800a408 <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	dc03      	bgt.n	80095d4 <_dtoa_r+0xa9c>
 80095cc:	d1e0      	bne.n	8009590 <_dtoa_r+0xa58>
 80095ce:	f01a 0f01 	tst.w	sl, #1
 80095d2:	d0dd      	beq.n	8009590 <_dtoa_r+0xa58>
 80095d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095d8:	d1d7      	bne.n	800958a <_dtoa_r+0xa52>
 80095da:	2339      	movs	r3, #57	; 0x39
 80095dc:	f88b 3000 	strb.w	r3, [fp]
 80095e0:	462b      	mov	r3, r5
 80095e2:	461d      	mov	r5, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ea:	2a39      	cmp	r2, #57	; 0x39
 80095ec:	d071      	beq.n	80096d2 <_dtoa_r+0xb9a>
 80095ee:	3201      	adds	r2, #1
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e746      	b.n	8009482 <_dtoa_r+0x94a>
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	dd07      	ble.n	8009608 <_dtoa_r+0xad0>
 80095f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095fc:	d0ed      	beq.n	80095da <_dtoa_r+0xaa2>
 80095fe:	f10a 0301 	add.w	r3, sl, #1
 8009602:	f88b 3000 	strb.w	r3, [fp]
 8009606:	e73c      	b.n	8009482 <_dtoa_r+0x94a>
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800960e:	4599      	cmp	r9, r3
 8009610:	d047      	beq.n	80096a2 <_dtoa_r+0xb6a>
 8009612:	ee18 1a10 	vmov	r1, s16
 8009616:	2300      	movs	r3, #0
 8009618:	220a      	movs	r2, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fc8a 	bl	8009f34 <__multadd>
 8009620:	45b8      	cmp	r8, r7
 8009622:	ee08 0a10 	vmov	s16, r0
 8009626:	f04f 0300 	mov.w	r3, #0
 800962a:	f04f 020a 	mov.w	r2, #10
 800962e:	4641      	mov	r1, r8
 8009630:	4620      	mov	r0, r4
 8009632:	d106      	bne.n	8009642 <_dtoa_r+0xb0a>
 8009634:	f000 fc7e 	bl	8009f34 <__multadd>
 8009638:	4680      	mov	r8, r0
 800963a:	4607      	mov	r7, r0
 800963c:	f109 0901 	add.w	r9, r9, #1
 8009640:	e772      	b.n	8009528 <_dtoa_r+0x9f0>
 8009642:	f000 fc77 	bl	8009f34 <__multadd>
 8009646:	4639      	mov	r1, r7
 8009648:	4680      	mov	r8, r0
 800964a:	2300      	movs	r3, #0
 800964c:	220a      	movs	r2, #10
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fc70 	bl	8009f34 <__multadd>
 8009654:	4607      	mov	r7, r0
 8009656:	e7f1      	b.n	800963c <_dtoa_r+0xb04>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	9302      	str	r3, [sp, #8]
 800965c:	9d01      	ldr	r5, [sp, #4]
 800965e:	ee18 0a10 	vmov	r0, s16
 8009662:	4631      	mov	r1, r6
 8009664:	f7ff f9da 	bl	8008a1c <quorem>
 8009668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	f805 ab01 	strb.w	sl, [r5], #1
 8009672:	1aea      	subs	r2, r5, r3
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	4293      	cmp	r3, r2
 8009678:	dd09      	ble.n	800968e <_dtoa_r+0xb56>
 800967a:	ee18 1a10 	vmov	r1, s16
 800967e:	2300      	movs	r3, #0
 8009680:	220a      	movs	r2, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fc56 	bl	8009f34 <__multadd>
 8009688:	ee08 0a10 	vmov	s16, r0
 800968c:	e7e7      	b.n	800965e <_dtoa_r+0xb26>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfc8      	it	gt
 8009694:	461d      	movgt	r5, r3
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	bfd8      	it	le
 800969a:	2501      	movle	r5, #1
 800969c:	441d      	add	r5, r3
 800969e:	f04f 0800 	mov.w	r8, #0
 80096a2:	ee18 1a10 	vmov	r1, s16
 80096a6:	2201      	movs	r2, #1
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fe3d 	bl	800a328 <__lshift>
 80096ae:	4631      	mov	r1, r6
 80096b0:	ee08 0a10 	vmov	s16, r0
 80096b4:	f000 fea8 	bl	800a408 <__mcmp>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dc91      	bgt.n	80095e0 <_dtoa_r+0xaa8>
 80096bc:	d102      	bne.n	80096c4 <_dtoa_r+0xb8c>
 80096be:	f01a 0f01 	tst.w	sl, #1
 80096c2:	d18d      	bne.n	80095e0 <_dtoa_r+0xaa8>
 80096c4:	462b      	mov	r3, r5
 80096c6:	461d      	mov	r5, r3
 80096c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096cc:	2a30      	cmp	r2, #48	; 0x30
 80096ce:	d0fa      	beq.n	80096c6 <_dtoa_r+0xb8e>
 80096d0:	e6d7      	b.n	8009482 <_dtoa_r+0x94a>
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d184      	bne.n	80095e2 <_dtoa_r+0xaaa>
 80096d8:	9b00      	ldr	r3, [sp, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	2331      	movs	r3, #49	; 0x31
 80096e0:	7013      	strb	r3, [r2, #0]
 80096e2:	e6ce      	b.n	8009482 <_dtoa_r+0x94a>
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <_dtoa_r+0xbd4>)
 80096e6:	f7ff ba95 	b.w	8008c14 <_dtoa_r+0xdc>
 80096ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f47f aa6e 	bne.w	8008bce <_dtoa_r+0x96>
 80096f2:	4b07      	ldr	r3, [pc, #28]	; (8009710 <_dtoa_r+0xbd8>)
 80096f4:	f7ff ba8e 	b.w	8008c14 <_dtoa_r+0xdc>
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dcae      	bgt.n	800965c <_dtoa_r+0xb24>
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	2b02      	cmp	r3, #2
 8009702:	f73f aea8 	bgt.w	8009456 <_dtoa_r+0x91e>
 8009706:	e7a9      	b.n	800965c <_dtoa_r+0xb24>
 8009708:	0800ba20 	.word	0x0800ba20
 800970c:	0800b820 	.word	0x0800b820
 8009710:	0800b9a1 	.word	0x0800b9a1

08009714 <rshift>:
 8009714:	6903      	ldr	r3, [r0, #16]
 8009716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800971a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800971e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009722:	f100 0414 	add.w	r4, r0, #20
 8009726:	dd45      	ble.n	80097b4 <rshift+0xa0>
 8009728:	f011 011f 	ands.w	r1, r1, #31
 800972c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009734:	d10c      	bne.n	8009750 <rshift+0x3c>
 8009736:	f100 0710 	add.w	r7, r0, #16
 800973a:	4629      	mov	r1, r5
 800973c:	42b1      	cmp	r1, r6
 800973e:	d334      	bcc.n	80097aa <rshift+0x96>
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	1eea      	subs	r2, r5, #3
 8009746:	4296      	cmp	r6, r2
 8009748:	bf38      	it	cc
 800974a:	2300      	movcc	r3, #0
 800974c:	4423      	add	r3, r4
 800974e:	e015      	b.n	800977c <rshift+0x68>
 8009750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009754:	f1c1 0820 	rsb	r8, r1, #32
 8009758:	40cf      	lsrs	r7, r1
 800975a:	f105 0e04 	add.w	lr, r5, #4
 800975e:	46a1      	mov	r9, r4
 8009760:	4576      	cmp	r6, lr
 8009762:	46f4      	mov	ip, lr
 8009764:	d815      	bhi.n	8009792 <rshift+0x7e>
 8009766:	1a9a      	subs	r2, r3, r2
 8009768:	0092      	lsls	r2, r2, #2
 800976a:	3a04      	subs	r2, #4
 800976c:	3501      	adds	r5, #1
 800976e:	42ae      	cmp	r6, r5
 8009770:	bf38      	it	cc
 8009772:	2200      	movcc	r2, #0
 8009774:	18a3      	adds	r3, r4, r2
 8009776:	50a7      	str	r7, [r4, r2]
 8009778:	b107      	cbz	r7, 800977c <rshift+0x68>
 800977a:	3304      	adds	r3, #4
 800977c:	1b1a      	subs	r2, r3, r4
 800977e:	42a3      	cmp	r3, r4
 8009780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009784:	bf08      	it	eq
 8009786:	2300      	moveq	r3, #0
 8009788:	6102      	str	r2, [r0, #16]
 800978a:	bf08      	it	eq
 800978c:	6143      	streq	r3, [r0, #20]
 800978e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009792:	f8dc c000 	ldr.w	ip, [ip]
 8009796:	fa0c fc08 	lsl.w	ip, ip, r8
 800979a:	ea4c 0707 	orr.w	r7, ip, r7
 800979e:	f849 7b04 	str.w	r7, [r9], #4
 80097a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097a6:	40cf      	lsrs	r7, r1
 80097a8:	e7da      	b.n	8009760 <rshift+0x4c>
 80097aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80097ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80097b2:	e7c3      	b.n	800973c <rshift+0x28>
 80097b4:	4623      	mov	r3, r4
 80097b6:	e7e1      	b.n	800977c <rshift+0x68>

080097b8 <__hexdig_fun>:
 80097b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d802      	bhi.n	80097c6 <__hexdig_fun+0xe>
 80097c0:	3820      	subs	r0, #32
 80097c2:	b2c0      	uxtb	r0, r0
 80097c4:	4770      	bx	lr
 80097c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d801      	bhi.n	80097d2 <__hexdig_fun+0x1a>
 80097ce:	3847      	subs	r0, #71	; 0x47
 80097d0:	e7f7      	b.n	80097c2 <__hexdig_fun+0xa>
 80097d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	d801      	bhi.n	80097de <__hexdig_fun+0x26>
 80097da:	3827      	subs	r0, #39	; 0x27
 80097dc:	e7f1      	b.n	80097c2 <__hexdig_fun+0xa>
 80097de:	2000      	movs	r0, #0
 80097e0:	4770      	bx	lr
	...

080097e4 <__gethex>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	ed2d 8b02 	vpush	{d8}
 80097ec:	b089      	sub	sp, #36	; 0x24
 80097ee:	ee08 0a10 	vmov	s16, r0
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	4bb4      	ldr	r3, [pc, #720]	; (8009ac8 <__gethex+0x2e4>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	4618      	mov	r0, r3
 80097fc:	468b      	mov	fp, r1
 80097fe:	4690      	mov	r8, r2
 8009800:	f7f6 fd06 	bl	8000210 <strlen>
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	f8db 2000 	ldr.w	r2, [fp]
 800980a:	4403      	add	r3, r0
 800980c:	4682      	mov	sl, r0
 800980e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	1c93      	adds	r3, r2, #2
 8009816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800981a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800981e:	32fe      	adds	r2, #254	; 0xfe
 8009820:	18d1      	adds	r1, r2, r3
 8009822:	461f      	mov	r7, r3
 8009824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009828:	9100      	str	r1, [sp, #0]
 800982a:	2830      	cmp	r0, #48	; 0x30
 800982c:	d0f8      	beq.n	8009820 <__gethex+0x3c>
 800982e:	f7ff ffc3 	bl	80097b8 <__hexdig_fun>
 8009832:	4604      	mov	r4, r0
 8009834:	2800      	cmp	r0, #0
 8009836:	d13a      	bne.n	80098ae <__gethex+0xca>
 8009838:	9901      	ldr	r1, [sp, #4]
 800983a:	4652      	mov	r2, sl
 800983c:	4638      	mov	r0, r7
 800983e:	f7fe fa0a 	bl	8007c56 <strncmp>
 8009842:	4605      	mov	r5, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	d168      	bne.n	800991a <__gethex+0x136>
 8009848:	f817 000a 	ldrb.w	r0, [r7, sl]
 800984c:	eb07 060a 	add.w	r6, r7, sl
 8009850:	f7ff ffb2 	bl	80097b8 <__hexdig_fun>
 8009854:	2800      	cmp	r0, #0
 8009856:	d062      	beq.n	800991e <__gethex+0x13a>
 8009858:	4633      	mov	r3, r6
 800985a:	7818      	ldrb	r0, [r3, #0]
 800985c:	2830      	cmp	r0, #48	; 0x30
 800985e:	461f      	mov	r7, r3
 8009860:	f103 0301 	add.w	r3, r3, #1
 8009864:	d0f9      	beq.n	800985a <__gethex+0x76>
 8009866:	f7ff ffa7 	bl	80097b8 <__hexdig_fun>
 800986a:	2301      	movs	r3, #1
 800986c:	fab0 f480 	clz	r4, r0
 8009870:	0964      	lsrs	r4, r4, #5
 8009872:	4635      	mov	r5, r6
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	463a      	mov	r2, r7
 8009878:	4616      	mov	r6, r2
 800987a:	3201      	adds	r2, #1
 800987c:	7830      	ldrb	r0, [r6, #0]
 800987e:	f7ff ff9b 	bl	80097b8 <__hexdig_fun>
 8009882:	2800      	cmp	r0, #0
 8009884:	d1f8      	bne.n	8009878 <__gethex+0x94>
 8009886:	9901      	ldr	r1, [sp, #4]
 8009888:	4652      	mov	r2, sl
 800988a:	4630      	mov	r0, r6
 800988c:	f7fe f9e3 	bl	8007c56 <strncmp>
 8009890:	b980      	cbnz	r0, 80098b4 <__gethex+0xd0>
 8009892:	b94d      	cbnz	r5, 80098a8 <__gethex+0xc4>
 8009894:	eb06 050a 	add.w	r5, r6, sl
 8009898:	462a      	mov	r2, r5
 800989a:	4616      	mov	r6, r2
 800989c:	3201      	adds	r2, #1
 800989e:	7830      	ldrb	r0, [r6, #0]
 80098a0:	f7ff ff8a 	bl	80097b8 <__hexdig_fun>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1f8      	bne.n	800989a <__gethex+0xb6>
 80098a8:	1bad      	subs	r5, r5, r6
 80098aa:	00ad      	lsls	r5, r5, #2
 80098ac:	e004      	b.n	80098b8 <__gethex+0xd4>
 80098ae:	2400      	movs	r4, #0
 80098b0:	4625      	mov	r5, r4
 80098b2:	e7e0      	b.n	8009876 <__gethex+0x92>
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	d1f7      	bne.n	80098a8 <__gethex+0xc4>
 80098b8:	7833      	ldrb	r3, [r6, #0]
 80098ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098be:	2b50      	cmp	r3, #80	; 0x50
 80098c0:	d13b      	bne.n	800993a <__gethex+0x156>
 80098c2:	7873      	ldrb	r3, [r6, #1]
 80098c4:	2b2b      	cmp	r3, #43	; 0x2b
 80098c6:	d02c      	beq.n	8009922 <__gethex+0x13e>
 80098c8:	2b2d      	cmp	r3, #45	; 0x2d
 80098ca:	d02e      	beq.n	800992a <__gethex+0x146>
 80098cc:	1c71      	adds	r1, r6, #1
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	7808      	ldrb	r0, [r1, #0]
 80098d4:	f7ff ff70 	bl	80097b8 <__hexdig_fun>
 80098d8:	1e43      	subs	r3, r0, #1
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b18      	cmp	r3, #24
 80098de:	d82c      	bhi.n	800993a <__gethex+0x156>
 80098e0:	f1a0 0210 	sub.w	r2, r0, #16
 80098e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098e8:	f7ff ff66 	bl	80097b8 <__hexdig_fun>
 80098ec:	1e43      	subs	r3, r0, #1
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b18      	cmp	r3, #24
 80098f2:	d91d      	bls.n	8009930 <__gethex+0x14c>
 80098f4:	f1b9 0f00 	cmp.w	r9, #0
 80098f8:	d000      	beq.n	80098fc <__gethex+0x118>
 80098fa:	4252      	negs	r2, r2
 80098fc:	4415      	add	r5, r2
 80098fe:	f8cb 1000 	str.w	r1, [fp]
 8009902:	b1e4      	cbz	r4, 800993e <__gethex+0x15a>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	bf14      	ite	ne
 800990a:	2700      	movne	r7, #0
 800990c:	2706      	moveq	r7, #6
 800990e:	4638      	mov	r0, r7
 8009910:	b009      	add	sp, #36	; 0x24
 8009912:	ecbd 8b02 	vpop	{d8}
 8009916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991a:	463e      	mov	r6, r7
 800991c:	4625      	mov	r5, r4
 800991e:	2401      	movs	r4, #1
 8009920:	e7ca      	b.n	80098b8 <__gethex+0xd4>
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	1cb1      	adds	r1, r6, #2
 8009928:	e7d3      	b.n	80098d2 <__gethex+0xee>
 800992a:	f04f 0901 	mov.w	r9, #1
 800992e:	e7fa      	b.n	8009926 <__gethex+0x142>
 8009930:	230a      	movs	r3, #10
 8009932:	fb03 0202 	mla	r2, r3, r2, r0
 8009936:	3a10      	subs	r2, #16
 8009938:	e7d4      	b.n	80098e4 <__gethex+0x100>
 800993a:	4631      	mov	r1, r6
 800993c:	e7df      	b.n	80098fe <__gethex+0x11a>
 800993e:	1bf3      	subs	r3, r6, r7
 8009940:	3b01      	subs	r3, #1
 8009942:	4621      	mov	r1, r4
 8009944:	2b07      	cmp	r3, #7
 8009946:	dc0b      	bgt.n	8009960 <__gethex+0x17c>
 8009948:	ee18 0a10 	vmov	r0, s16
 800994c:	f000 fa90 	bl	8009e70 <_Balloc>
 8009950:	4604      	mov	r4, r0
 8009952:	b940      	cbnz	r0, 8009966 <__gethex+0x182>
 8009954:	4b5d      	ldr	r3, [pc, #372]	; (8009acc <__gethex+0x2e8>)
 8009956:	4602      	mov	r2, r0
 8009958:	21de      	movs	r1, #222	; 0xde
 800995a:	485d      	ldr	r0, [pc, #372]	; (8009ad0 <__gethex+0x2ec>)
 800995c:	f001 f9d6 	bl	800ad0c <__assert_func>
 8009960:	3101      	adds	r1, #1
 8009962:	105b      	asrs	r3, r3, #1
 8009964:	e7ee      	b.n	8009944 <__gethex+0x160>
 8009966:	f100 0914 	add.w	r9, r0, #20
 800996a:	f04f 0b00 	mov.w	fp, #0
 800996e:	f1ca 0301 	rsb	r3, sl, #1
 8009972:	f8cd 9008 	str.w	r9, [sp, #8]
 8009976:	f8cd b000 	str.w	fp, [sp]
 800997a:	9306      	str	r3, [sp, #24]
 800997c:	42b7      	cmp	r7, r6
 800997e:	d340      	bcc.n	8009a02 <__gethex+0x21e>
 8009980:	9802      	ldr	r0, [sp, #8]
 8009982:	9b00      	ldr	r3, [sp, #0]
 8009984:	f840 3b04 	str.w	r3, [r0], #4
 8009988:	eba0 0009 	sub.w	r0, r0, r9
 800998c:	1080      	asrs	r0, r0, #2
 800998e:	0146      	lsls	r6, r0, #5
 8009990:	6120      	str	r0, [r4, #16]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fb5e 	bl	800a054 <__hi0bits>
 8009998:	1a30      	subs	r0, r6, r0
 800999a:	f8d8 6000 	ldr.w	r6, [r8]
 800999e:	42b0      	cmp	r0, r6
 80099a0:	dd63      	ble.n	8009a6a <__gethex+0x286>
 80099a2:	1b87      	subs	r7, r0, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 ff02 	bl	800a7b0 <__any_on>
 80099ac:	4682      	mov	sl, r0
 80099ae:	b1a8      	cbz	r0, 80099dc <__gethex+0x1f8>
 80099b0:	1e7b      	subs	r3, r7, #1
 80099b2:	1159      	asrs	r1, r3, #5
 80099b4:	f003 021f 	and.w	r2, r3, #31
 80099b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80099bc:	f04f 0a01 	mov.w	sl, #1
 80099c0:	fa0a f202 	lsl.w	r2, sl, r2
 80099c4:	420a      	tst	r2, r1
 80099c6:	d009      	beq.n	80099dc <__gethex+0x1f8>
 80099c8:	4553      	cmp	r3, sl
 80099ca:	dd05      	ble.n	80099d8 <__gethex+0x1f4>
 80099cc:	1eb9      	subs	r1, r7, #2
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 feee 	bl	800a7b0 <__any_on>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d145      	bne.n	8009a64 <__gethex+0x280>
 80099d8:	f04f 0a02 	mov.w	sl, #2
 80099dc:	4639      	mov	r1, r7
 80099de:	4620      	mov	r0, r4
 80099e0:	f7ff fe98 	bl	8009714 <rshift>
 80099e4:	443d      	add	r5, r7
 80099e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ea:	42ab      	cmp	r3, r5
 80099ec:	da4c      	bge.n	8009a88 <__gethex+0x2a4>
 80099ee:	ee18 0a10 	vmov	r0, s16
 80099f2:	4621      	mov	r1, r4
 80099f4:	f000 fa7c 	bl	8009ef0 <_Bfree>
 80099f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099fa:	2300      	movs	r3, #0
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	27a3      	movs	r7, #163	; 0xa3
 8009a00:	e785      	b.n	800990e <__gethex+0x12a>
 8009a02:	1e73      	subs	r3, r6, #1
 8009a04:	9a05      	ldr	r2, [sp, #20]
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d019      	beq.n	8009a44 <__gethex+0x260>
 8009a10:	f1bb 0f20 	cmp.w	fp, #32
 8009a14:	d107      	bne.n	8009a26 <__gethex+0x242>
 8009a16:	9b02      	ldr	r3, [sp, #8]
 8009a18:	9a00      	ldr	r2, [sp, #0]
 8009a1a:	f843 2b04 	str.w	r2, [r3], #4
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	2300      	movs	r3, #0
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	469b      	mov	fp, r3
 8009a26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009a2a:	f7ff fec5 	bl	80097b8 <__hexdig_fun>
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	f000 000f 	and.w	r0, r0, #15
 8009a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8009a38:	4303      	orrs	r3, r0
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	f10b 0b04 	add.w	fp, fp, #4
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	e00d      	b.n	8009a60 <__gethex+0x27c>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	9a06      	ldr	r2, [sp, #24]
 8009a48:	4413      	add	r3, r2
 8009a4a:	42bb      	cmp	r3, r7
 8009a4c:	d3e0      	bcc.n	8009a10 <__gethex+0x22c>
 8009a4e:	4618      	mov	r0, r3
 8009a50:	9901      	ldr	r1, [sp, #4]
 8009a52:	9307      	str	r3, [sp, #28]
 8009a54:	4652      	mov	r2, sl
 8009a56:	f7fe f8fe 	bl	8007c56 <strncmp>
 8009a5a:	9b07      	ldr	r3, [sp, #28]
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d1d7      	bne.n	8009a10 <__gethex+0x22c>
 8009a60:	461e      	mov	r6, r3
 8009a62:	e78b      	b.n	800997c <__gethex+0x198>
 8009a64:	f04f 0a03 	mov.w	sl, #3
 8009a68:	e7b8      	b.n	80099dc <__gethex+0x1f8>
 8009a6a:	da0a      	bge.n	8009a82 <__gethex+0x29e>
 8009a6c:	1a37      	subs	r7, r6, r0
 8009a6e:	4621      	mov	r1, r4
 8009a70:	ee18 0a10 	vmov	r0, s16
 8009a74:	463a      	mov	r2, r7
 8009a76:	f000 fc57 	bl	800a328 <__lshift>
 8009a7a:	1bed      	subs	r5, r5, r7
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	f100 0914 	add.w	r9, r0, #20
 8009a82:	f04f 0a00 	mov.w	sl, #0
 8009a86:	e7ae      	b.n	80099e6 <__gethex+0x202>
 8009a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a8c:	42a8      	cmp	r0, r5
 8009a8e:	dd72      	ble.n	8009b76 <__gethex+0x392>
 8009a90:	1b45      	subs	r5, r0, r5
 8009a92:	42ae      	cmp	r6, r5
 8009a94:	dc36      	bgt.n	8009b04 <__gethex+0x320>
 8009a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d02a      	beq.n	8009af4 <__gethex+0x310>
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d02c      	beq.n	8009afc <__gethex+0x318>
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d11c      	bne.n	8009ae0 <__gethex+0x2fc>
 8009aa6:	42ae      	cmp	r6, r5
 8009aa8:	d11a      	bne.n	8009ae0 <__gethex+0x2fc>
 8009aaa:	2e01      	cmp	r6, #1
 8009aac:	d112      	bne.n	8009ad4 <__gethex+0x2f0>
 8009aae:	9a04      	ldr	r2, [sp, #16]
 8009ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	f8c9 3000 	str.w	r3, [r9]
 8009abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ac0:	2762      	movs	r7, #98	; 0x62
 8009ac2:	601c      	str	r4, [r3, #0]
 8009ac4:	e723      	b.n	800990e <__gethex+0x12a>
 8009ac6:	bf00      	nop
 8009ac8:	0800ba98 	.word	0x0800ba98
 8009acc:	0800ba20 	.word	0x0800ba20
 8009ad0:	0800ba31 	.word	0x0800ba31
 8009ad4:	1e71      	subs	r1, r6, #1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 fe6a 	bl	800a7b0 <__any_on>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d1e6      	bne.n	8009aae <__gethex+0x2ca>
 8009ae0:	ee18 0a10 	vmov	r0, s16
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	f000 fa03 	bl	8009ef0 <_Bfree>
 8009aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aec:	2300      	movs	r3, #0
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	2750      	movs	r7, #80	; 0x50
 8009af2:	e70c      	b.n	800990e <__gethex+0x12a>
 8009af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f2      	bne.n	8009ae0 <__gethex+0x2fc>
 8009afa:	e7d8      	b.n	8009aae <__gethex+0x2ca>
 8009afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1d5      	bne.n	8009aae <__gethex+0x2ca>
 8009b02:	e7ed      	b.n	8009ae0 <__gethex+0x2fc>
 8009b04:	1e6f      	subs	r7, r5, #1
 8009b06:	f1ba 0f00 	cmp.w	sl, #0
 8009b0a:	d131      	bne.n	8009b70 <__gethex+0x38c>
 8009b0c:	b127      	cbz	r7, 8009b18 <__gethex+0x334>
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fe4d 	bl	800a7b0 <__any_on>
 8009b16:	4682      	mov	sl, r0
 8009b18:	117b      	asrs	r3, r7, #5
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009b20:	f007 071f 	and.w	r7, r7, #31
 8009b24:	fa01 f707 	lsl.w	r7, r1, r7
 8009b28:	421f      	tst	r7, r3
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	bf18      	it	ne
 8009b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8009b34:	1b76      	subs	r6, r6, r5
 8009b36:	f7ff fded 	bl	8009714 <rshift>
 8009b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b3e:	2702      	movs	r7, #2
 8009b40:	f1ba 0f00 	cmp.w	sl, #0
 8009b44:	d048      	beq.n	8009bd8 <__gethex+0x3f4>
 8009b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d015      	beq.n	8009b7a <__gethex+0x396>
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d017      	beq.n	8009b82 <__gethex+0x39e>
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d109      	bne.n	8009b6a <__gethex+0x386>
 8009b56:	f01a 0f02 	tst.w	sl, #2
 8009b5a:	d006      	beq.n	8009b6a <__gethex+0x386>
 8009b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8009b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b64:	f01a 0f01 	tst.w	sl, #1
 8009b68:	d10e      	bne.n	8009b88 <__gethex+0x3a4>
 8009b6a:	f047 0710 	orr.w	r7, r7, #16
 8009b6e:	e033      	b.n	8009bd8 <__gethex+0x3f4>
 8009b70:	f04f 0a01 	mov.w	sl, #1
 8009b74:	e7d0      	b.n	8009b18 <__gethex+0x334>
 8009b76:	2701      	movs	r7, #1
 8009b78:	e7e2      	b.n	8009b40 <__gethex+0x35c>
 8009b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b7c:	f1c3 0301 	rsb	r3, r3, #1
 8009b80:	9315      	str	r3, [sp, #84]	; 0x54
 8009b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0f0      	beq.n	8009b6a <__gethex+0x386>
 8009b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b8c:	f104 0314 	add.w	r3, r4, #20
 8009b90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b98:	f04f 0c00 	mov.w	ip, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ba6:	d01c      	beq.n	8009be2 <__gethex+0x3fe>
 8009ba8:	3201      	adds	r2, #1
 8009baa:	6002      	str	r2, [r0, #0]
 8009bac:	2f02      	cmp	r7, #2
 8009bae:	f104 0314 	add.w	r3, r4, #20
 8009bb2:	d13f      	bne.n	8009c34 <__gethex+0x450>
 8009bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8009bb8:	3a01      	subs	r2, #1
 8009bba:	42b2      	cmp	r2, r6
 8009bbc:	d10a      	bne.n	8009bd4 <__gethex+0x3f0>
 8009bbe:	1171      	asrs	r1, r6, #5
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bc6:	f006 061f 	and.w	r6, r6, #31
 8009bca:	fa02 f606 	lsl.w	r6, r2, r6
 8009bce:	421e      	tst	r6, r3
 8009bd0:	bf18      	it	ne
 8009bd2:	4617      	movne	r7, r2
 8009bd4:	f047 0720 	orr.w	r7, r7, #32
 8009bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bda:	601c      	str	r4, [r3, #0]
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	601d      	str	r5, [r3, #0]
 8009be0:	e695      	b.n	800990e <__gethex+0x12a>
 8009be2:	4299      	cmp	r1, r3
 8009be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009be8:	d8d8      	bhi.n	8009b9c <__gethex+0x3b8>
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	459b      	cmp	fp, r3
 8009bee:	db19      	blt.n	8009c24 <__gethex+0x440>
 8009bf0:	6861      	ldr	r1, [r4, #4]
 8009bf2:	ee18 0a10 	vmov	r0, s16
 8009bf6:	3101      	adds	r1, #1
 8009bf8:	f000 f93a 	bl	8009e70 <_Balloc>
 8009bfc:	4681      	mov	r9, r0
 8009bfe:	b918      	cbnz	r0, 8009c08 <__gethex+0x424>
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <__gethex+0x488>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	2184      	movs	r1, #132	; 0x84
 8009c06:	e6a8      	b.n	800995a <__gethex+0x176>
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	3202      	adds	r2, #2
 8009c0c:	f104 010c 	add.w	r1, r4, #12
 8009c10:	0092      	lsls	r2, r2, #2
 8009c12:	300c      	adds	r0, #12
 8009c14:	f000 f91e 	bl	8009e54 <memcpy>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	ee18 0a10 	vmov	r0, s16
 8009c1e:	f000 f967 	bl	8009ef0 <_Bfree>
 8009c22:	464c      	mov	r4, r9
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c2c:	6122      	str	r2, [r4, #16]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	615a      	str	r2, [r3, #20]
 8009c32:	e7bb      	b.n	8009bac <__gethex+0x3c8>
 8009c34:	6922      	ldr	r2, [r4, #16]
 8009c36:	455a      	cmp	r2, fp
 8009c38:	dd0b      	ble.n	8009c52 <__gethex+0x46e>
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7ff fd69 	bl	8009714 <rshift>
 8009c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c46:	3501      	adds	r5, #1
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	f6ff aed0 	blt.w	80099ee <__gethex+0x20a>
 8009c4e:	2701      	movs	r7, #1
 8009c50:	e7c0      	b.n	8009bd4 <__gethex+0x3f0>
 8009c52:	f016 061f 	ands.w	r6, r6, #31
 8009c56:	d0fa      	beq.n	8009c4e <__gethex+0x46a>
 8009c58:	4453      	add	r3, sl
 8009c5a:	f1c6 0620 	rsb	r6, r6, #32
 8009c5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c62:	f000 f9f7 	bl	800a054 <__hi0bits>
 8009c66:	42b0      	cmp	r0, r6
 8009c68:	dbe7      	blt.n	8009c3a <__gethex+0x456>
 8009c6a:	e7f0      	b.n	8009c4e <__gethex+0x46a>
 8009c6c:	0800ba20 	.word	0x0800ba20

08009c70 <L_shift>:
 8009c70:	f1c2 0208 	rsb	r2, r2, #8
 8009c74:	0092      	lsls	r2, r2, #2
 8009c76:	b570      	push	{r4, r5, r6, lr}
 8009c78:	f1c2 0620 	rsb	r6, r2, #32
 8009c7c:	6843      	ldr	r3, [r0, #4]
 8009c7e:	6804      	ldr	r4, [r0, #0]
 8009c80:	fa03 f506 	lsl.w	r5, r3, r6
 8009c84:	432c      	orrs	r4, r5
 8009c86:	40d3      	lsrs	r3, r2
 8009c88:	6004      	str	r4, [r0, #0]
 8009c8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c8e:	4288      	cmp	r0, r1
 8009c90:	d3f4      	bcc.n	8009c7c <L_shift+0xc>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}

08009c94 <__match>:
 8009c94:	b530      	push	{r4, r5, lr}
 8009c96:	6803      	ldr	r3, [r0, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9e:	b914      	cbnz	r4, 8009ca6 <__match+0x12>
 8009ca0:	6003      	str	r3, [r0, #0]
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	bd30      	pop	{r4, r5, pc}
 8009ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009caa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cae:	2d19      	cmp	r5, #25
 8009cb0:	bf98      	it	ls
 8009cb2:	3220      	addls	r2, #32
 8009cb4:	42a2      	cmp	r2, r4
 8009cb6:	d0f0      	beq.n	8009c9a <__match+0x6>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e7f3      	b.n	8009ca4 <__match+0x10>

08009cbc <__hexnan>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	680b      	ldr	r3, [r1, #0]
 8009cc2:	115e      	asrs	r6, r3, #5
 8009cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cc8:	f013 031f 	ands.w	r3, r3, #31
 8009ccc:	b087      	sub	sp, #28
 8009cce:	bf18      	it	ne
 8009cd0:	3604      	addne	r6, #4
 8009cd2:	2500      	movs	r5, #0
 8009cd4:	1f37      	subs	r7, r6, #4
 8009cd6:	4690      	mov	r8, r2
 8009cd8:	6802      	ldr	r2, [r0, #0]
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	4682      	mov	sl, r0
 8009cde:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ce2:	46b9      	mov	r9, r7
 8009ce4:	463c      	mov	r4, r7
 8009ce6:	9502      	str	r5, [sp, #8]
 8009ce8:	46ab      	mov	fp, r5
 8009cea:	7851      	ldrb	r1, [r2, #1]
 8009cec:	1c53      	adds	r3, r2, #1
 8009cee:	9303      	str	r3, [sp, #12]
 8009cf0:	b341      	cbz	r1, 8009d44 <__hexnan+0x88>
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	9205      	str	r2, [sp, #20]
 8009cf6:	9104      	str	r1, [sp, #16]
 8009cf8:	f7ff fd5e 	bl	80097b8 <__hexdig_fun>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d14f      	bne.n	8009da0 <__hexnan+0xe4>
 8009d00:	9904      	ldr	r1, [sp, #16]
 8009d02:	9a05      	ldr	r2, [sp, #20]
 8009d04:	2920      	cmp	r1, #32
 8009d06:	d818      	bhi.n	8009d3a <__hexnan+0x7e>
 8009d08:	9b02      	ldr	r3, [sp, #8]
 8009d0a:	459b      	cmp	fp, r3
 8009d0c:	dd13      	ble.n	8009d36 <__hexnan+0x7a>
 8009d0e:	454c      	cmp	r4, r9
 8009d10:	d206      	bcs.n	8009d20 <__hexnan+0x64>
 8009d12:	2d07      	cmp	r5, #7
 8009d14:	dc04      	bgt.n	8009d20 <__hexnan+0x64>
 8009d16:	462a      	mov	r2, r5
 8009d18:	4649      	mov	r1, r9
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff ffa8 	bl	8009c70 <L_shift>
 8009d20:	4544      	cmp	r4, r8
 8009d22:	d950      	bls.n	8009dc6 <__hexnan+0x10a>
 8009d24:	2300      	movs	r3, #0
 8009d26:	f1a4 0904 	sub.w	r9, r4, #4
 8009d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8009d32:	464c      	mov	r4, r9
 8009d34:	461d      	mov	r5, r3
 8009d36:	9a03      	ldr	r2, [sp, #12]
 8009d38:	e7d7      	b.n	8009cea <__hexnan+0x2e>
 8009d3a:	2929      	cmp	r1, #41	; 0x29
 8009d3c:	d156      	bne.n	8009dec <__hexnan+0x130>
 8009d3e:	3202      	adds	r2, #2
 8009d40:	f8ca 2000 	str.w	r2, [sl]
 8009d44:	f1bb 0f00 	cmp.w	fp, #0
 8009d48:	d050      	beq.n	8009dec <__hexnan+0x130>
 8009d4a:	454c      	cmp	r4, r9
 8009d4c:	d206      	bcs.n	8009d5c <__hexnan+0xa0>
 8009d4e:	2d07      	cmp	r5, #7
 8009d50:	dc04      	bgt.n	8009d5c <__hexnan+0xa0>
 8009d52:	462a      	mov	r2, r5
 8009d54:	4649      	mov	r1, r9
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7ff ff8a 	bl	8009c70 <L_shift>
 8009d5c:	4544      	cmp	r4, r8
 8009d5e:	d934      	bls.n	8009dca <__hexnan+0x10e>
 8009d60:	f1a8 0204 	sub.w	r2, r8, #4
 8009d64:	4623      	mov	r3, r4
 8009d66:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d6e:	429f      	cmp	r7, r3
 8009d70:	d2f9      	bcs.n	8009d66 <__hexnan+0xaa>
 8009d72:	1b3b      	subs	r3, r7, r4
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	3304      	adds	r3, #4
 8009d7a:	3401      	adds	r4, #1
 8009d7c:	3e03      	subs	r6, #3
 8009d7e:	42b4      	cmp	r4, r6
 8009d80:	bf88      	it	hi
 8009d82:	2304      	movhi	r3, #4
 8009d84:	4443      	add	r3, r8
 8009d86:	2200      	movs	r2, #0
 8009d88:	f843 2b04 	str.w	r2, [r3], #4
 8009d8c:	429f      	cmp	r7, r3
 8009d8e:	d2fb      	bcs.n	8009d88 <__hexnan+0xcc>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	b91b      	cbnz	r3, 8009d9c <__hexnan+0xe0>
 8009d94:	4547      	cmp	r7, r8
 8009d96:	d127      	bne.n	8009de8 <__hexnan+0x12c>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	2005      	movs	r0, #5
 8009d9e:	e026      	b.n	8009dee <__hexnan+0x132>
 8009da0:	3501      	adds	r5, #1
 8009da2:	2d08      	cmp	r5, #8
 8009da4:	f10b 0b01 	add.w	fp, fp, #1
 8009da8:	dd06      	ble.n	8009db8 <__hexnan+0xfc>
 8009daa:	4544      	cmp	r4, r8
 8009dac:	d9c3      	bls.n	8009d36 <__hexnan+0x7a>
 8009dae:	2300      	movs	r3, #0
 8009db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009db4:	2501      	movs	r5, #1
 8009db6:	3c04      	subs	r4, #4
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	f000 000f 	and.w	r0, r0, #15
 8009dbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009dc2:	6022      	str	r2, [r4, #0]
 8009dc4:	e7b7      	b.n	8009d36 <__hexnan+0x7a>
 8009dc6:	2508      	movs	r5, #8
 8009dc8:	e7b5      	b.n	8009d36 <__hexnan+0x7a>
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0df      	beq.n	8009d90 <__hexnan+0xd4>
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd4:	f1c3 0320 	rsb	r3, r3, #32
 8009dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009de0:	401a      	ands	r2, r3
 8009de2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009de6:	e7d3      	b.n	8009d90 <__hexnan+0xd4>
 8009de8:	3f04      	subs	r7, #4
 8009dea:	e7d1      	b.n	8009d90 <__hexnan+0xd4>
 8009dec:	2004      	movs	r0, #4
 8009dee:	b007      	add	sp, #28
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009df4 <_localeconv_r>:
 8009df4:	4800      	ldr	r0, [pc, #0]	; (8009df8 <_localeconv_r+0x4>)
 8009df6:	4770      	bx	lr
 8009df8:	20000164 	.word	0x20000164

08009dfc <_lseek_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	; (8009e1c <_lseek_r+0x20>)
 8009e00:	4604      	mov	r4, r0
 8009e02:	4608      	mov	r0, r1
 8009e04:	4611      	mov	r1, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f8 fac0 	bl	8002390 <_lseek>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_lseek_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_lseek_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20000988 	.word	0x20000988

08009e20 <malloc>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <malloc+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f000 bd67 	b.w	800a8f8 <_malloc_r>
 8009e2a:	bf00      	nop
 8009e2c:	2000000c 	.word	0x2000000c

08009e30 <__ascii_mbtowc>:
 8009e30:	b082      	sub	sp, #8
 8009e32:	b901      	cbnz	r1, 8009e36 <__ascii_mbtowc+0x6>
 8009e34:	a901      	add	r1, sp, #4
 8009e36:	b142      	cbz	r2, 8009e4a <__ascii_mbtowc+0x1a>
 8009e38:	b14b      	cbz	r3, 8009e4e <__ascii_mbtowc+0x1e>
 8009e3a:	7813      	ldrb	r3, [r2, #0]
 8009e3c:	600b      	str	r3, [r1, #0]
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	1e10      	subs	r0, r2, #0
 8009e42:	bf18      	it	ne
 8009e44:	2001      	movne	r0, #1
 8009e46:	b002      	add	sp, #8
 8009e48:	4770      	bx	lr
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	e7fb      	b.n	8009e46 <__ascii_mbtowc+0x16>
 8009e4e:	f06f 0001 	mvn.w	r0, #1
 8009e52:	e7f8      	b.n	8009e46 <__ascii_mbtowc+0x16>

08009e54 <memcpy>:
 8009e54:	440a      	add	r2, r1
 8009e56:	4291      	cmp	r1, r2
 8009e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e5c:	d100      	bne.n	8009e60 <memcpy+0xc>
 8009e5e:	4770      	bx	lr
 8009e60:	b510      	push	{r4, lr}
 8009e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e6a:	4291      	cmp	r1, r2
 8009e6c:	d1f9      	bne.n	8009e62 <memcpy+0xe>
 8009e6e:	bd10      	pop	{r4, pc}

08009e70 <_Balloc>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	b976      	cbnz	r6, 8009e98 <_Balloc+0x28>
 8009e7a:	2010      	movs	r0, #16
 8009e7c:	f7ff ffd0 	bl	8009e20 <malloc>
 8009e80:	4602      	mov	r2, r0
 8009e82:	6260      	str	r0, [r4, #36]	; 0x24
 8009e84:	b920      	cbnz	r0, 8009e90 <_Balloc+0x20>
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <_Balloc+0x78>)
 8009e88:	4818      	ldr	r0, [pc, #96]	; (8009eec <_Balloc+0x7c>)
 8009e8a:	2166      	movs	r1, #102	; 0x66
 8009e8c:	f000 ff3e 	bl	800ad0c <__assert_func>
 8009e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e94:	6006      	str	r6, [r0, #0]
 8009e96:	60c6      	str	r6, [r0, #12]
 8009e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e9a:	68f3      	ldr	r3, [r6, #12]
 8009e9c:	b183      	cbz	r3, 8009ec0 <_Balloc+0x50>
 8009e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ea6:	b9b8      	cbnz	r0, 8009ed8 <_Balloc+0x68>
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8009eae:	1d72      	adds	r2, r6, #5
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fc9d 	bl	800a7f2 <_calloc_r>
 8009eb8:	b160      	cbz	r0, 8009ed4 <_Balloc+0x64>
 8009eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ebe:	e00e      	b.n	8009ede <_Balloc+0x6e>
 8009ec0:	2221      	movs	r2, #33	; 0x21
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fc94 	bl	800a7f2 <_calloc_r>
 8009eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ecc:	60f0      	str	r0, [r6, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e4      	bne.n	8009e9e <_Balloc+0x2e>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	6802      	ldr	r2, [r0, #0]
 8009eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ee4:	e7f7      	b.n	8009ed6 <_Balloc+0x66>
 8009ee6:	bf00      	nop
 8009ee8:	0800b9ae 	.word	0x0800b9ae
 8009eec:	0800baac 	.word	0x0800baac

08009ef0 <_Bfree>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b976      	cbnz	r6, 8009f18 <_Bfree+0x28>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff ff90 	bl	8009e20 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	6268      	str	r0, [r5, #36]	; 0x24
 8009f04:	b920      	cbnz	r0, 8009f10 <_Bfree+0x20>
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <_Bfree+0x3c>)
 8009f08:	4809      	ldr	r0, [pc, #36]	; (8009f30 <_Bfree+0x40>)
 8009f0a:	218a      	movs	r1, #138	; 0x8a
 8009f0c:	f000 fefe 	bl	800ad0c <__assert_func>
 8009f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f14:	6006      	str	r6, [r0, #0]
 8009f16:	60c6      	str	r6, [r0, #12]
 8009f18:	b13c      	cbz	r4, 8009f2a <_Bfree+0x3a>
 8009f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f1c:	6862      	ldr	r2, [r4, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f24:	6021      	str	r1, [r4, #0]
 8009f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	0800b9ae 	.word	0x0800b9ae
 8009f30:	0800baac 	.word	0x0800baac

08009f34 <__multadd>:
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	690d      	ldr	r5, [r1, #16]
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	461e      	mov	r6, r3
 8009f40:	f101 0c14 	add.w	ip, r1, #20
 8009f44:	2000      	movs	r0, #0
 8009f46:	f8dc 3000 	ldr.w	r3, [ip]
 8009f4a:	b299      	uxth	r1, r3
 8009f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f50:	0c1e      	lsrs	r6, r3, #16
 8009f52:	0c0b      	lsrs	r3, r1, #16
 8009f54:	fb02 3306 	mla	r3, r2, r6, r3
 8009f58:	b289      	uxth	r1, r1
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f60:	4285      	cmp	r5, r0
 8009f62:	f84c 1b04 	str.w	r1, [ip], #4
 8009f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f6a:	dcec      	bgt.n	8009f46 <__multadd+0x12>
 8009f6c:	b30e      	cbz	r6, 8009fb2 <__multadd+0x7e>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc19      	bgt.n	8009fa8 <__multadd+0x74>
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4638      	mov	r0, r7
 8009f78:	3101      	adds	r1, #1
 8009f7a:	f7ff ff79 	bl	8009e70 <_Balloc>
 8009f7e:	4680      	mov	r8, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__multadd+0x5a>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <__multadd+0x84>)
 8009f86:	480d      	ldr	r0, [pc, #52]	; (8009fbc <__multadd+0x88>)
 8009f88:	21b5      	movs	r1, #181	; 0xb5
 8009f8a:	f000 febf 	bl	800ad0c <__assert_func>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	f104 010c 	add.w	r1, r4, #12
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f7ff ff5b 	bl	8009e54 <memcpy>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ffa5 	bl	8009ef0 <_Bfree>
 8009fa6:	4644      	mov	r4, r8
 8009fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fac:	3501      	adds	r5, #1
 8009fae:	615e      	str	r6, [r3, #20]
 8009fb0:	6125      	str	r5, [r4, #16]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	0800ba20 	.word	0x0800ba20
 8009fbc:	0800baac 	.word	0x0800baac

08009fc0 <__s2b>:
 8009fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	4615      	mov	r5, r2
 8009fc8:	461f      	mov	r7, r3
 8009fca:	2209      	movs	r2, #9
 8009fcc:	3308      	adds	r3, #8
 8009fce:	4606      	mov	r6, r0
 8009fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	db09      	blt.n	8009ff0 <__s2b+0x30>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff ff47 	bl	8009e70 <_Balloc>
 8009fe2:	b940      	cbnz	r0, 8009ff6 <__s2b+0x36>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	4b19      	ldr	r3, [pc, #100]	; (800a04c <__s2b+0x8c>)
 8009fe8:	4819      	ldr	r0, [pc, #100]	; (800a050 <__s2b+0x90>)
 8009fea:	21ce      	movs	r1, #206	; 0xce
 8009fec:	f000 fe8e 	bl	800ad0c <__assert_func>
 8009ff0:	0052      	lsls	r2, r2, #1
 8009ff2:	3101      	adds	r1, #1
 8009ff4:	e7f0      	b.n	8009fd8 <__s2b+0x18>
 8009ff6:	9b08      	ldr	r3, [sp, #32]
 8009ff8:	6143      	str	r3, [r0, #20]
 8009ffa:	2d09      	cmp	r5, #9
 8009ffc:	f04f 0301 	mov.w	r3, #1
 800a000:	6103      	str	r3, [r0, #16]
 800a002:	dd16      	ble.n	800a032 <__s2b+0x72>
 800a004:	f104 0909 	add.w	r9, r4, #9
 800a008:	46c8      	mov	r8, r9
 800a00a:	442c      	add	r4, r5
 800a00c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a010:	4601      	mov	r1, r0
 800a012:	3b30      	subs	r3, #48	; 0x30
 800a014:	220a      	movs	r2, #10
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ff8c 	bl	8009f34 <__multadd>
 800a01c:	45a0      	cmp	r8, r4
 800a01e:	d1f5      	bne.n	800a00c <__s2b+0x4c>
 800a020:	f1a5 0408 	sub.w	r4, r5, #8
 800a024:	444c      	add	r4, r9
 800a026:	1b2d      	subs	r5, r5, r4
 800a028:	1963      	adds	r3, r4, r5
 800a02a:	42bb      	cmp	r3, r7
 800a02c:	db04      	blt.n	800a038 <__s2b+0x78>
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	340a      	adds	r4, #10
 800a034:	2509      	movs	r5, #9
 800a036:	e7f6      	b.n	800a026 <__s2b+0x66>
 800a038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a03c:	4601      	mov	r1, r0
 800a03e:	3b30      	subs	r3, #48	; 0x30
 800a040:	220a      	movs	r2, #10
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff76 	bl	8009f34 <__multadd>
 800a048:	e7ee      	b.n	800a028 <__s2b+0x68>
 800a04a:	bf00      	nop
 800a04c:	0800ba20 	.word	0x0800ba20
 800a050:	0800baac 	.word	0x0800baac

0800a054 <__hi0bits>:
 800a054:	0c03      	lsrs	r3, r0, #16
 800a056:	041b      	lsls	r3, r3, #16
 800a058:	b9d3      	cbnz	r3, 800a090 <__hi0bits+0x3c>
 800a05a:	0400      	lsls	r0, r0, #16
 800a05c:	2310      	movs	r3, #16
 800a05e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a062:	bf04      	itt	eq
 800a064:	0200      	lsleq	r0, r0, #8
 800a066:	3308      	addeq	r3, #8
 800a068:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a06c:	bf04      	itt	eq
 800a06e:	0100      	lsleq	r0, r0, #4
 800a070:	3304      	addeq	r3, #4
 800a072:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a076:	bf04      	itt	eq
 800a078:	0080      	lsleq	r0, r0, #2
 800a07a:	3302      	addeq	r3, #2
 800a07c:	2800      	cmp	r0, #0
 800a07e:	db05      	blt.n	800a08c <__hi0bits+0x38>
 800a080:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a084:	f103 0301 	add.w	r3, r3, #1
 800a088:	bf08      	it	eq
 800a08a:	2320      	moveq	r3, #32
 800a08c:	4618      	mov	r0, r3
 800a08e:	4770      	bx	lr
 800a090:	2300      	movs	r3, #0
 800a092:	e7e4      	b.n	800a05e <__hi0bits+0xa>

0800a094 <__lo0bits>:
 800a094:	6803      	ldr	r3, [r0, #0]
 800a096:	f013 0207 	ands.w	r2, r3, #7
 800a09a:	4601      	mov	r1, r0
 800a09c:	d00b      	beq.n	800a0b6 <__lo0bits+0x22>
 800a09e:	07da      	lsls	r2, r3, #31
 800a0a0:	d423      	bmi.n	800a0ea <__lo0bits+0x56>
 800a0a2:	0798      	lsls	r0, r3, #30
 800a0a4:	bf49      	itett	mi
 800a0a6:	085b      	lsrmi	r3, r3, #1
 800a0a8:	089b      	lsrpl	r3, r3, #2
 800a0aa:	2001      	movmi	r0, #1
 800a0ac:	600b      	strmi	r3, [r1, #0]
 800a0ae:	bf5c      	itt	pl
 800a0b0:	600b      	strpl	r3, [r1, #0]
 800a0b2:	2002      	movpl	r0, #2
 800a0b4:	4770      	bx	lr
 800a0b6:	b298      	uxth	r0, r3
 800a0b8:	b9a8      	cbnz	r0, 800a0e6 <__lo0bits+0x52>
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	2010      	movs	r0, #16
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	b90a      	cbnz	r2, 800a0c6 <__lo0bits+0x32>
 800a0c2:	3008      	adds	r0, #8
 800a0c4:	0a1b      	lsrs	r3, r3, #8
 800a0c6:	071a      	lsls	r2, r3, #28
 800a0c8:	bf04      	itt	eq
 800a0ca:	091b      	lsreq	r3, r3, #4
 800a0cc:	3004      	addeq	r0, #4
 800a0ce:	079a      	lsls	r2, r3, #30
 800a0d0:	bf04      	itt	eq
 800a0d2:	089b      	lsreq	r3, r3, #2
 800a0d4:	3002      	addeq	r0, #2
 800a0d6:	07da      	lsls	r2, r3, #31
 800a0d8:	d403      	bmi.n	800a0e2 <__lo0bits+0x4e>
 800a0da:	085b      	lsrs	r3, r3, #1
 800a0dc:	f100 0001 	add.w	r0, r0, #1
 800a0e0:	d005      	beq.n	800a0ee <__lo0bits+0x5a>
 800a0e2:	600b      	str	r3, [r1, #0]
 800a0e4:	4770      	bx	lr
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	e7e9      	b.n	800a0be <__lo0bits+0x2a>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	4770      	bx	lr
 800a0ee:	2020      	movs	r0, #32
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <__i2b>:
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	f7ff feb9 	bl	8009e70 <_Balloc>
 800a0fe:	4602      	mov	r2, r0
 800a100:	b928      	cbnz	r0, 800a10e <__i2b+0x1a>
 800a102:	4b05      	ldr	r3, [pc, #20]	; (800a118 <__i2b+0x24>)
 800a104:	4805      	ldr	r0, [pc, #20]	; (800a11c <__i2b+0x28>)
 800a106:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a10a:	f000 fdff 	bl	800ad0c <__assert_func>
 800a10e:	2301      	movs	r3, #1
 800a110:	6144      	str	r4, [r0, #20]
 800a112:	6103      	str	r3, [r0, #16]
 800a114:	bd10      	pop	{r4, pc}
 800a116:	bf00      	nop
 800a118:	0800ba20 	.word	0x0800ba20
 800a11c:	0800baac 	.word	0x0800baac

0800a120 <__multiply>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	4691      	mov	r9, r2
 800a126:	690a      	ldr	r2, [r1, #16]
 800a128:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	bfb8      	it	lt
 800a130:	460b      	movlt	r3, r1
 800a132:	460c      	mov	r4, r1
 800a134:	bfbc      	itt	lt
 800a136:	464c      	movlt	r4, r9
 800a138:	4699      	movlt	r9, r3
 800a13a:	6927      	ldr	r7, [r4, #16]
 800a13c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a140:	68a3      	ldr	r3, [r4, #8]
 800a142:	6861      	ldr	r1, [r4, #4]
 800a144:	eb07 060a 	add.w	r6, r7, sl
 800a148:	42b3      	cmp	r3, r6
 800a14a:	b085      	sub	sp, #20
 800a14c:	bfb8      	it	lt
 800a14e:	3101      	addlt	r1, #1
 800a150:	f7ff fe8e 	bl	8009e70 <_Balloc>
 800a154:	b930      	cbnz	r0, 800a164 <__multiply+0x44>
 800a156:	4602      	mov	r2, r0
 800a158:	4b44      	ldr	r3, [pc, #272]	; (800a26c <__multiply+0x14c>)
 800a15a:	4845      	ldr	r0, [pc, #276]	; (800a270 <__multiply+0x150>)
 800a15c:	f240 115d 	movw	r1, #349	; 0x15d
 800a160:	f000 fdd4 	bl	800ad0c <__assert_func>
 800a164:	f100 0514 	add.w	r5, r0, #20
 800a168:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a16c:	462b      	mov	r3, r5
 800a16e:	2200      	movs	r2, #0
 800a170:	4543      	cmp	r3, r8
 800a172:	d321      	bcc.n	800a1b8 <__multiply+0x98>
 800a174:	f104 0314 	add.w	r3, r4, #20
 800a178:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a17c:	f109 0314 	add.w	r3, r9, #20
 800a180:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a184:	9202      	str	r2, [sp, #8]
 800a186:	1b3a      	subs	r2, r7, r4
 800a188:	3a15      	subs	r2, #21
 800a18a:	f022 0203 	bic.w	r2, r2, #3
 800a18e:	3204      	adds	r2, #4
 800a190:	f104 0115 	add.w	r1, r4, #21
 800a194:	428f      	cmp	r7, r1
 800a196:	bf38      	it	cc
 800a198:	2204      	movcc	r2, #4
 800a19a:	9201      	str	r2, [sp, #4]
 800a19c:	9a02      	ldr	r2, [sp, #8]
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d80c      	bhi.n	800a1be <__multiply+0x9e>
 800a1a4:	2e00      	cmp	r6, #0
 800a1a6:	dd03      	ble.n	800a1b0 <__multiply+0x90>
 800a1a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d05a      	beq.n	800a266 <__multiply+0x146>
 800a1b0:	6106      	str	r6, [r0, #16]
 800a1b2:	b005      	add	sp, #20
 800a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b8:	f843 2b04 	str.w	r2, [r3], #4
 800a1bc:	e7d8      	b.n	800a170 <__multiply+0x50>
 800a1be:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1c2:	f1ba 0f00 	cmp.w	sl, #0
 800a1c6:	d024      	beq.n	800a212 <__multiply+0xf2>
 800a1c8:	f104 0e14 	add.w	lr, r4, #20
 800a1cc:	46a9      	mov	r9, r5
 800a1ce:	f04f 0c00 	mov.w	ip, #0
 800a1d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1d6:	f8d9 1000 	ldr.w	r1, [r9]
 800a1da:	fa1f fb82 	uxth.w	fp, r2
 800a1de:	b289      	uxth	r1, r1
 800a1e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a1ec:	4461      	add	r1, ip
 800a1ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1fa:	b289      	uxth	r1, r1
 800a1fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a200:	4577      	cmp	r7, lr
 800a202:	f849 1b04 	str.w	r1, [r9], #4
 800a206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a20a:	d8e2      	bhi.n	800a1d2 <__multiply+0xb2>
 800a20c:	9a01      	ldr	r2, [sp, #4]
 800a20e:	f845 c002 	str.w	ip, [r5, r2]
 800a212:	9a03      	ldr	r2, [sp, #12]
 800a214:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a218:	3304      	adds	r3, #4
 800a21a:	f1b9 0f00 	cmp.w	r9, #0
 800a21e:	d020      	beq.n	800a262 <__multiply+0x142>
 800a220:	6829      	ldr	r1, [r5, #0]
 800a222:	f104 0c14 	add.w	ip, r4, #20
 800a226:	46ae      	mov	lr, r5
 800a228:	f04f 0a00 	mov.w	sl, #0
 800a22c:	f8bc b000 	ldrh.w	fp, [ip]
 800a230:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a234:	fb09 220b 	mla	r2, r9, fp, r2
 800a238:	4492      	add	sl, r2
 800a23a:	b289      	uxth	r1, r1
 800a23c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a240:	f84e 1b04 	str.w	r1, [lr], #4
 800a244:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a248:	f8be 1000 	ldrh.w	r1, [lr]
 800a24c:	0c12      	lsrs	r2, r2, #16
 800a24e:	fb09 1102 	mla	r1, r9, r2, r1
 800a252:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a256:	4567      	cmp	r7, ip
 800a258:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a25c:	d8e6      	bhi.n	800a22c <__multiply+0x10c>
 800a25e:	9a01      	ldr	r2, [sp, #4]
 800a260:	50a9      	str	r1, [r5, r2]
 800a262:	3504      	adds	r5, #4
 800a264:	e79a      	b.n	800a19c <__multiply+0x7c>
 800a266:	3e01      	subs	r6, #1
 800a268:	e79c      	b.n	800a1a4 <__multiply+0x84>
 800a26a:	bf00      	nop
 800a26c:	0800ba20 	.word	0x0800ba20
 800a270:	0800baac 	.word	0x0800baac

0800a274 <__pow5mult>:
 800a274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a278:	4615      	mov	r5, r2
 800a27a:	f012 0203 	ands.w	r2, r2, #3
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	d007      	beq.n	800a294 <__pow5mult+0x20>
 800a284:	4c25      	ldr	r4, [pc, #148]	; (800a31c <__pow5mult+0xa8>)
 800a286:	3a01      	subs	r2, #1
 800a288:	2300      	movs	r3, #0
 800a28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a28e:	f7ff fe51 	bl	8009f34 <__multadd>
 800a292:	4607      	mov	r7, r0
 800a294:	10ad      	asrs	r5, r5, #2
 800a296:	d03d      	beq.n	800a314 <__pow5mult+0xa0>
 800a298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a29a:	b97c      	cbnz	r4, 800a2bc <__pow5mult+0x48>
 800a29c:	2010      	movs	r0, #16
 800a29e:	f7ff fdbf 	bl	8009e20 <malloc>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6270      	str	r0, [r6, #36]	; 0x24
 800a2a6:	b928      	cbnz	r0, 800a2b4 <__pow5mult+0x40>
 800a2a8:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <__pow5mult+0xac>)
 800a2aa:	481e      	ldr	r0, [pc, #120]	; (800a324 <__pow5mult+0xb0>)
 800a2ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a2b0:	f000 fd2c 	bl	800ad0c <__assert_func>
 800a2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2b8:	6004      	str	r4, [r0, #0]
 800a2ba:	60c4      	str	r4, [r0, #12]
 800a2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2c4:	b94c      	cbnz	r4, 800a2da <__pow5mult+0x66>
 800a2c6:	f240 2171 	movw	r1, #625	; 0x271
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff ff12 	bl	800a0f4 <__i2b>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	6003      	str	r3, [r0, #0]
 800a2da:	f04f 0900 	mov.w	r9, #0
 800a2de:	07eb      	lsls	r3, r5, #31
 800a2e0:	d50a      	bpl.n	800a2f8 <__pow5mult+0x84>
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7ff ff1a 	bl	800a120 <__multiply>
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff fdfd 	bl	8009ef0 <_Bfree>
 800a2f6:	4647      	mov	r7, r8
 800a2f8:	106d      	asrs	r5, r5, #1
 800a2fa:	d00b      	beq.n	800a314 <__pow5mult+0xa0>
 800a2fc:	6820      	ldr	r0, [r4, #0]
 800a2fe:	b938      	cbnz	r0, 800a310 <__pow5mult+0x9c>
 800a300:	4622      	mov	r2, r4
 800a302:	4621      	mov	r1, r4
 800a304:	4630      	mov	r0, r6
 800a306:	f7ff ff0b 	bl	800a120 <__multiply>
 800a30a:	6020      	str	r0, [r4, #0]
 800a30c:	f8c0 9000 	str.w	r9, [r0]
 800a310:	4604      	mov	r4, r0
 800a312:	e7e4      	b.n	800a2de <__pow5mult+0x6a>
 800a314:	4638      	mov	r0, r7
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	bf00      	nop
 800a31c:	0800bbf8 	.word	0x0800bbf8
 800a320:	0800b9ae 	.word	0x0800b9ae
 800a324:	0800baac 	.word	0x0800baac

0800a328 <__lshift>:
 800a328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a32c:	460c      	mov	r4, r1
 800a32e:	6849      	ldr	r1, [r1, #4]
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	4607      	mov	r7, r0
 800a33a:	4691      	mov	r9, r2
 800a33c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a340:	f108 0601 	add.w	r6, r8, #1
 800a344:	42b3      	cmp	r3, r6
 800a346:	db0b      	blt.n	800a360 <__lshift+0x38>
 800a348:	4638      	mov	r0, r7
 800a34a:	f7ff fd91 	bl	8009e70 <_Balloc>
 800a34e:	4605      	mov	r5, r0
 800a350:	b948      	cbnz	r0, 800a366 <__lshift+0x3e>
 800a352:	4602      	mov	r2, r0
 800a354:	4b2a      	ldr	r3, [pc, #168]	; (800a400 <__lshift+0xd8>)
 800a356:	482b      	ldr	r0, [pc, #172]	; (800a404 <__lshift+0xdc>)
 800a358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a35c:	f000 fcd6 	bl	800ad0c <__assert_func>
 800a360:	3101      	adds	r1, #1
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	e7ee      	b.n	800a344 <__lshift+0x1c>
 800a366:	2300      	movs	r3, #0
 800a368:	f100 0114 	add.w	r1, r0, #20
 800a36c:	f100 0210 	add.w	r2, r0, #16
 800a370:	4618      	mov	r0, r3
 800a372:	4553      	cmp	r3, sl
 800a374:	db37      	blt.n	800a3e6 <__lshift+0xbe>
 800a376:	6920      	ldr	r0, [r4, #16]
 800a378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a37c:	f104 0314 	add.w	r3, r4, #20
 800a380:	f019 091f 	ands.w	r9, r9, #31
 800a384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a388:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a38c:	d02f      	beq.n	800a3ee <__lshift+0xc6>
 800a38e:	f1c9 0e20 	rsb	lr, r9, #32
 800a392:	468a      	mov	sl, r1
 800a394:	f04f 0c00 	mov.w	ip, #0
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	fa02 f209 	lsl.w	r2, r2, r9
 800a39e:	ea42 020c 	orr.w	r2, r2, ip
 800a3a2:	f84a 2b04 	str.w	r2, [sl], #4
 800a3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3aa:	4298      	cmp	r0, r3
 800a3ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a3b0:	d8f2      	bhi.n	800a398 <__lshift+0x70>
 800a3b2:	1b03      	subs	r3, r0, r4
 800a3b4:	3b15      	subs	r3, #21
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	f104 0215 	add.w	r2, r4, #21
 800a3c0:	4290      	cmp	r0, r2
 800a3c2:	bf38      	it	cc
 800a3c4:	2304      	movcc	r3, #4
 800a3c6:	f841 c003 	str.w	ip, [r1, r3]
 800a3ca:	f1bc 0f00 	cmp.w	ip, #0
 800a3ce:	d001      	beq.n	800a3d4 <__lshift+0xac>
 800a3d0:	f108 0602 	add.w	r6, r8, #2
 800a3d4:	3e01      	subs	r6, #1
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	612e      	str	r6, [r5, #16]
 800a3da:	4621      	mov	r1, r4
 800a3dc:	f7ff fd88 	bl	8009ef0 <_Bfree>
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	e7c1      	b.n	800a372 <__lshift+0x4a>
 800a3ee:	3904      	subs	r1, #4
 800a3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3f8:	4298      	cmp	r0, r3
 800a3fa:	d8f9      	bhi.n	800a3f0 <__lshift+0xc8>
 800a3fc:	e7ea      	b.n	800a3d4 <__lshift+0xac>
 800a3fe:	bf00      	nop
 800a400:	0800ba20 	.word	0x0800ba20
 800a404:	0800baac 	.word	0x0800baac

0800a408 <__mcmp>:
 800a408:	b530      	push	{r4, r5, lr}
 800a40a:	6902      	ldr	r2, [r0, #16]
 800a40c:	690c      	ldr	r4, [r1, #16]
 800a40e:	1b12      	subs	r2, r2, r4
 800a410:	d10e      	bne.n	800a430 <__mcmp+0x28>
 800a412:	f100 0314 	add.w	r3, r0, #20
 800a416:	3114      	adds	r1, #20
 800a418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a41c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a428:	42a5      	cmp	r5, r4
 800a42a:	d003      	beq.n	800a434 <__mcmp+0x2c>
 800a42c:	d305      	bcc.n	800a43a <__mcmp+0x32>
 800a42e:	2201      	movs	r2, #1
 800a430:	4610      	mov	r0, r2
 800a432:	bd30      	pop	{r4, r5, pc}
 800a434:	4283      	cmp	r3, r0
 800a436:	d3f3      	bcc.n	800a420 <__mcmp+0x18>
 800a438:	e7fa      	b.n	800a430 <__mcmp+0x28>
 800a43a:	f04f 32ff 	mov.w	r2, #4294967295
 800a43e:	e7f7      	b.n	800a430 <__mcmp+0x28>

0800a440 <__mdiff>:
 800a440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	460c      	mov	r4, r1
 800a446:	4606      	mov	r6, r0
 800a448:	4611      	mov	r1, r2
 800a44a:	4620      	mov	r0, r4
 800a44c:	4690      	mov	r8, r2
 800a44e:	f7ff ffdb 	bl	800a408 <__mcmp>
 800a452:	1e05      	subs	r5, r0, #0
 800a454:	d110      	bne.n	800a478 <__mdiff+0x38>
 800a456:	4629      	mov	r1, r5
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff fd09 	bl	8009e70 <_Balloc>
 800a45e:	b930      	cbnz	r0, 800a46e <__mdiff+0x2e>
 800a460:	4b3a      	ldr	r3, [pc, #232]	; (800a54c <__mdiff+0x10c>)
 800a462:	4602      	mov	r2, r0
 800a464:	f240 2132 	movw	r1, #562	; 0x232
 800a468:	4839      	ldr	r0, [pc, #228]	; (800a550 <__mdiff+0x110>)
 800a46a:	f000 fc4f 	bl	800ad0c <__assert_func>
 800a46e:	2301      	movs	r3, #1
 800a470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	bfa4      	itt	ge
 800a47a:	4643      	movge	r3, r8
 800a47c:	46a0      	movge	r8, r4
 800a47e:	4630      	mov	r0, r6
 800a480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a484:	bfa6      	itte	ge
 800a486:	461c      	movge	r4, r3
 800a488:	2500      	movge	r5, #0
 800a48a:	2501      	movlt	r5, #1
 800a48c:	f7ff fcf0 	bl	8009e70 <_Balloc>
 800a490:	b920      	cbnz	r0, 800a49c <__mdiff+0x5c>
 800a492:	4b2e      	ldr	r3, [pc, #184]	; (800a54c <__mdiff+0x10c>)
 800a494:	4602      	mov	r2, r0
 800a496:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a49a:	e7e5      	b.n	800a468 <__mdiff+0x28>
 800a49c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4a0:	6926      	ldr	r6, [r4, #16]
 800a4a2:	60c5      	str	r5, [r0, #12]
 800a4a4:	f104 0914 	add.w	r9, r4, #20
 800a4a8:	f108 0514 	add.w	r5, r8, #20
 800a4ac:	f100 0e14 	add.w	lr, r0, #20
 800a4b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4b8:	f108 0210 	add.w	r2, r8, #16
 800a4bc:	46f2      	mov	sl, lr
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4c8:	fa1f f883 	uxth.w	r8, r3
 800a4cc:	fa11 f18b 	uxtah	r1, r1, fp
 800a4d0:	0c1b      	lsrs	r3, r3, #16
 800a4d2:	eba1 0808 	sub.w	r8, r1, r8
 800a4d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4de:	fa1f f888 	uxth.w	r8, r8
 800a4e2:	1419      	asrs	r1, r3, #16
 800a4e4:	454e      	cmp	r6, r9
 800a4e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4ea:	f84a 3b04 	str.w	r3, [sl], #4
 800a4ee:	d8e7      	bhi.n	800a4c0 <__mdiff+0x80>
 800a4f0:	1b33      	subs	r3, r6, r4
 800a4f2:	3b15      	subs	r3, #21
 800a4f4:	f023 0303 	bic.w	r3, r3, #3
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	3415      	adds	r4, #21
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	bf38      	it	cc
 800a500:	2304      	movcc	r3, #4
 800a502:	441d      	add	r5, r3
 800a504:	4473      	add	r3, lr
 800a506:	469e      	mov	lr, r3
 800a508:	462e      	mov	r6, r5
 800a50a:	4566      	cmp	r6, ip
 800a50c:	d30e      	bcc.n	800a52c <__mdiff+0xec>
 800a50e:	f10c 0203 	add.w	r2, ip, #3
 800a512:	1b52      	subs	r2, r2, r5
 800a514:	f022 0203 	bic.w	r2, r2, #3
 800a518:	3d03      	subs	r5, #3
 800a51a:	45ac      	cmp	ip, r5
 800a51c:	bf38      	it	cc
 800a51e:	2200      	movcc	r2, #0
 800a520:	441a      	add	r2, r3
 800a522:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a526:	b17b      	cbz	r3, 800a548 <__mdiff+0x108>
 800a528:	6107      	str	r7, [r0, #16]
 800a52a:	e7a3      	b.n	800a474 <__mdiff+0x34>
 800a52c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a530:	fa11 f288 	uxtah	r2, r1, r8
 800a534:	1414      	asrs	r4, r2, #16
 800a536:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a53a:	b292      	uxth	r2, r2
 800a53c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a540:	f84e 2b04 	str.w	r2, [lr], #4
 800a544:	1421      	asrs	r1, r4, #16
 800a546:	e7e0      	b.n	800a50a <__mdiff+0xca>
 800a548:	3f01      	subs	r7, #1
 800a54a:	e7ea      	b.n	800a522 <__mdiff+0xe2>
 800a54c:	0800ba20 	.word	0x0800ba20
 800a550:	0800baac 	.word	0x0800baac

0800a554 <__ulp>:
 800a554:	b082      	sub	sp, #8
 800a556:	ed8d 0b00 	vstr	d0, [sp]
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	4912      	ldr	r1, [pc, #72]	; (800a5a8 <__ulp+0x54>)
 800a55e:	4019      	ands	r1, r3
 800a560:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a564:	2900      	cmp	r1, #0
 800a566:	dd05      	ble.n	800a574 <__ulp+0x20>
 800a568:	2200      	movs	r2, #0
 800a56a:	460b      	mov	r3, r1
 800a56c:	ec43 2b10 	vmov	d0, r2, r3
 800a570:	b002      	add	sp, #8
 800a572:	4770      	bx	lr
 800a574:	4249      	negs	r1, r1
 800a576:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a57a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a57e:	f04f 0200 	mov.w	r2, #0
 800a582:	f04f 0300 	mov.w	r3, #0
 800a586:	da04      	bge.n	800a592 <__ulp+0x3e>
 800a588:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a58c:	fa41 f300 	asr.w	r3, r1, r0
 800a590:	e7ec      	b.n	800a56c <__ulp+0x18>
 800a592:	f1a0 0114 	sub.w	r1, r0, #20
 800a596:	291e      	cmp	r1, #30
 800a598:	bfda      	itte	le
 800a59a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a59e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a5a2:	2101      	movgt	r1, #1
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	e7e1      	b.n	800a56c <__ulp+0x18>
 800a5a8:	7ff00000 	.word	0x7ff00000

0800a5ac <__b2d>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	6905      	ldr	r5, [r0, #16]
 800a5b0:	f100 0714 	add.w	r7, r0, #20
 800a5b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a5b8:	1f2e      	subs	r6, r5, #4
 800a5ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7ff fd48 	bl	800a054 <__hi0bits>
 800a5c4:	f1c0 0320 	rsb	r3, r0, #32
 800a5c8:	280a      	cmp	r0, #10
 800a5ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a648 <__b2d+0x9c>
 800a5ce:	600b      	str	r3, [r1, #0]
 800a5d0:	dc14      	bgt.n	800a5fc <__b2d+0x50>
 800a5d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a5d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a5da:	42b7      	cmp	r7, r6
 800a5dc:	ea41 030c 	orr.w	r3, r1, ip
 800a5e0:	bf34      	ite	cc
 800a5e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5e6:	2100      	movcs	r1, #0
 800a5e8:	3015      	adds	r0, #21
 800a5ea:	fa04 f000 	lsl.w	r0, r4, r0
 800a5ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800a5f2:	ea40 0201 	orr.w	r2, r0, r1
 800a5f6:	ec43 2b10 	vmov	d0, r2, r3
 800a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fc:	42b7      	cmp	r7, r6
 800a5fe:	bf3a      	itte	cc
 800a600:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a604:	f1a5 0608 	subcc.w	r6, r5, #8
 800a608:	2100      	movcs	r1, #0
 800a60a:	380b      	subs	r0, #11
 800a60c:	d017      	beq.n	800a63e <__b2d+0x92>
 800a60e:	f1c0 0c20 	rsb	ip, r0, #32
 800a612:	fa04 f500 	lsl.w	r5, r4, r0
 800a616:	42be      	cmp	r6, r7
 800a618:	fa21 f40c 	lsr.w	r4, r1, ip
 800a61c:	ea45 0504 	orr.w	r5, r5, r4
 800a620:	bf8c      	ite	hi
 800a622:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a626:	2400      	movls	r4, #0
 800a628:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a62c:	fa01 f000 	lsl.w	r0, r1, r0
 800a630:	fa24 f40c 	lsr.w	r4, r4, ip
 800a634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a638:	ea40 0204 	orr.w	r2, r0, r4
 800a63c:	e7db      	b.n	800a5f6 <__b2d+0x4a>
 800a63e:	ea44 030c 	orr.w	r3, r4, ip
 800a642:	460a      	mov	r2, r1
 800a644:	e7d7      	b.n	800a5f6 <__b2d+0x4a>
 800a646:	bf00      	nop
 800a648:	3ff00000 	.word	0x3ff00000

0800a64c <__d2b>:
 800a64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a650:	4689      	mov	r9, r1
 800a652:	2101      	movs	r1, #1
 800a654:	ec57 6b10 	vmov	r6, r7, d0
 800a658:	4690      	mov	r8, r2
 800a65a:	f7ff fc09 	bl	8009e70 <_Balloc>
 800a65e:	4604      	mov	r4, r0
 800a660:	b930      	cbnz	r0, 800a670 <__d2b+0x24>
 800a662:	4602      	mov	r2, r0
 800a664:	4b25      	ldr	r3, [pc, #148]	; (800a6fc <__d2b+0xb0>)
 800a666:	4826      	ldr	r0, [pc, #152]	; (800a700 <__d2b+0xb4>)
 800a668:	f240 310a 	movw	r1, #778	; 0x30a
 800a66c:	f000 fb4e 	bl	800ad0c <__assert_func>
 800a670:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a678:	bb35      	cbnz	r5, 800a6c8 <__d2b+0x7c>
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	d028      	beq.n	800a6d2 <__d2b+0x86>
 800a680:	4668      	mov	r0, sp
 800a682:	9600      	str	r6, [sp, #0]
 800a684:	f7ff fd06 	bl	800a094 <__lo0bits>
 800a688:	9900      	ldr	r1, [sp, #0]
 800a68a:	b300      	cbz	r0, 800a6ce <__d2b+0x82>
 800a68c:	9a01      	ldr	r2, [sp, #4]
 800a68e:	f1c0 0320 	rsb	r3, r0, #32
 800a692:	fa02 f303 	lsl.w	r3, r2, r3
 800a696:	430b      	orrs	r3, r1
 800a698:	40c2      	lsrs	r2, r0
 800a69a:	6163      	str	r3, [r4, #20]
 800a69c:	9201      	str	r2, [sp, #4]
 800a69e:	9b01      	ldr	r3, [sp, #4]
 800a6a0:	61a3      	str	r3, [r4, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	bf14      	ite	ne
 800a6a6:	2202      	movne	r2, #2
 800a6a8:	2201      	moveq	r2, #1
 800a6aa:	6122      	str	r2, [r4, #16]
 800a6ac:	b1d5      	cbz	r5, 800a6e4 <__d2b+0x98>
 800a6ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6b2:	4405      	add	r5, r0
 800a6b4:	f8c9 5000 	str.w	r5, [r9]
 800a6b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6bc:	f8c8 0000 	str.w	r0, [r8]
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	b003      	add	sp, #12
 800a6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6cc:	e7d5      	b.n	800a67a <__d2b+0x2e>
 800a6ce:	6161      	str	r1, [r4, #20]
 800a6d0:	e7e5      	b.n	800a69e <__d2b+0x52>
 800a6d2:	a801      	add	r0, sp, #4
 800a6d4:	f7ff fcde 	bl	800a094 <__lo0bits>
 800a6d8:	9b01      	ldr	r3, [sp, #4]
 800a6da:	6163      	str	r3, [r4, #20]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	6122      	str	r2, [r4, #16]
 800a6e0:	3020      	adds	r0, #32
 800a6e2:	e7e3      	b.n	800a6ac <__d2b+0x60>
 800a6e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6ec:	f8c9 0000 	str.w	r0, [r9]
 800a6f0:	6918      	ldr	r0, [r3, #16]
 800a6f2:	f7ff fcaf 	bl	800a054 <__hi0bits>
 800a6f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6fa:	e7df      	b.n	800a6bc <__d2b+0x70>
 800a6fc:	0800ba20 	.word	0x0800ba20
 800a700:	0800baac 	.word	0x0800baac

0800a704 <__ratio>:
 800a704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4688      	mov	r8, r1
 800a70a:	4669      	mov	r1, sp
 800a70c:	4681      	mov	r9, r0
 800a70e:	f7ff ff4d 	bl	800a5ac <__b2d>
 800a712:	a901      	add	r1, sp, #4
 800a714:	4640      	mov	r0, r8
 800a716:	ec55 4b10 	vmov	r4, r5, d0
 800a71a:	f7ff ff47 	bl	800a5ac <__b2d>
 800a71e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a722:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a726:	eba3 0c02 	sub.w	ip, r3, r2
 800a72a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a734:	ec51 0b10 	vmov	r0, r1, d0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bfd6      	itet	le
 800a73c:	460a      	movle	r2, r1
 800a73e:	462a      	movgt	r2, r5
 800a740:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a744:	468b      	mov	fp, r1
 800a746:	462f      	mov	r7, r5
 800a748:	bfd4      	ite	le
 800a74a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a74e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a752:	4620      	mov	r0, r4
 800a754:	ee10 2a10 	vmov	r2, s0
 800a758:	465b      	mov	r3, fp
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f6 f896 	bl	800088c <__aeabi_ddiv>
 800a760:	ec41 0b10 	vmov	d0, r0, r1
 800a764:	b003      	add	sp, #12
 800a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a76a <__copybits>:
 800a76a:	3901      	subs	r1, #1
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	1149      	asrs	r1, r1, #5
 800a770:	6914      	ldr	r4, [r2, #16]
 800a772:	3101      	adds	r1, #1
 800a774:	f102 0314 	add.w	r3, r2, #20
 800a778:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a77c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a780:	1f05      	subs	r5, r0, #4
 800a782:	42a3      	cmp	r3, r4
 800a784:	d30c      	bcc.n	800a7a0 <__copybits+0x36>
 800a786:	1aa3      	subs	r3, r4, r2
 800a788:	3b11      	subs	r3, #17
 800a78a:	f023 0303 	bic.w	r3, r3, #3
 800a78e:	3211      	adds	r2, #17
 800a790:	42a2      	cmp	r2, r4
 800a792:	bf88      	it	hi
 800a794:	2300      	movhi	r3, #0
 800a796:	4418      	add	r0, r3
 800a798:	2300      	movs	r3, #0
 800a79a:	4288      	cmp	r0, r1
 800a79c:	d305      	bcc.n	800a7aa <__copybits+0x40>
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7a8:	e7eb      	b.n	800a782 <__copybits+0x18>
 800a7aa:	f840 3b04 	str.w	r3, [r0], #4
 800a7ae:	e7f4      	b.n	800a79a <__copybits+0x30>

0800a7b0 <__any_on>:
 800a7b0:	f100 0214 	add.w	r2, r0, #20
 800a7b4:	6900      	ldr	r0, [r0, #16]
 800a7b6:	114b      	asrs	r3, r1, #5
 800a7b8:	4298      	cmp	r0, r3
 800a7ba:	b510      	push	{r4, lr}
 800a7bc:	db11      	blt.n	800a7e2 <__any_on+0x32>
 800a7be:	dd0a      	ble.n	800a7d6 <__any_on+0x26>
 800a7c0:	f011 011f 	ands.w	r1, r1, #31
 800a7c4:	d007      	beq.n	800a7d6 <__any_on+0x26>
 800a7c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7ca:	fa24 f001 	lsr.w	r0, r4, r1
 800a7ce:	fa00 f101 	lsl.w	r1, r0, r1
 800a7d2:	428c      	cmp	r4, r1
 800a7d4:	d10b      	bne.n	800a7ee <__any_on+0x3e>
 800a7d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d803      	bhi.n	800a7e6 <__any_on+0x36>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	bd10      	pop	{r4, pc}
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	e7f7      	b.n	800a7d6 <__any_on+0x26>
 800a7e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	d0f5      	beq.n	800a7da <__any_on+0x2a>
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	e7f6      	b.n	800a7e0 <__any_on+0x30>

0800a7f2 <_calloc_r>:
 800a7f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7f4:	fba1 2402 	umull	r2, r4, r1, r2
 800a7f8:	b94c      	cbnz	r4, 800a80e <_calloc_r+0x1c>
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	9201      	str	r2, [sp, #4]
 800a7fe:	f000 f87b 	bl	800a8f8 <_malloc_r>
 800a802:	9a01      	ldr	r2, [sp, #4]
 800a804:	4605      	mov	r5, r0
 800a806:	b930      	cbnz	r0, 800a816 <_calloc_r+0x24>
 800a808:	4628      	mov	r0, r5
 800a80a:	b003      	add	sp, #12
 800a80c:	bd30      	pop	{r4, r5, pc}
 800a80e:	220c      	movs	r2, #12
 800a810:	6002      	str	r2, [r0, #0]
 800a812:	2500      	movs	r5, #0
 800a814:	e7f8      	b.n	800a808 <_calloc_r+0x16>
 800a816:	4621      	mov	r1, r4
 800a818:	f7fc fb32 	bl	8006e80 <memset>
 800a81c:	e7f4      	b.n	800a808 <_calloc_r+0x16>
	...

0800a820 <_free_r>:
 800a820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a822:	2900      	cmp	r1, #0
 800a824:	d044      	beq.n	800a8b0 <_free_r+0x90>
 800a826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a82a:	9001      	str	r0, [sp, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f1a1 0404 	sub.w	r4, r1, #4
 800a832:	bfb8      	it	lt
 800a834:	18e4      	addlt	r4, r4, r3
 800a836:	f000 fc6d 	bl	800b114 <__malloc_lock>
 800a83a:	4a1e      	ldr	r2, [pc, #120]	; (800a8b4 <_free_r+0x94>)
 800a83c:	9801      	ldr	r0, [sp, #4]
 800a83e:	6813      	ldr	r3, [r2, #0]
 800a840:	b933      	cbnz	r3, 800a850 <_free_r+0x30>
 800a842:	6063      	str	r3, [r4, #4]
 800a844:	6014      	str	r4, [r2, #0]
 800a846:	b003      	add	sp, #12
 800a848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a84c:	f000 bc68 	b.w	800b120 <__malloc_unlock>
 800a850:	42a3      	cmp	r3, r4
 800a852:	d908      	bls.n	800a866 <_free_r+0x46>
 800a854:	6825      	ldr	r5, [r4, #0]
 800a856:	1961      	adds	r1, r4, r5
 800a858:	428b      	cmp	r3, r1
 800a85a:	bf01      	itttt	eq
 800a85c:	6819      	ldreq	r1, [r3, #0]
 800a85e:	685b      	ldreq	r3, [r3, #4]
 800a860:	1949      	addeq	r1, r1, r5
 800a862:	6021      	streq	r1, [r4, #0]
 800a864:	e7ed      	b.n	800a842 <_free_r+0x22>
 800a866:	461a      	mov	r2, r3
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	b10b      	cbz	r3, 800a870 <_free_r+0x50>
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	d9fa      	bls.n	800a866 <_free_r+0x46>
 800a870:	6811      	ldr	r1, [r2, #0]
 800a872:	1855      	adds	r5, r2, r1
 800a874:	42a5      	cmp	r5, r4
 800a876:	d10b      	bne.n	800a890 <_free_r+0x70>
 800a878:	6824      	ldr	r4, [r4, #0]
 800a87a:	4421      	add	r1, r4
 800a87c:	1854      	adds	r4, r2, r1
 800a87e:	42a3      	cmp	r3, r4
 800a880:	6011      	str	r1, [r2, #0]
 800a882:	d1e0      	bne.n	800a846 <_free_r+0x26>
 800a884:	681c      	ldr	r4, [r3, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	6053      	str	r3, [r2, #4]
 800a88a:	4421      	add	r1, r4
 800a88c:	6011      	str	r1, [r2, #0]
 800a88e:	e7da      	b.n	800a846 <_free_r+0x26>
 800a890:	d902      	bls.n	800a898 <_free_r+0x78>
 800a892:	230c      	movs	r3, #12
 800a894:	6003      	str	r3, [r0, #0]
 800a896:	e7d6      	b.n	800a846 <_free_r+0x26>
 800a898:	6825      	ldr	r5, [r4, #0]
 800a89a:	1961      	adds	r1, r4, r5
 800a89c:	428b      	cmp	r3, r1
 800a89e:	bf04      	itt	eq
 800a8a0:	6819      	ldreq	r1, [r3, #0]
 800a8a2:	685b      	ldreq	r3, [r3, #4]
 800a8a4:	6063      	str	r3, [r4, #4]
 800a8a6:	bf04      	itt	eq
 800a8a8:	1949      	addeq	r1, r1, r5
 800a8aa:	6021      	streq	r1, [r4, #0]
 800a8ac:	6054      	str	r4, [r2, #4]
 800a8ae:	e7ca      	b.n	800a846 <_free_r+0x26>
 800a8b0:	b003      	add	sp, #12
 800a8b2:	bd30      	pop	{r4, r5, pc}
 800a8b4:	20000980 	.word	0x20000980

0800a8b8 <sbrk_aligned>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	4e0e      	ldr	r6, [pc, #56]	; (800a8f4 <sbrk_aligned+0x3c>)
 800a8bc:	460c      	mov	r4, r1
 800a8be:	6831      	ldr	r1, [r6, #0]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	b911      	cbnz	r1, 800a8ca <sbrk_aligned+0x12>
 800a8c4:	f000 fa04 	bl	800acd0 <_sbrk_r>
 800a8c8:	6030      	str	r0, [r6, #0]
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f000 f9ff 	bl	800acd0 <_sbrk_r>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	d00a      	beq.n	800a8ec <sbrk_aligned+0x34>
 800a8d6:	1cc4      	adds	r4, r0, #3
 800a8d8:	f024 0403 	bic.w	r4, r4, #3
 800a8dc:	42a0      	cmp	r0, r4
 800a8de:	d007      	beq.n	800a8f0 <sbrk_aligned+0x38>
 800a8e0:	1a21      	subs	r1, r4, r0
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 f9f4 	bl	800acd0 <_sbrk_r>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d101      	bne.n	800a8f0 <sbrk_aligned+0x38>
 800a8ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	20000984 	.word	0x20000984

0800a8f8 <_malloc_r>:
 800a8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fc:	1ccd      	adds	r5, r1, #3
 800a8fe:	f025 0503 	bic.w	r5, r5, #3
 800a902:	3508      	adds	r5, #8
 800a904:	2d0c      	cmp	r5, #12
 800a906:	bf38      	it	cc
 800a908:	250c      	movcc	r5, #12
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	4607      	mov	r7, r0
 800a90e:	db01      	blt.n	800a914 <_malloc_r+0x1c>
 800a910:	42a9      	cmp	r1, r5
 800a912:	d905      	bls.n	800a920 <_malloc_r+0x28>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	2600      	movs	r6, #0
 800a91a:	4630      	mov	r0, r6
 800a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a920:	4e2e      	ldr	r6, [pc, #184]	; (800a9dc <_malloc_r+0xe4>)
 800a922:	f000 fbf7 	bl	800b114 <__malloc_lock>
 800a926:	6833      	ldr	r3, [r6, #0]
 800a928:	461c      	mov	r4, r3
 800a92a:	bb34      	cbnz	r4, 800a97a <_malloc_r+0x82>
 800a92c:	4629      	mov	r1, r5
 800a92e:	4638      	mov	r0, r7
 800a930:	f7ff ffc2 	bl	800a8b8 <sbrk_aligned>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	4604      	mov	r4, r0
 800a938:	d14d      	bne.n	800a9d6 <_malloc_r+0xde>
 800a93a:	6834      	ldr	r4, [r6, #0]
 800a93c:	4626      	mov	r6, r4
 800a93e:	2e00      	cmp	r6, #0
 800a940:	d140      	bne.n	800a9c4 <_malloc_r+0xcc>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	4631      	mov	r1, r6
 800a946:	4638      	mov	r0, r7
 800a948:	eb04 0803 	add.w	r8, r4, r3
 800a94c:	f000 f9c0 	bl	800acd0 <_sbrk_r>
 800a950:	4580      	cmp	r8, r0
 800a952:	d13a      	bne.n	800a9ca <_malloc_r+0xd2>
 800a954:	6821      	ldr	r1, [r4, #0]
 800a956:	3503      	adds	r5, #3
 800a958:	1a6d      	subs	r5, r5, r1
 800a95a:	f025 0503 	bic.w	r5, r5, #3
 800a95e:	3508      	adds	r5, #8
 800a960:	2d0c      	cmp	r5, #12
 800a962:	bf38      	it	cc
 800a964:	250c      	movcc	r5, #12
 800a966:	4629      	mov	r1, r5
 800a968:	4638      	mov	r0, r7
 800a96a:	f7ff ffa5 	bl	800a8b8 <sbrk_aligned>
 800a96e:	3001      	adds	r0, #1
 800a970:	d02b      	beq.n	800a9ca <_malloc_r+0xd2>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	442b      	add	r3, r5
 800a976:	6023      	str	r3, [r4, #0]
 800a978:	e00e      	b.n	800a998 <_malloc_r+0xa0>
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	1b52      	subs	r2, r2, r5
 800a97e:	d41e      	bmi.n	800a9be <_malloc_r+0xc6>
 800a980:	2a0b      	cmp	r2, #11
 800a982:	d916      	bls.n	800a9b2 <_malloc_r+0xba>
 800a984:	1961      	adds	r1, r4, r5
 800a986:	42a3      	cmp	r3, r4
 800a988:	6025      	str	r5, [r4, #0]
 800a98a:	bf18      	it	ne
 800a98c:	6059      	strne	r1, [r3, #4]
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	bf08      	it	eq
 800a992:	6031      	streq	r1, [r6, #0]
 800a994:	5162      	str	r2, [r4, r5]
 800a996:	604b      	str	r3, [r1, #4]
 800a998:	4638      	mov	r0, r7
 800a99a:	f104 060b 	add.w	r6, r4, #11
 800a99e:	f000 fbbf 	bl	800b120 <__malloc_unlock>
 800a9a2:	f026 0607 	bic.w	r6, r6, #7
 800a9a6:	1d23      	adds	r3, r4, #4
 800a9a8:	1af2      	subs	r2, r6, r3
 800a9aa:	d0b6      	beq.n	800a91a <_malloc_r+0x22>
 800a9ac:	1b9b      	subs	r3, r3, r6
 800a9ae:	50a3      	str	r3, [r4, r2]
 800a9b0:	e7b3      	b.n	800a91a <_malloc_r+0x22>
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	bf0c      	ite	eq
 800a9b8:	6032      	streq	r2, [r6, #0]
 800a9ba:	605a      	strne	r2, [r3, #4]
 800a9bc:	e7ec      	b.n	800a998 <_malloc_r+0xa0>
 800a9be:	4623      	mov	r3, r4
 800a9c0:	6864      	ldr	r4, [r4, #4]
 800a9c2:	e7b2      	b.n	800a92a <_malloc_r+0x32>
 800a9c4:	4634      	mov	r4, r6
 800a9c6:	6876      	ldr	r6, [r6, #4]
 800a9c8:	e7b9      	b.n	800a93e <_malloc_r+0x46>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	603b      	str	r3, [r7, #0]
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f000 fba6 	bl	800b120 <__malloc_unlock>
 800a9d4:	e7a1      	b.n	800a91a <_malloc_r+0x22>
 800a9d6:	6025      	str	r5, [r4, #0]
 800a9d8:	e7de      	b.n	800a998 <_malloc_r+0xa0>
 800a9da:	bf00      	nop
 800a9dc:	20000980 	.word	0x20000980

0800a9e0 <__ssputs_r>:
 800a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	688e      	ldr	r6, [r1, #8]
 800a9e6:	429e      	cmp	r6, r3
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	461f      	mov	r7, r3
 800a9f0:	d838      	bhi.n	800aa64 <__ssputs_r+0x84>
 800a9f2:	898a      	ldrh	r2, [r1, #12]
 800a9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9f8:	d032      	beq.n	800aa60 <__ssputs_r+0x80>
 800a9fa:	6825      	ldr	r5, [r4, #0]
 800a9fc:	6909      	ldr	r1, [r1, #16]
 800a9fe:	eba5 0901 	sub.w	r9, r5, r1
 800aa02:	6965      	ldr	r5, [r4, #20]
 800aa04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	444b      	add	r3, r9
 800aa10:	106d      	asrs	r5, r5, #1
 800aa12:	429d      	cmp	r5, r3
 800aa14:	bf38      	it	cc
 800aa16:	461d      	movcc	r5, r3
 800aa18:	0553      	lsls	r3, r2, #21
 800aa1a:	d531      	bpl.n	800aa80 <__ssputs_r+0xa0>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7ff ff6b 	bl	800a8f8 <_malloc_r>
 800aa22:	4606      	mov	r6, r0
 800aa24:	b950      	cbnz	r0, 800aa3c <__ssputs_r+0x5c>
 800aa26:	230c      	movs	r3, #12
 800aa28:	f8ca 3000 	str.w	r3, [sl]
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3c:	6921      	ldr	r1, [r4, #16]
 800aa3e:	464a      	mov	r2, r9
 800aa40:	f7ff fa08 	bl	8009e54 <memcpy>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	6126      	str	r6, [r4, #16]
 800aa52:	6165      	str	r5, [r4, #20]
 800aa54:	444e      	add	r6, r9
 800aa56:	eba5 0509 	sub.w	r5, r5, r9
 800aa5a:	6026      	str	r6, [r4, #0]
 800aa5c:	60a5      	str	r5, [r4, #8]
 800aa5e:	463e      	mov	r6, r7
 800aa60:	42be      	cmp	r6, r7
 800aa62:	d900      	bls.n	800aa66 <__ssputs_r+0x86>
 800aa64:	463e      	mov	r6, r7
 800aa66:	6820      	ldr	r0, [r4, #0]
 800aa68:	4632      	mov	r2, r6
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	f000 fb38 	bl	800b0e0 <memmove>
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	1b9b      	subs	r3, r3, r6
 800aa74:	60a3      	str	r3, [r4, #8]
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	4433      	add	r3, r6
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e7db      	b.n	800aa38 <__ssputs_r+0x58>
 800aa80:	462a      	mov	r2, r5
 800aa82:	f000 fb53 	bl	800b12c <_realloc_r>
 800aa86:	4606      	mov	r6, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1e1      	bne.n	800aa50 <__ssputs_r+0x70>
 800aa8c:	6921      	ldr	r1, [r4, #16]
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f7ff fec6 	bl	800a820 <_free_r>
 800aa94:	e7c7      	b.n	800aa26 <__ssputs_r+0x46>
	...

0800aa98 <_svfiprintf_r>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	4698      	mov	r8, r3
 800aa9e:	898b      	ldrh	r3, [r1, #12]
 800aaa0:	061b      	lsls	r3, r3, #24
 800aaa2:	b09d      	sub	sp, #116	; 0x74
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	d50e      	bpl.n	800aaca <_svfiprintf_r+0x32>
 800aaac:	690b      	ldr	r3, [r1, #16]
 800aaae:	b963      	cbnz	r3, 800aaca <_svfiprintf_r+0x32>
 800aab0:	2140      	movs	r1, #64	; 0x40
 800aab2:	f7ff ff21 	bl	800a8f8 <_malloc_r>
 800aab6:	6028      	str	r0, [r5, #0]
 800aab8:	6128      	str	r0, [r5, #16]
 800aaba:	b920      	cbnz	r0, 800aac6 <_svfiprintf_r+0x2e>
 800aabc:	230c      	movs	r3, #12
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	e0d1      	b.n	800ac6a <_svfiprintf_r+0x1d2>
 800aac6:	2340      	movs	r3, #64	; 0x40
 800aac8:	616b      	str	r3, [r5, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9309      	str	r3, [sp, #36]	; 0x24
 800aace:	2320      	movs	r3, #32
 800aad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aad8:	2330      	movs	r3, #48	; 0x30
 800aada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac84 <_svfiprintf_r+0x1ec>
 800aade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aae2:	f04f 0901 	mov.w	r9, #1
 800aae6:	4623      	mov	r3, r4
 800aae8:	469a      	mov	sl, r3
 800aaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaee:	b10a      	cbz	r2, 800aaf4 <_svfiprintf_r+0x5c>
 800aaf0:	2a25      	cmp	r2, #37	; 0x25
 800aaf2:	d1f9      	bne.n	800aae8 <_svfiprintf_r+0x50>
 800aaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf8:	d00b      	beq.n	800ab12 <_svfiprintf_r+0x7a>
 800aafa:	465b      	mov	r3, fp
 800aafc:	4622      	mov	r2, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ff6d 	bl	800a9e0 <__ssputs_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	f000 80aa 	beq.w	800ac60 <_svfiprintf_r+0x1c8>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab0e:	445a      	add	r2, fp
 800ab10:	9209      	str	r2, [sp, #36]	; 0x24
 800ab12:	f89a 3000 	ldrb.w	r3, [sl]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80a2 	beq.w	800ac60 <_svfiprintf_r+0x1c8>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab26:	f10a 0a01 	add.w	sl, sl, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab32:	931a      	str	r3, [sp, #104]	; 0x68
 800ab34:	4654      	mov	r4, sl
 800ab36:	2205      	movs	r2, #5
 800ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3c:	4851      	ldr	r0, [pc, #324]	; (800ac84 <_svfiprintf_r+0x1ec>)
 800ab3e:	f7f5 fb6f 	bl	8000220 <memchr>
 800ab42:	9a04      	ldr	r2, [sp, #16]
 800ab44:	b9d8      	cbnz	r0, 800ab7e <_svfiprintf_r+0xe6>
 800ab46:	06d0      	lsls	r0, r2, #27
 800ab48:	bf44      	itt	mi
 800ab4a:	2320      	movmi	r3, #32
 800ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab50:	0711      	lsls	r1, r2, #28
 800ab52:	bf44      	itt	mi
 800ab54:	232b      	movmi	r3, #43	; 0x2b
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab60:	d015      	beq.n	800ab8e <_svfiprintf_r+0xf6>
 800ab62:	9a07      	ldr	r2, [sp, #28]
 800ab64:	4654      	mov	r4, sl
 800ab66:	2000      	movs	r0, #0
 800ab68:	f04f 0c0a 	mov.w	ip, #10
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab72:	3b30      	subs	r3, #48	; 0x30
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d94e      	bls.n	800ac16 <_svfiprintf_r+0x17e>
 800ab78:	b1b0      	cbz	r0, 800aba8 <_svfiprintf_r+0x110>
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	e014      	b.n	800aba8 <_svfiprintf_r+0x110>
 800ab7e:	eba0 0308 	sub.w	r3, r0, r8
 800ab82:	fa09 f303 	lsl.w	r3, r9, r3
 800ab86:	4313      	orrs	r3, r2
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	46a2      	mov	sl, r4
 800ab8c:	e7d2      	b.n	800ab34 <_svfiprintf_r+0x9c>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	1d19      	adds	r1, r3, #4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	9103      	str	r1, [sp, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfbb      	ittet	lt
 800ab9a:	425b      	neglt	r3, r3
 800ab9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aba0:	9307      	strge	r3, [sp, #28]
 800aba2:	9307      	strlt	r3, [sp, #28]
 800aba4:	bfb8      	it	lt
 800aba6:	9204      	strlt	r2, [sp, #16]
 800aba8:	7823      	ldrb	r3, [r4, #0]
 800abaa:	2b2e      	cmp	r3, #46	; 0x2e
 800abac:	d10c      	bne.n	800abc8 <_svfiprintf_r+0x130>
 800abae:	7863      	ldrb	r3, [r4, #1]
 800abb0:	2b2a      	cmp	r3, #42	; 0x2a
 800abb2:	d135      	bne.n	800ac20 <_svfiprintf_r+0x188>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	9203      	str	r2, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bfb8      	it	lt
 800abc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800abc4:	3402      	adds	r4, #2
 800abc6:	9305      	str	r3, [sp, #20]
 800abc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac94 <_svfiprintf_r+0x1fc>
 800abcc:	7821      	ldrb	r1, [r4, #0]
 800abce:	2203      	movs	r2, #3
 800abd0:	4650      	mov	r0, sl
 800abd2:	f7f5 fb25 	bl	8000220 <memchr>
 800abd6:	b140      	cbz	r0, 800abea <_svfiprintf_r+0x152>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	eba0 000a 	sub.w	r0, r0, sl
 800abde:	fa03 f000 	lsl.w	r0, r3, r0
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	4303      	orrs	r3, r0
 800abe6:	3401      	adds	r4, #1
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abee:	4826      	ldr	r0, [pc, #152]	; (800ac88 <_svfiprintf_r+0x1f0>)
 800abf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abf4:	2206      	movs	r2, #6
 800abf6:	f7f5 fb13 	bl	8000220 <memchr>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d038      	beq.n	800ac70 <_svfiprintf_r+0x1d8>
 800abfe:	4b23      	ldr	r3, [pc, #140]	; (800ac8c <_svfiprintf_r+0x1f4>)
 800ac00:	bb1b      	cbnz	r3, 800ac4a <_svfiprintf_r+0x1b2>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	3307      	adds	r3, #7
 800ac06:	f023 0307 	bic.w	r3, r3, #7
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac10:	4433      	add	r3, r6
 800ac12:	9309      	str	r3, [sp, #36]	; 0x24
 800ac14:	e767      	b.n	800aae6 <_svfiprintf_r+0x4e>
 800ac16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	e7a5      	b.n	800ab6c <_svfiprintf_r+0xd4>
 800ac20:	2300      	movs	r3, #0
 800ac22:	3401      	adds	r4, #1
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	4619      	mov	r1, r3
 800ac28:	f04f 0c0a 	mov.w	ip, #10
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac32:	3a30      	subs	r2, #48	; 0x30
 800ac34:	2a09      	cmp	r2, #9
 800ac36:	d903      	bls.n	800ac40 <_svfiprintf_r+0x1a8>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0c5      	beq.n	800abc8 <_svfiprintf_r+0x130>
 800ac3c:	9105      	str	r1, [sp, #20]
 800ac3e:	e7c3      	b.n	800abc8 <_svfiprintf_r+0x130>
 800ac40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac44:	4604      	mov	r4, r0
 800ac46:	2301      	movs	r3, #1
 800ac48:	e7f0      	b.n	800ac2c <_svfiprintf_r+0x194>
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4b0f      	ldr	r3, [pc, #60]	; (800ac90 <_svfiprintf_r+0x1f8>)
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7fc f9bb 	bl	8006fd0 <_printf_float>
 800ac5a:	1c42      	adds	r2, r0, #1
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	d1d6      	bne.n	800ac0e <_svfiprintf_r+0x176>
 800ac60:	89ab      	ldrh	r3, [r5, #12]
 800ac62:	065b      	lsls	r3, r3, #25
 800ac64:	f53f af2c 	bmi.w	800aac0 <_svfiprintf_r+0x28>
 800ac68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac6a:	b01d      	add	sp, #116	; 0x74
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	ab03      	add	r3, sp, #12
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	462a      	mov	r2, r5
 800ac76:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <_svfiprintf_r+0x1f8>)
 800ac78:	a904      	add	r1, sp, #16
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f7fc fc4c 	bl	8007518 <_printf_i>
 800ac80:	e7eb      	b.n	800ac5a <_svfiprintf_r+0x1c2>
 800ac82:	bf00      	nop
 800ac84:	0800bc04 	.word	0x0800bc04
 800ac88:	0800bc0e 	.word	0x0800bc0e
 800ac8c:	08006fd1 	.word	0x08006fd1
 800ac90:	0800a9e1 	.word	0x0800a9e1
 800ac94:	0800bc0a 	.word	0x0800bc0a

0800ac98 <_read_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d07      	ldr	r5, [pc, #28]	; (800acb8 <_read_r+0x20>)
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	4608      	mov	r0, r1
 800aca0:	4611      	mov	r1, r2
 800aca2:	2200      	movs	r2, #0
 800aca4:	602a      	str	r2, [r5, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	f7f7 fb12 	bl	80022d0 <_read>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d102      	bne.n	800acb6 <_read_r+0x1e>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b103      	cbz	r3, 800acb6 <_read_r+0x1e>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	20000988 	.word	0x20000988
 800acbc:	00000000 	.word	0x00000000

0800acc0 <nan>:
 800acc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800acc8 <nan+0x8>
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	00000000 	.word	0x00000000
 800accc:	7ff80000 	.word	0x7ff80000

0800acd0 <_sbrk_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	; (800acec <_sbrk_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f7 fb66 	bl	80023ac <_sbrk>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_sbrk_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_sbrk_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000988 	.word	0x20000988

0800acf0 <__ascii_wctomb>:
 800acf0:	b149      	cbz	r1, 800ad06 <__ascii_wctomb+0x16>
 800acf2:	2aff      	cmp	r2, #255	; 0xff
 800acf4:	bf85      	ittet	hi
 800acf6:	238a      	movhi	r3, #138	; 0x8a
 800acf8:	6003      	strhi	r3, [r0, #0]
 800acfa:	700a      	strbls	r2, [r1, #0]
 800acfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad00:	bf98      	it	ls
 800ad02:	2001      	movls	r0, #1
 800ad04:	4770      	bx	lr
 800ad06:	4608      	mov	r0, r1
 800ad08:	4770      	bx	lr
	...

0800ad0c <__assert_func>:
 800ad0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad0e:	4614      	mov	r4, r2
 800ad10:	461a      	mov	r2, r3
 800ad12:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <__assert_func+0x2c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4605      	mov	r5, r0
 800ad18:	68d8      	ldr	r0, [r3, #12]
 800ad1a:	b14c      	cbz	r4, 800ad30 <__assert_func+0x24>
 800ad1c:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <__assert_func+0x30>)
 800ad1e:	9100      	str	r1, [sp, #0]
 800ad20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad24:	4906      	ldr	r1, [pc, #24]	; (800ad40 <__assert_func+0x34>)
 800ad26:	462b      	mov	r3, r5
 800ad28:	f000 f9a6 	bl	800b078 <fiprintf>
 800ad2c:	f000 fc46 	bl	800b5bc <abort>
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <__assert_func+0x38>)
 800ad32:	461c      	mov	r4, r3
 800ad34:	e7f3      	b.n	800ad1e <__assert_func+0x12>
 800ad36:	bf00      	nop
 800ad38:	2000000c 	.word	0x2000000c
 800ad3c:	0800bc15 	.word	0x0800bc15
 800ad40:	0800bc22 	.word	0x0800bc22
 800ad44:	0800bc50 	.word	0x0800bc50

0800ad48 <__sflush_r>:
 800ad48:	898a      	ldrh	r2, [r1, #12]
 800ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4e:	4605      	mov	r5, r0
 800ad50:	0710      	lsls	r0, r2, #28
 800ad52:	460c      	mov	r4, r1
 800ad54:	d458      	bmi.n	800ae08 <__sflush_r+0xc0>
 800ad56:	684b      	ldr	r3, [r1, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dc05      	bgt.n	800ad68 <__sflush_r+0x20>
 800ad5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dc02      	bgt.n	800ad68 <__sflush_r+0x20>
 800ad62:	2000      	movs	r0, #0
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	d0f9      	beq.n	800ad62 <__sflush_r+0x1a>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad74:	682f      	ldr	r7, [r5, #0]
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	d032      	beq.n	800ade0 <__sflush_r+0x98>
 800ad7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	075a      	lsls	r2, r3, #29
 800ad80:	d505      	bpl.n	800ad8e <__sflush_r+0x46>
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	1ac0      	subs	r0, r0, r3
 800ad86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad88:	b10b      	cbz	r3, 800ad8e <__sflush_r+0x46>
 800ad8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	2300      	movs	r3, #0
 800ad90:	4602      	mov	r2, r0
 800ad92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	4628      	mov	r0, r5
 800ad98:	47b0      	blx	r6
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	d106      	bne.n	800adae <__sflush_r+0x66>
 800ada0:	6829      	ldr	r1, [r5, #0]
 800ada2:	291d      	cmp	r1, #29
 800ada4:	d82c      	bhi.n	800ae00 <__sflush_r+0xb8>
 800ada6:	4a2a      	ldr	r2, [pc, #168]	; (800ae50 <__sflush_r+0x108>)
 800ada8:	40ca      	lsrs	r2, r1
 800adaa:	07d6      	lsls	r6, r2, #31
 800adac:	d528      	bpl.n	800ae00 <__sflush_r+0xb8>
 800adae:	2200      	movs	r2, #0
 800adb0:	6062      	str	r2, [r4, #4]
 800adb2:	04d9      	lsls	r1, r3, #19
 800adb4:	6922      	ldr	r2, [r4, #16]
 800adb6:	6022      	str	r2, [r4, #0]
 800adb8:	d504      	bpl.n	800adc4 <__sflush_r+0x7c>
 800adba:	1c42      	adds	r2, r0, #1
 800adbc:	d101      	bne.n	800adc2 <__sflush_r+0x7a>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b903      	cbnz	r3, 800adc4 <__sflush_r+0x7c>
 800adc2:	6560      	str	r0, [r4, #84]	; 0x54
 800adc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc6:	602f      	str	r7, [r5, #0]
 800adc8:	2900      	cmp	r1, #0
 800adca:	d0ca      	beq.n	800ad62 <__sflush_r+0x1a>
 800adcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800add0:	4299      	cmp	r1, r3
 800add2:	d002      	beq.n	800adda <__sflush_r+0x92>
 800add4:	4628      	mov	r0, r5
 800add6:	f7ff fd23 	bl	800a820 <_free_r>
 800adda:	2000      	movs	r0, #0
 800addc:	6360      	str	r0, [r4, #52]	; 0x34
 800adde:	e7c1      	b.n	800ad64 <__sflush_r+0x1c>
 800ade0:	6a21      	ldr	r1, [r4, #32]
 800ade2:	2301      	movs	r3, #1
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b0      	blx	r6
 800ade8:	1c41      	adds	r1, r0, #1
 800adea:	d1c7      	bne.n	800ad7c <__sflush_r+0x34>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0c4      	beq.n	800ad7c <__sflush_r+0x34>
 800adf2:	2b1d      	cmp	r3, #29
 800adf4:	d001      	beq.n	800adfa <__sflush_r+0xb2>
 800adf6:	2b16      	cmp	r3, #22
 800adf8:	d101      	bne.n	800adfe <__sflush_r+0xb6>
 800adfa:	602f      	str	r7, [r5, #0]
 800adfc:	e7b1      	b.n	800ad62 <__sflush_r+0x1a>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae04:	81a3      	strh	r3, [r4, #12]
 800ae06:	e7ad      	b.n	800ad64 <__sflush_r+0x1c>
 800ae08:	690f      	ldr	r7, [r1, #16]
 800ae0a:	2f00      	cmp	r7, #0
 800ae0c:	d0a9      	beq.n	800ad62 <__sflush_r+0x1a>
 800ae0e:	0793      	lsls	r3, r2, #30
 800ae10:	680e      	ldr	r6, [r1, #0]
 800ae12:	bf08      	it	eq
 800ae14:	694b      	ldreq	r3, [r1, #20]
 800ae16:	600f      	str	r7, [r1, #0]
 800ae18:	bf18      	it	ne
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	eba6 0807 	sub.w	r8, r6, r7
 800ae20:	608b      	str	r3, [r1, #8]
 800ae22:	f1b8 0f00 	cmp.w	r8, #0
 800ae26:	dd9c      	ble.n	800ad62 <__sflush_r+0x1a>
 800ae28:	6a21      	ldr	r1, [r4, #32]
 800ae2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae2c:	4643      	mov	r3, r8
 800ae2e:	463a      	mov	r2, r7
 800ae30:	4628      	mov	r0, r5
 800ae32:	47b0      	blx	r6
 800ae34:	2800      	cmp	r0, #0
 800ae36:	dc06      	bgt.n	800ae46 <__sflush_r+0xfe>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	e78e      	b.n	800ad64 <__sflush_r+0x1c>
 800ae46:	4407      	add	r7, r0
 800ae48:	eba8 0800 	sub.w	r8, r8, r0
 800ae4c:	e7e9      	b.n	800ae22 <__sflush_r+0xda>
 800ae4e:	bf00      	nop
 800ae50:	20400001 	.word	0x20400001

0800ae54 <_fflush_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	690b      	ldr	r3, [r1, #16]
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	b913      	cbnz	r3, 800ae64 <_fflush_r+0x10>
 800ae5e:	2500      	movs	r5, #0
 800ae60:	4628      	mov	r0, r5
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	b118      	cbz	r0, 800ae6e <_fflush_r+0x1a>
 800ae66:	6983      	ldr	r3, [r0, #24]
 800ae68:	b90b      	cbnz	r3, 800ae6e <_fflush_r+0x1a>
 800ae6a:	f000 f887 	bl	800af7c <__sinit>
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <_fflush_r+0x6c>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	d11b      	bne.n	800aeac <_fflush_r+0x58>
 800ae74:	686c      	ldr	r4, [r5, #4]
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0ef      	beq.n	800ae5e <_fflush_r+0xa>
 800ae7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae80:	07d0      	lsls	r0, r2, #31
 800ae82:	d404      	bmi.n	800ae8e <_fflush_r+0x3a>
 800ae84:	0599      	lsls	r1, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_fflush_r+0x3a>
 800ae88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8a:	f000 f927 	bl	800b0dc <__retarget_lock_acquire_recursive>
 800ae8e:	4628      	mov	r0, r5
 800ae90:	4621      	mov	r1, r4
 800ae92:	f7ff ff59 	bl	800ad48 <__sflush_r>
 800ae96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae98:	07da      	lsls	r2, r3, #31
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	d4e0      	bmi.n	800ae60 <_fflush_r+0xc>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	059b      	lsls	r3, r3, #22
 800aea2:	d4dd      	bmi.n	800ae60 <_fflush_r+0xc>
 800aea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aea6:	f000 f91a 	bl	800b0de <__retarget_lock_release_recursive>
 800aeaa:	e7d9      	b.n	800ae60 <_fflush_r+0xc>
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <_fflush_r+0x70>)
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d101      	bne.n	800aeb6 <_fflush_r+0x62>
 800aeb2:	68ac      	ldr	r4, [r5, #8]
 800aeb4:	e7df      	b.n	800ae76 <_fflush_r+0x22>
 800aeb6:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <_fflush_r+0x74>)
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	bf08      	it	eq
 800aebc:	68ec      	ldreq	r4, [r5, #12]
 800aebe:	e7da      	b.n	800ae76 <_fflush_r+0x22>
 800aec0:	0800bc74 	.word	0x0800bc74
 800aec4:	0800bc94 	.word	0x0800bc94
 800aec8:	0800bc54 	.word	0x0800bc54

0800aecc <std>:
 800aecc:	2300      	movs	r3, #0
 800aece:	b510      	push	{r4, lr}
 800aed0:	4604      	mov	r4, r0
 800aed2:	e9c0 3300 	strd	r3, r3, [r0]
 800aed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeda:	6083      	str	r3, [r0, #8]
 800aedc:	8181      	strh	r1, [r0, #12]
 800aede:	6643      	str	r3, [r0, #100]	; 0x64
 800aee0:	81c2      	strh	r2, [r0, #14]
 800aee2:	6183      	str	r3, [r0, #24]
 800aee4:	4619      	mov	r1, r3
 800aee6:	2208      	movs	r2, #8
 800aee8:	305c      	adds	r0, #92	; 0x5c
 800aeea:	f7fb ffc9 	bl	8006e80 <memset>
 800aeee:	4b05      	ldr	r3, [pc, #20]	; (800af04 <std+0x38>)
 800aef0:	6263      	str	r3, [r4, #36]	; 0x24
 800aef2:	4b05      	ldr	r3, [pc, #20]	; (800af08 <std+0x3c>)
 800aef4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <std+0x40>)
 800aef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <std+0x44>)
 800aefc:	6224      	str	r4, [r4, #32]
 800aefe:	6323      	str	r3, [r4, #48]	; 0x30
 800af00:	bd10      	pop	{r4, pc}
 800af02:	bf00      	nop
 800af04:	08007bd1 	.word	0x08007bd1
 800af08:	08007bf3 	.word	0x08007bf3
 800af0c:	08007c2b 	.word	0x08007c2b
 800af10:	08007c4f 	.word	0x08007c4f

0800af14 <_cleanup_r>:
 800af14:	4901      	ldr	r1, [pc, #4]	; (800af1c <_cleanup_r+0x8>)
 800af16:	f000 b8c1 	b.w	800b09c <_fwalk_reent>
 800af1a:	bf00      	nop
 800af1c:	0800ae55 	.word	0x0800ae55

0800af20 <__sfmoreglue>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	2268      	movs	r2, #104	; 0x68
 800af24:	1e4d      	subs	r5, r1, #1
 800af26:	4355      	muls	r5, r2
 800af28:	460e      	mov	r6, r1
 800af2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af2e:	f7ff fce3 	bl	800a8f8 <_malloc_r>
 800af32:	4604      	mov	r4, r0
 800af34:	b140      	cbz	r0, 800af48 <__sfmoreglue+0x28>
 800af36:	2100      	movs	r1, #0
 800af38:	e9c0 1600 	strd	r1, r6, [r0]
 800af3c:	300c      	adds	r0, #12
 800af3e:	60a0      	str	r0, [r4, #8]
 800af40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af44:	f7fb ff9c 	bl	8006e80 <memset>
 800af48:	4620      	mov	r0, r4
 800af4a:	bd70      	pop	{r4, r5, r6, pc}

0800af4c <__sfp_lock_acquire>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sfp_lock_acquire+0x8>)
 800af4e:	f000 b8c5 	b.w	800b0dc <__retarget_lock_acquire_recursive>
 800af52:	bf00      	nop
 800af54:	2000098d 	.word	0x2000098d

0800af58 <__sfp_lock_release>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__sfp_lock_release+0x8>)
 800af5a:	f000 b8c0 	b.w	800b0de <__retarget_lock_release_recursive>
 800af5e:	bf00      	nop
 800af60:	2000098d 	.word	0x2000098d

0800af64 <__sinit_lock_acquire>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sinit_lock_acquire+0x8>)
 800af66:	f000 b8b9 	b.w	800b0dc <__retarget_lock_acquire_recursive>
 800af6a:	bf00      	nop
 800af6c:	2000098e 	.word	0x2000098e

0800af70 <__sinit_lock_release>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__sinit_lock_release+0x8>)
 800af72:	f000 b8b4 	b.w	800b0de <__retarget_lock_release_recursive>
 800af76:	bf00      	nop
 800af78:	2000098e 	.word	0x2000098e

0800af7c <__sinit>:
 800af7c:	b510      	push	{r4, lr}
 800af7e:	4604      	mov	r4, r0
 800af80:	f7ff fff0 	bl	800af64 <__sinit_lock_acquire>
 800af84:	69a3      	ldr	r3, [r4, #24]
 800af86:	b11b      	cbz	r3, 800af90 <__sinit+0x14>
 800af88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af8c:	f7ff bff0 	b.w	800af70 <__sinit_lock_release>
 800af90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af94:	6523      	str	r3, [r4, #80]	; 0x50
 800af96:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <__sinit+0x68>)
 800af98:	4a13      	ldr	r2, [pc, #76]	; (800afe8 <__sinit+0x6c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	bf04      	itt	eq
 800afa2:	2301      	moveq	r3, #1
 800afa4:	61a3      	streq	r3, [r4, #24]
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f820 	bl	800afec <__sfp>
 800afac:	6060      	str	r0, [r4, #4]
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 f81c 	bl	800afec <__sfp>
 800afb4:	60a0      	str	r0, [r4, #8]
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f818 	bl	800afec <__sfp>
 800afbc:	2200      	movs	r2, #0
 800afbe:	60e0      	str	r0, [r4, #12]
 800afc0:	2104      	movs	r1, #4
 800afc2:	6860      	ldr	r0, [r4, #4]
 800afc4:	f7ff ff82 	bl	800aecc <std>
 800afc8:	68a0      	ldr	r0, [r4, #8]
 800afca:	2201      	movs	r2, #1
 800afcc:	2109      	movs	r1, #9
 800afce:	f7ff ff7d 	bl	800aecc <std>
 800afd2:	68e0      	ldr	r0, [r4, #12]
 800afd4:	2202      	movs	r2, #2
 800afd6:	2112      	movs	r1, #18
 800afd8:	f7ff ff78 	bl	800aecc <std>
 800afdc:	2301      	movs	r3, #1
 800afde:	61a3      	str	r3, [r4, #24]
 800afe0:	e7d2      	b.n	800af88 <__sinit+0xc>
 800afe2:	bf00      	nop
 800afe4:	0800b80c 	.word	0x0800b80c
 800afe8:	0800af15 	.word	0x0800af15

0800afec <__sfp>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	4607      	mov	r7, r0
 800aff0:	f7ff ffac 	bl	800af4c <__sfp_lock_acquire>
 800aff4:	4b1e      	ldr	r3, [pc, #120]	; (800b070 <__sfp+0x84>)
 800aff6:	681e      	ldr	r6, [r3, #0]
 800aff8:	69b3      	ldr	r3, [r6, #24]
 800affa:	b913      	cbnz	r3, 800b002 <__sfp+0x16>
 800affc:	4630      	mov	r0, r6
 800affe:	f7ff ffbd 	bl	800af7c <__sinit>
 800b002:	3648      	adds	r6, #72	; 0x48
 800b004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b008:	3b01      	subs	r3, #1
 800b00a:	d503      	bpl.n	800b014 <__sfp+0x28>
 800b00c:	6833      	ldr	r3, [r6, #0]
 800b00e:	b30b      	cbz	r3, 800b054 <__sfp+0x68>
 800b010:	6836      	ldr	r6, [r6, #0]
 800b012:	e7f7      	b.n	800b004 <__sfp+0x18>
 800b014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b018:	b9d5      	cbnz	r5, 800b050 <__sfp+0x64>
 800b01a:	4b16      	ldr	r3, [pc, #88]	; (800b074 <__sfp+0x88>)
 800b01c:	60e3      	str	r3, [r4, #12]
 800b01e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b022:	6665      	str	r5, [r4, #100]	; 0x64
 800b024:	f000 f859 	bl	800b0da <__retarget_lock_init_recursive>
 800b028:	f7ff ff96 	bl	800af58 <__sfp_lock_release>
 800b02c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b034:	6025      	str	r5, [r4, #0]
 800b036:	61a5      	str	r5, [r4, #24]
 800b038:	2208      	movs	r2, #8
 800b03a:	4629      	mov	r1, r5
 800b03c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b040:	f7fb ff1e 	bl	8006e80 <memset>
 800b044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b04c:	4620      	mov	r0, r4
 800b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b050:	3468      	adds	r4, #104	; 0x68
 800b052:	e7d9      	b.n	800b008 <__sfp+0x1c>
 800b054:	2104      	movs	r1, #4
 800b056:	4638      	mov	r0, r7
 800b058:	f7ff ff62 	bl	800af20 <__sfmoreglue>
 800b05c:	4604      	mov	r4, r0
 800b05e:	6030      	str	r0, [r6, #0]
 800b060:	2800      	cmp	r0, #0
 800b062:	d1d5      	bne.n	800b010 <__sfp+0x24>
 800b064:	f7ff ff78 	bl	800af58 <__sfp_lock_release>
 800b068:	230c      	movs	r3, #12
 800b06a:	603b      	str	r3, [r7, #0]
 800b06c:	e7ee      	b.n	800b04c <__sfp+0x60>
 800b06e:	bf00      	nop
 800b070:	0800b80c 	.word	0x0800b80c
 800b074:	ffff0001 	.word	0xffff0001

0800b078 <fiprintf>:
 800b078:	b40e      	push	{r1, r2, r3}
 800b07a:	b503      	push	{r0, r1, lr}
 800b07c:	4601      	mov	r1, r0
 800b07e:	ab03      	add	r3, sp, #12
 800b080:	4805      	ldr	r0, [pc, #20]	; (800b098 <fiprintf+0x20>)
 800b082:	f853 2b04 	ldr.w	r2, [r3], #4
 800b086:	6800      	ldr	r0, [r0, #0]
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	f000 f8a7 	bl	800b1dc <_vfiprintf_r>
 800b08e:	b002      	add	sp, #8
 800b090:	f85d eb04 	ldr.w	lr, [sp], #4
 800b094:	b003      	add	sp, #12
 800b096:	4770      	bx	lr
 800b098:	2000000c 	.word	0x2000000c

0800b09c <_fwalk_reent>:
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	4688      	mov	r8, r1
 800b0a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0a8:	2700      	movs	r7, #0
 800b0aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0ae:	f1b9 0901 	subs.w	r9, r9, #1
 800b0b2:	d505      	bpl.n	800b0c0 <_fwalk_reent+0x24>
 800b0b4:	6824      	ldr	r4, [r4, #0]
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d1f7      	bne.n	800b0aa <_fwalk_reent+0xe>
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0c0:	89ab      	ldrh	r3, [r5, #12]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d907      	bls.n	800b0d6 <_fwalk_reent+0x3a>
 800b0c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	d003      	beq.n	800b0d6 <_fwalk_reent+0x3a>
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	47c0      	blx	r8
 800b0d4:	4307      	orrs	r7, r0
 800b0d6:	3568      	adds	r5, #104	; 0x68
 800b0d8:	e7e9      	b.n	800b0ae <_fwalk_reent+0x12>

0800b0da <__retarget_lock_init_recursive>:
 800b0da:	4770      	bx	lr

0800b0dc <__retarget_lock_acquire_recursive>:
 800b0dc:	4770      	bx	lr

0800b0de <__retarget_lock_release_recursive>:
 800b0de:	4770      	bx	lr

0800b0e0 <memmove>:
 800b0e0:	4288      	cmp	r0, r1
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	eb01 0402 	add.w	r4, r1, r2
 800b0e8:	d902      	bls.n	800b0f0 <memmove+0x10>
 800b0ea:	4284      	cmp	r4, r0
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	d807      	bhi.n	800b100 <memmove+0x20>
 800b0f0:	1e43      	subs	r3, r0, #1
 800b0f2:	42a1      	cmp	r1, r4
 800b0f4:	d008      	beq.n	800b108 <memmove+0x28>
 800b0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0fe:	e7f8      	b.n	800b0f2 <memmove+0x12>
 800b100:	4402      	add	r2, r0
 800b102:	4601      	mov	r1, r0
 800b104:	428a      	cmp	r2, r1
 800b106:	d100      	bne.n	800b10a <memmove+0x2a>
 800b108:	bd10      	pop	{r4, pc}
 800b10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b10e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b112:	e7f7      	b.n	800b104 <memmove+0x24>

0800b114 <__malloc_lock>:
 800b114:	4801      	ldr	r0, [pc, #4]	; (800b11c <__malloc_lock+0x8>)
 800b116:	f7ff bfe1 	b.w	800b0dc <__retarget_lock_acquire_recursive>
 800b11a:	bf00      	nop
 800b11c:	2000098c 	.word	0x2000098c

0800b120 <__malloc_unlock>:
 800b120:	4801      	ldr	r0, [pc, #4]	; (800b128 <__malloc_unlock+0x8>)
 800b122:	f7ff bfdc 	b.w	800b0de <__retarget_lock_release_recursive>
 800b126:	bf00      	nop
 800b128:	2000098c 	.word	0x2000098c

0800b12c <_realloc_r>:
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b130:	4680      	mov	r8, r0
 800b132:	4614      	mov	r4, r2
 800b134:	460e      	mov	r6, r1
 800b136:	b921      	cbnz	r1, 800b142 <_realloc_r+0x16>
 800b138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b13c:	4611      	mov	r1, r2
 800b13e:	f7ff bbdb 	b.w	800a8f8 <_malloc_r>
 800b142:	b92a      	cbnz	r2, 800b150 <_realloc_r+0x24>
 800b144:	f7ff fb6c 	bl	800a820 <_free_r>
 800b148:	4625      	mov	r5, r4
 800b14a:	4628      	mov	r0, r5
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	f000 faa0 	bl	800b694 <_malloc_usable_size_r>
 800b154:	4284      	cmp	r4, r0
 800b156:	4607      	mov	r7, r0
 800b158:	d802      	bhi.n	800b160 <_realloc_r+0x34>
 800b15a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b15e:	d812      	bhi.n	800b186 <_realloc_r+0x5a>
 800b160:	4621      	mov	r1, r4
 800b162:	4640      	mov	r0, r8
 800b164:	f7ff fbc8 	bl	800a8f8 <_malloc_r>
 800b168:	4605      	mov	r5, r0
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0ed      	beq.n	800b14a <_realloc_r+0x1e>
 800b16e:	42bc      	cmp	r4, r7
 800b170:	4622      	mov	r2, r4
 800b172:	4631      	mov	r1, r6
 800b174:	bf28      	it	cs
 800b176:	463a      	movcs	r2, r7
 800b178:	f7fe fe6c 	bl	8009e54 <memcpy>
 800b17c:	4631      	mov	r1, r6
 800b17e:	4640      	mov	r0, r8
 800b180:	f7ff fb4e 	bl	800a820 <_free_r>
 800b184:	e7e1      	b.n	800b14a <_realloc_r+0x1e>
 800b186:	4635      	mov	r5, r6
 800b188:	e7df      	b.n	800b14a <_realloc_r+0x1e>

0800b18a <__sfputc_r>:
 800b18a:	6893      	ldr	r3, [r2, #8]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	2b00      	cmp	r3, #0
 800b190:	b410      	push	{r4}
 800b192:	6093      	str	r3, [r2, #8]
 800b194:	da08      	bge.n	800b1a8 <__sfputc_r+0x1e>
 800b196:	6994      	ldr	r4, [r2, #24]
 800b198:	42a3      	cmp	r3, r4
 800b19a:	db01      	blt.n	800b1a0 <__sfputc_r+0x16>
 800b19c:	290a      	cmp	r1, #10
 800b19e:	d103      	bne.n	800b1a8 <__sfputc_r+0x1e>
 800b1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1a4:	f000 b94a 	b.w	800b43c <__swbuf_r>
 800b1a8:	6813      	ldr	r3, [r2, #0]
 800b1aa:	1c58      	adds	r0, r3, #1
 800b1ac:	6010      	str	r0, [r2, #0]
 800b1ae:	7019      	strb	r1, [r3, #0]
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <__sfputs_r>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	460f      	mov	r7, r1
 800b1be:	4614      	mov	r4, r2
 800b1c0:	18d5      	adds	r5, r2, r3
 800b1c2:	42ac      	cmp	r4, r5
 800b1c4:	d101      	bne.n	800b1ca <__sfputs_r+0x12>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e007      	b.n	800b1da <__sfputs_r+0x22>
 800b1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ce:	463a      	mov	r2, r7
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7ff ffda 	bl	800b18a <__sfputc_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d1f3      	bne.n	800b1c2 <__sfputs_r+0xa>
 800b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1dc <_vfiprintf_r>:
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	460d      	mov	r5, r1
 800b1e2:	b09d      	sub	sp, #116	; 0x74
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	4698      	mov	r8, r3
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	b118      	cbz	r0, 800b1f4 <_vfiprintf_r+0x18>
 800b1ec:	6983      	ldr	r3, [r0, #24]
 800b1ee:	b90b      	cbnz	r3, 800b1f4 <_vfiprintf_r+0x18>
 800b1f0:	f7ff fec4 	bl	800af7c <__sinit>
 800b1f4:	4b89      	ldr	r3, [pc, #548]	; (800b41c <_vfiprintf_r+0x240>)
 800b1f6:	429d      	cmp	r5, r3
 800b1f8:	d11b      	bne.n	800b232 <_vfiprintf_r+0x56>
 800b1fa:	6875      	ldr	r5, [r6, #4]
 800b1fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1fe:	07d9      	lsls	r1, r3, #31
 800b200:	d405      	bmi.n	800b20e <_vfiprintf_r+0x32>
 800b202:	89ab      	ldrh	r3, [r5, #12]
 800b204:	059a      	lsls	r2, r3, #22
 800b206:	d402      	bmi.n	800b20e <_vfiprintf_r+0x32>
 800b208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20a:	f7ff ff67 	bl	800b0dc <__retarget_lock_acquire_recursive>
 800b20e:	89ab      	ldrh	r3, [r5, #12]
 800b210:	071b      	lsls	r3, r3, #28
 800b212:	d501      	bpl.n	800b218 <_vfiprintf_r+0x3c>
 800b214:	692b      	ldr	r3, [r5, #16]
 800b216:	b9eb      	cbnz	r3, 800b254 <_vfiprintf_r+0x78>
 800b218:	4629      	mov	r1, r5
 800b21a:	4630      	mov	r0, r6
 800b21c:	f000 f960 	bl	800b4e0 <__swsetup_r>
 800b220:	b1c0      	cbz	r0, 800b254 <_vfiprintf_r+0x78>
 800b222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b224:	07dc      	lsls	r4, r3, #31
 800b226:	d50e      	bpl.n	800b246 <_vfiprintf_r+0x6a>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	b01d      	add	sp, #116	; 0x74
 800b22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b232:	4b7b      	ldr	r3, [pc, #492]	; (800b420 <_vfiprintf_r+0x244>)
 800b234:	429d      	cmp	r5, r3
 800b236:	d101      	bne.n	800b23c <_vfiprintf_r+0x60>
 800b238:	68b5      	ldr	r5, [r6, #8]
 800b23a:	e7df      	b.n	800b1fc <_vfiprintf_r+0x20>
 800b23c:	4b79      	ldr	r3, [pc, #484]	; (800b424 <_vfiprintf_r+0x248>)
 800b23e:	429d      	cmp	r5, r3
 800b240:	bf08      	it	eq
 800b242:	68f5      	ldreq	r5, [r6, #12]
 800b244:	e7da      	b.n	800b1fc <_vfiprintf_r+0x20>
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	0598      	lsls	r0, r3, #22
 800b24a:	d4ed      	bmi.n	800b228 <_vfiprintf_r+0x4c>
 800b24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24e:	f7ff ff46 	bl	800b0de <__retarget_lock_release_recursive>
 800b252:	e7e9      	b.n	800b228 <_vfiprintf_r+0x4c>
 800b254:	2300      	movs	r3, #0
 800b256:	9309      	str	r3, [sp, #36]	; 0x24
 800b258:	2320      	movs	r3, #32
 800b25a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b262:	2330      	movs	r3, #48	; 0x30
 800b264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b428 <_vfiprintf_r+0x24c>
 800b268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b26c:	f04f 0901 	mov.w	r9, #1
 800b270:	4623      	mov	r3, r4
 800b272:	469a      	mov	sl, r3
 800b274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b278:	b10a      	cbz	r2, 800b27e <_vfiprintf_r+0xa2>
 800b27a:	2a25      	cmp	r2, #37	; 0x25
 800b27c:	d1f9      	bne.n	800b272 <_vfiprintf_r+0x96>
 800b27e:	ebba 0b04 	subs.w	fp, sl, r4
 800b282:	d00b      	beq.n	800b29c <_vfiprintf_r+0xc0>
 800b284:	465b      	mov	r3, fp
 800b286:	4622      	mov	r2, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7ff ff94 	bl	800b1b8 <__sfputs_r>
 800b290:	3001      	adds	r0, #1
 800b292:	f000 80aa 	beq.w	800b3ea <_vfiprintf_r+0x20e>
 800b296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b298:	445a      	add	r2, fp
 800b29a:	9209      	str	r2, [sp, #36]	; 0x24
 800b29c:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 80a2 	beq.w	800b3ea <_vfiprintf_r+0x20e>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2b0:	f10a 0a01 	add.w	sl, sl, #1
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2be:	4654      	mov	r4, sl
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c6:	4858      	ldr	r0, [pc, #352]	; (800b428 <_vfiprintf_r+0x24c>)
 800b2c8:	f7f4 ffaa 	bl	8000220 <memchr>
 800b2cc:	9a04      	ldr	r2, [sp, #16]
 800b2ce:	b9d8      	cbnz	r0, 800b308 <_vfiprintf_r+0x12c>
 800b2d0:	06d1      	lsls	r1, r2, #27
 800b2d2:	bf44      	itt	mi
 800b2d4:	2320      	movmi	r3, #32
 800b2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2da:	0713      	lsls	r3, r2, #28
 800b2dc:	bf44      	itt	mi
 800b2de:	232b      	movmi	r3, #43	; 0x2b
 800b2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ea:	d015      	beq.n	800b318 <_vfiprintf_r+0x13c>
 800b2ec:	9a07      	ldr	r2, [sp, #28]
 800b2ee:	4654      	mov	r4, sl
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f04f 0c0a 	mov.w	ip, #10
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2fc:	3b30      	subs	r3, #48	; 0x30
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d94e      	bls.n	800b3a0 <_vfiprintf_r+0x1c4>
 800b302:	b1b0      	cbz	r0, 800b332 <_vfiprintf_r+0x156>
 800b304:	9207      	str	r2, [sp, #28]
 800b306:	e014      	b.n	800b332 <_vfiprintf_r+0x156>
 800b308:	eba0 0308 	sub.w	r3, r0, r8
 800b30c:	fa09 f303 	lsl.w	r3, r9, r3
 800b310:	4313      	orrs	r3, r2
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	46a2      	mov	sl, r4
 800b316:	e7d2      	b.n	800b2be <_vfiprintf_r+0xe2>
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	1d19      	adds	r1, r3, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	9103      	str	r1, [sp, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfbb      	ittet	lt
 800b324:	425b      	neglt	r3, r3
 800b326:	f042 0202 	orrlt.w	r2, r2, #2
 800b32a:	9307      	strge	r3, [sp, #28]
 800b32c:	9307      	strlt	r3, [sp, #28]
 800b32e:	bfb8      	it	lt
 800b330:	9204      	strlt	r2, [sp, #16]
 800b332:	7823      	ldrb	r3, [r4, #0]
 800b334:	2b2e      	cmp	r3, #46	; 0x2e
 800b336:	d10c      	bne.n	800b352 <_vfiprintf_r+0x176>
 800b338:	7863      	ldrb	r3, [r4, #1]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	d135      	bne.n	800b3aa <_vfiprintf_r+0x1ce>
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	1d1a      	adds	r2, r3, #4
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	9203      	str	r2, [sp, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfb8      	it	lt
 800b34a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b34e:	3402      	adds	r4, #2
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b438 <_vfiprintf_r+0x25c>
 800b356:	7821      	ldrb	r1, [r4, #0]
 800b358:	2203      	movs	r2, #3
 800b35a:	4650      	mov	r0, sl
 800b35c:	f7f4 ff60 	bl	8000220 <memchr>
 800b360:	b140      	cbz	r0, 800b374 <_vfiprintf_r+0x198>
 800b362:	2340      	movs	r3, #64	; 0x40
 800b364:	eba0 000a 	sub.w	r0, r0, sl
 800b368:	fa03 f000 	lsl.w	r0, r3, r0
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	4303      	orrs	r3, r0
 800b370:	3401      	adds	r4, #1
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b378:	482c      	ldr	r0, [pc, #176]	; (800b42c <_vfiprintf_r+0x250>)
 800b37a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b37e:	2206      	movs	r2, #6
 800b380:	f7f4 ff4e 	bl	8000220 <memchr>
 800b384:	2800      	cmp	r0, #0
 800b386:	d03f      	beq.n	800b408 <_vfiprintf_r+0x22c>
 800b388:	4b29      	ldr	r3, [pc, #164]	; (800b430 <_vfiprintf_r+0x254>)
 800b38a:	bb1b      	cbnz	r3, 800b3d4 <_vfiprintf_r+0x1f8>
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	3307      	adds	r3, #7
 800b390:	f023 0307 	bic.w	r3, r3, #7
 800b394:	3308      	adds	r3, #8
 800b396:	9303      	str	r3, [sp, #12]
 800b398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39a:	443b      	add	r3, r7
 800b39c:	9309      	str	r3, [sp, #36]	; 0x24
 800b39e:	e767      	b.n	800b270 <_vfiprintf_r+0x94>
 800b3a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	e7a5      	b.n	800b2f6 <_vfiprintf_r+0x11a>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	3401      	adds	r4, #1
 800b3ae:	9305      	str	r3, [sp, #20]
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	f04f 0c0a 	mov.w	ip, #10
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3bc:	3a30      	subs	r2, #48	; 0x30
 800b3be:	2a09      	cmp	r2, #9
 800b3c0:	d903      	bls.n	800b3ca <_vfiprintf_r+0x1ee>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0c5      	beq.n	800b352 <_vfiprintf_r+0x176>
 800b3c6:	9105      	str	r1, [sp, #20]
 800b3c8:	e7c3      	b.n	800b352 <_vfiprintf_r+0x176>
 800b3ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e7f0      	b.n	800b3b6 <_vfiprintf_r+0x1da>
 800b3d4:	ab03      	add	r3, sp, #12
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4b16      	ldr	r3, [pc, #88]	; (800b434 <_vfiprintf_r+0x258>)
 800b3dc:	a904      	add	r1, sp, #16
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7fb fdf6 	bl	8006fd0 <_printf_float>
 800b3e4:	4607      	mov	r7, r0
 800b3e6:	1c78      	adds	r0, r7, #1
 800b3e8:	d1d6      	bne.n	800b398 <_vfiprintf_r+0x1bc>
 800b3ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ec:	07d9      	lsls	r1, r3, #31
 800b3ee:	d405      	bmi.n	800b3fc <_vfiprintf_r+0x220>
 800b3f0:	89ab      	ldrh	r3, [r5, #12]
 800b3f2:	059a      	lsls	r2, r3, #22
 800b3f4:	d402      	bmi.n	800b3fc <_vfiprintf_r+0x220>
 800b3f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f8:	f7ff fe71 	bl	800b0de <__retarget_lock_release_recursive>
 800b3fc:	89ab      	ldrh	r3, [r5, #12]
 800b3fe:	065b      	lsls	r3, r3, #25
 800b400:	f53f af12 	bmi.w	800b228 <_vfiprintf_r+0x4c>
 800b404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b406:	e711      	b.n	800b22c <_vfiprintf_r+0x50>
 800b408:	ab03      	add	r3, sp, #12
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	462a      	mov	r2, r5
 800b40e:	4b09      	ldr	r3, [pc, #36]	; (800b434 <_vfiprintf_r+0x258>)
 800b410:	a904      	add	r1, sp, #16
 800b412:	4630      	mov	r0, r6
 800b414:	f7fc f880 	bl	8007518 <_printf_i>
 800b418:	e7e4      	b.n	800b3e4 <_vfiprintf_r+0x208>
 800b41a:	bf00      	nop
 800b41c:	0800bc74 	.word	0x0800bc74
 800b420:	0800bc94 	.word	0x0800bc94
 800b424:	0800bc54 	.word	0x0800bc54
 800b428:	0800bc04 	.word	0x0800bc04
 800b42c:	0800bc0e 	.word	0x0800bc0e
 800b430:	08006fd1 	.word	0x08006fd1
 800b434:	0800b1b9 	.word	0x0800b1b9
 800b438:	0800bc0a 	.word	0x0800bc0a

0800b43c <__swbuf_r>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	460e      	mov	r6, r1
 800b440:	4614      	mov	r4, r2
 800b442:	4605      	mov	r5, r0
 800b444:	b118      	cbz	r0, 800b44e <__swbuf_r+0x12>
 800b446:	6983      	ldr	r3, [r0, #24]
 800b448:	b90b      	cbnz	r3, 800b44e <__swbuf_r+0x12>
 800b44a:	f7ff fd97 	bl	800af7c <__sinit>
 800b44e:	4b21      	ldr	r3, [pc, #132]	; (800b4d4 <__swbuf_r+0x98>)
 800b450:	429c      	cmp	r4, r3
 800b452:	d12b      	bne.n	800b4ac <__swbuf_r+0x70>
 800b454:	686c      	ldr	r4, [r5, #4]
 800b456:	69a3      	ldr	r3, [r4, #24]
 800b458:	60a3      	str	r3, [r4, #8]
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	071a      	lsls	r2, r3, #28
 800b45e:	d52f      	bpl.n	800b4c0 <__swbuf_r+0x84>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	b36b      	cbz	r3, 800b4c0 <__swbuf_r+0x84>
 800b464:	6923      	ldr	r3, [r4, #16]
 800b466:	6820      	ldr	r0, [r4, #0]
 800b468:	1ac0      	subs	r0, r0, r3
 800b46a:	6963      	ldr	r3, [r4, #20]
 800b46c:	b2f6      	uxtb	r6, r6
 800b46e:	4283      	cmp	r3, r0
 800b470:	4637      	mov	r7, r6
 800b472:	dc04      	bgt.n	800b47e <__swbuf_r+0x42>
 800b474:	4621      	mov	r1, r4
 800b476:	4628      	mov	r0, r5
 800b478:	f7ff fcec 	bl	800ae54 <_fflush_r>
 800b47c:	bb30      	cbnz	r0, 800b4cc <__swbuf_r+0x90>
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	3b01      	subs	r3, #1
 800b482:	60a3      	str	r3, [r4, #8]
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	6022      	str	r2, [r4, #0]
 800b48a:	701e      	strb	r6, [r3, #0]
 800b48c:	6963      	ldr	r3, [r4, #20]
 800b48e:	3001      	adds	r0, #1
 800b490:	4283      	cmp	r3, r0
 800b492:	d004      	beq.n	800b49e <__swbuf_r+0x62>
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	07db      	lsls	r3, r3, #31
 800b498:	d506      	bpl.n	800b4a8 <__swbuf_r+0x6c>
 800b49a:	2e0a      	cmp	r6, #10
 800b49c:	d104      	bne.n	800b4a8 <__swbuf_r+0x6c>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7ff fcd7 	bl	800ae54 <_fflush_r>
 800b4a6:	b988      	cbnz	r0, 800b4cc <__swbuf_r+0x90>
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <__swbuf_r+0x9c>)
 800b4ae:	429c      	cmp	r4, r3
 800b4b0:	d101      	bne.n	800b4b6 <__swbuf_r+0x7a>
 800b4b2:	68ac      	ldr	r4, [r5, #8]
 800b4b4:	e7cf      	b.n	800b456 <__swbuf_r+0x1a>
 800b4b6:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <__swbuf_r+0xa0>)
 800b4b8:	429c      	cmp	r4, r3
 800b4ba:	bf08      	it	eq
 800b4bc:	68ec      	ldreq	r4, [r5, #12]
 800b4be:	e7ca      	b.n	800b456 <__swbuf_r+0x1a>
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 f80c 	bl	800b4e0 <__swsetup_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0cb      	beq.n	800b464 <__swbuf_r+0x28>
 800b4cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b4d0:	e7ea      	b.n	800b4a8 <__swbuf_r+0x6c>
 800b4d2:	bf00      	nop
 800b4d4:	0800bc74 	.word	0x0800bc74
 800b4d8:	0800bc94 	.word	0x0800bc94
 800b4dc:	0800bc54 	.word	0x0800bc54

0800b4e0 <__swsetup_r>:
 800b4e0:	4b32      	ldr	r3, [pc, #200]	; (800b5ac <__swsetup_r+0xcc>)
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	681d      	ldr	r5, [r3, #0]
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	b125      	cbz	r5, 800b4f6 <__swsetup_r+0x16>
 800b4ec:	69ab      	ldr	r3, [r5, #24]
 800b4ee:	b913      	cbnz	r3, 800b4f6 <__swsetup_r+0x16>
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f7ff fd43 	bl	800af7c <__sinit>
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <__swsetup_r+0xd0>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	d10f      	bne.n	800b51c <__swsetup_r+0x3c>
 800b4fc:	686c      	ldr	r4, [r5, #4]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b504:	0719      	lsls	r1, r3, #28
 800b506:	d42c      	bmi.n	800b562 <__swsetup_r+0x82>
 800b508:	06dd      	lsls	r5, r3, #27
 800b50a:	d411      	bmi.n	800b530 <__swsetup_r+0x50>
 800b50c:	2309      	movs	r3, #9
 800b50e:	6033      	str	r3, [r6, #0]
 800b510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	f04f 30ff 	mov.w	r0, #4294967295
 800b51a:	e03e      	b.n	800b59a <__swsetup_r+0xba>
 800b51c:	4b25      	ldr	r3, [pc, #148]	; (800b5b4 <__swsetup_r+0xd4>)
 800b51e:	429c      	cmp	r4, r3
 800b520:	d101      	bne.n	800b526 <__swsetup_r+0x46>
 800b522:	68ac      	ldr	r4, [r5, #8]
 800b524:	e7eb      	b.n	800b4fe <__swsetup_r+0x1e>
 800b526:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <__swsetup_r+0xd8>)
 800b528:	429c      	cmp	r4, r3
 800b52a:	bf08      	it	eq
 800b52c:	68ec      	ldreq	r4, [r5, #12]
 800b52e:	e7e6      	b.n	800b4fe <__swsetup_r+0x1e>
 800b530:	0758      	lsls	r0, r3, #29
 800b532:	d512      	bpl.n	800b55a <__swsetup_r+0x7a>
 800b534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b536:	b141      	cbz	r1, 800b54a <__swsetup_r+0x6a>
 800b538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b53c:	4299      	cmp	r1, r3
 800b53e:	d002      	beq.n	800b546 <__swsetup_r+0x66>
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff f96d 	bl	800a820 <_free_r>
 800b546:	2300      	movs	r3, #0
 800b548:	6363      	str	r3, [r4, #52]	; 0x34
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	b94b      	cbnz	r3, 800b57a <__swsetup_r+0x9a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b56c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b570:	d003      	beq.n	800b57a <__swsetup_r+0x9a>
 800b572:	4621      	mov	r1, r4
 800b574:	4630      	mov	r0, r6
 800b576:	f000 f84d 	bl	800b614 <__smakebuf_r>
 800b57a:	89a0      	ldrh	r0, [r4, #12]
 800b57c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b580:	f010 0301 	ands.w	r3, r0, #1
 800b584:	d00a      	beq.n	800b59c <__swsetup_r+0xbc>
 800b586:	2300      	movs	r3, #0
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	6963      	ldr	r3, [r4, #20]
 800b58c:	425b      	negs	r3, r3
 800b58e:	61a3      	str	r3, [r4, #24]
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	b943      	cbnz	r3, 800b5a6 <__swsetup_r+0xc6>
 800b594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b598:	d1ba      	bne.n	800b510 <__swsetup_r+0x30>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	0781      	lsls	r1, r0, #30
 800b59e:	bf58      	it	pl
 800b5a0:	6963      	ldrpl	r3, [r4, #20]
 800b5a2:	60a3      	str	r3, [r4, #8]
 800b5a4:	e7f4      	b.n	800b590 <__swsetup_r+0xb0>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e7f7      	b.n	800b59a <__swsetup_r+0xba>
 800b5aa:	bf00      	nop
 800b5ac:	2000000c 	.word	0x2000000c
 800b5b0:	0800bc74 	.word	0x0800bc74
 800b5b4:	0800bc94 	.word	0x0800bc94
 800b5b8:	0800bc54 	.word	0x0800bc54

0800b5bc <abort>:
 800b5bc:	b508      	push	{r3, lr}
 800b5be:	2006      	movs	r0, #6
 800b5c0:	f000 f898 	bl	800b6f4 <raise>
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	f7f6 fe79 	bl	80022bc <_exit>

0800b5ca <__swhatbuf_r>:
 800b5ca:	b570      	push	{r4, r5, r6, lr}
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	b096      	sub	sp, #88	; 0x58
 800b5d6:	4614      	mov	r4, r2
 800b5d8:	461d      	mov	r5, r3
 800b5da:	da08      	bge.n	800b5ee <__swhatbuf_r+0x24>
 800b5dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	602a      	str	r2, [r5, #0]
 800b5e4:	061a      	lsls	r2, r3, #24
 800b5e6:	d410      	bmi.n	800b60a <__swhatbuf_r+0x40>
 800b5e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ec:	e00e      	b.n	800b60c <__swhatbuf_r+0x42>
 800b5ee:	466a      	mov	r2, sp
 800b5f0:	f000 f89c 	bl	800b72c <_fstat_r>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	dbf1      	blt.n	800b5dc <__swhatbuf_r+0x12>
 800b5f8:	9a01      	ldr	r2, [sp, #4]
 800b5fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b602:	425a      	negs	r2, r3
 800b604:	415a      	adcs	r2, r3
 800b606:	602a      	str	r2, [r5, #0]
 800b608:	e7ee      	b.n	800b5e8 <__swhatbuf_r+0x1e>
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	2000      	movs	r0, #0
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	b016      	add	sp, #88	; 0x58
 800b612:	bd70      	pop	{r4, r5, r6, pc}

0800b614 <__smakebuf_r>:
 800b614:	898b      	ldrh	r3, [r1, #12]
 800b616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b618:	079d      	lsls	r5, r3, #30
 800b61a:	4606      	mov	r6, r0
 800b61c:	460c      	mov	r4, r1
 800b61e:	d507      	bpl.n	800b630 <__smakebuf_r+0x1c>
 800b620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	6123      	str	r3, [r4, #16]
 800b628:	2301      	movs	r3, #1
 800b62a:	6163      	str	r3, [r4, #20]
 800b62c:	b002      	add	sp, #8
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	ab01      	add	r3, sp, #4
 800b632:	466a      	mov	r2, sp
 800b634:	f7ff ffc9 	bl	800b5ca <__swhatbuf_r>
 800b638:	9900      	ldr	r1, [sp, #0]
 800b63a:	4605      	mov	r5, r0
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff f95b 	bl	800a8f8 <_malloc_r>
 800b642:	b948      	cbnz	r0, 800b658 <__smakebuf_r+0x44>
 800b644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b648:	059a      	lsls	r2, r3, #22
 800b64a:	d4ef      	bmi.n	800b62c <__smakebuf_r+0x18>
 800b64c:	f023 0303 	bic.w	r3, r3, #3
 800b650:	f043 0302 	orr.w	r3, r3, #2
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	e7e3      	b.n	800b620 <__smakebuf_r+0xc>
 800b658:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <__smakebuf_r+0x7c>)
 800b65a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	6020      	str	r0, [r4, #0]
 800b660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	9b00      	ldr	r3, [sp, #0]
 800b668:	6163      	str	r3, [r4, #20]
 800b66a:	9b01      	ldr	r3, [sp, #4]
 800b66c:	6120      	str	r0, [r4, #16]
 800b66e:	b15b      	cbz	r3, 800b688 <__smakebuf_r+0x74>
 800b670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b674:	4630      	mov	r0, r6
 800b676:	f000 f86b 	bl	800b750 <_isatty_r>
 800b67a:	b128      	cbz	r0, 800b688 <__smakebuf_r+0x74>
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	f023 0303 	bic.w	r3, r3, #3
 800b682:	f043 0301 	orr.w	r3, r3, #1
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	89a0      	ldrh	r0, [r4, #12]
 800b68a:	4305      	orrs	r5, r0
 800b68c:	81a5      	strh	r5, [r4, #12]
 800b68e:	e7cd      	b.n	800b62c <__smakebuf_r+0x18>
 800b690:	0800af15 	.word	0x0800af15

0800b694 <_malloc_usable_size_r>:
 800b694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b698:	1f18      	subs	r0, r3, #4
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	bfbc      	itt	lt
 800b69e:	580b      	ldrlt	r3, [r1, r0]
 800b6a0:	18c0      	addlt	r0, r0, r3
 800b6a2:	4770      	bx	lr

0800b6a4 <_raise_r>:
 800b6a4:	291f      	cmp	r1, #31
 800b6a6:	b538      	push	{r3, r4, r5, lr}
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	d904      	bls.n	800b6b8 <_raise_r+0x14>
 800b6ae:	2316      	movs	r3, #22
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6ba:	b112      	cbz	r2, 800b6c2 <_raise_r+0x1e>
 800b6bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6c0:	b94b      	cbnz	r3, 800b6d6 <_raise_r+0x32>
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f830 	bl	800b728 <_getpid_r>
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d2:	f000 b817 	b.w	800b704 <_kill_r>
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d00a      	beq.n	800b6f0 <_raise_r+0x4c>
 800b6da:	1c59      	adds	r1, r3, #1
 800b6dc:	d103      	bne.n	800b6e6 <_raise_r+0x42>
 800b6de:	2316      	movs	r3, #22
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e7e7      	b.n	800b6b6 <_raise_r+0x12>
 800b6e6:	2400      	movs	r4, #0
 800b6e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	4798      	blx	r3
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	e7e0      	b.n	800b6b6 <_raise_r+0x12>

0800b6f4 <raise>:
 800b6f4:	4b02      	ldr	r3, [pc, #8]	; (800b700 <raise+0xc>)
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	f7ff bfd3 	b.w	800b6a4 <_raise_r>
 800b6fe:	bf00      	nop
 800b700:	2000000c 	.word	0x2000000c

0800b704 <_kill_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_kill_r+0x20>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	4611      	mov	r1, r2
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	f7f6 fdc3 	bl	800229c <_kill>
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	d102      	bne.n	800b720 <_kill_r+0x1c>
 800b71a:	682b      	ldr	r3, [r5, #0]
 800b71c:	b103      	cbz	r3, 800b720 <_kill_r+0x1c>
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	bf00      	nop
 800b724:	20000988 	.word	0x20000988

0800b728 <_getpid_r>:
 800b728:	f7f6 bdb0 	b.w	800228c <_getpid>

0800b72c <_fstat_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_fstat_r+0x20>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	4611      	mov	r1, r2
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	f7f6 fe0e 	bl	800235a <_fstat>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d102      	bne.n	800b748 <_fstat_r+0x1c>
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	b103      	cbz	r3, 800b748 <_fstat_r+0x1c>
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	bd38      	pop	{r3, r4, r5, pc}
 800b74a:	bf00      	nop
 800b74c:	20000988 	.word	0x20000988

0800b750 <_isatty_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_isatty_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f6 fe0d 	bl	800237a <_isatty>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_isatty_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_isatty_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	20000988 	.word	0x20000988

0800b770 <_init>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr

0800b77c <_fini>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	bf00      	nop
 800b780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b782:	bc08      	pop	{r3}
 800b784:	469e      	mov	lr, r3
 800b786:	4770      	bx	lr
